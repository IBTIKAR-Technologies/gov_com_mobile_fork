diff --git a/node_modules/@jitsi/react-native-sdk/README.md b/node_modules/@jitsi/react-native-sdk/README.md
index d916364..faba639 100644
--- a/node_modules/@jitsi/react-native-sdk/README.md
+++ b/node_modules/@jitsi/react-native-sdk/README.md
@@ -6,13 +6,15 @@ Inside your project, run;
 ```console
 npm i @jitsi/react-native-sdk
 ```
-<br/><br/>Additionally, if not already installed, some dependencies will need to be added.
+If there are conflicts, you can use ```--force```
+<br/>Additionally, if not already installed, some dependencies will need to be added.
 
 This can be done by running the following script:
 ```console
 node node_modules/@jitsi/react-native-sdk/update_dependencies.js
 ```
 This will check and update all your dependencies.<br/><br/>
+After that you need to ```npm i```, if some dependency versions were updated.
 
  [comment]: # (These deps definitely need to be added manually, more could be neccesary)
 
@@ -47,7 +49,7 @@ module.exports = (async () => {
 })();
 ```
 
-### iOS
+## iOS
 
 #### Project Info.plist
 - Add a *Privacy - Camera Usage Description*
@@ -65,7 +67,7 @@ Run;
 cd ios && pod install && cd ..
 ```
 
-### Android
+## Android
 
 - In your build.gradle have at least `minSdkVersion = 24`
 - In `android/app/src/debug/AndroidManifest.xml` and `android/app/src/main/AndroidManifest.xml`, under the `</application>` tag, include
@@ -73,26 +75,56 @@ cd ios && pod install && cd ..
     <uses-permission android:name="android.permission.RECORD_AUDIO" />
     <uses-permission android:name="android.permission.CAMERA" />
   ```
-- In `android/app/src/main/AndroidManifest.xml`, under the `</application>` tag, include
+  ### Services
+    #### Screen share
+
+- Go to your `MainApplication.java` file and add:
+    1. `import com.oney.WebRTCModule.WebRTCModuleOptions;` that comes from `react-native-webrtc` dependency.
+
+    2. `WebRTCModuleOptions options = WebRTCModuleOptions.getInstance();` instance it.
+    3. `options.enableMediaProjectionService = true;` enable foreground service that takes care of screen-sharing feature.
+
+- Go to your `android/app/src/main/AndroidManifest.xml`, under the `</application>` tag and include
     ```xml
-   <service
-       android:name="org.jitsi.meet.sdk.JitsiMeetOngoingConferenceService"
-       android:foregroundServiceType="mediaProjection" />
+   <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
+   <uses-permission android:name="android.permission.FOREGROUND_SERVICE_MEDIA_PROJECTION" />
     ```
-  This will take care of the screen share feature.
 
 If you want to test all the steps before applying them to your app, you can check our React Native SDK sample app here:
 https://github.com/jitsi/jitsi-meet-sdk-samples/tree/master/react-native
 
 
-### Using JWT tokens
-- If you are planning to use tokens or another domain you can do that by updating the following props, as shown below.
+## Using JWT tokens
+- If you are planning to use tokens or another domain, you can do that by updating the following props, as shown below.
+- For example:
+```javascript
+  <JitsiMeeting
+    room = { 'ThisIsNotATestRoomName' }
+    serverURL = { 'https://meet.jit.si/' }
+    token={ 'dkhalhfajhflahlfaahalhfahfsl' } />
+```
+
+## Using custom overflow menu buttons
+- If you are planning to add custom overflow menu buttons, you can do that by updating the ```config``` prop, as shown below.
 - For example:
 ```javascript
   <JitsiMeeting
-    room={'ThisIsNotATestRoomName'}
-    serverURL={'https://meet.jit.si/'}
-    token={'dkhalhfajhflahlfaahalhfahfsl'} />
+    config = {{
+        customToolbarButtons: [
+            {
+                icon: "https://w7.pngwing.com/pngs/987/537/png-transparent-download-downloading-save-basic-user-interface-icon-thumbnail.png",
+                id: "btn1",
+                text: "Button one"
+            }, {
+                icon: "https://w7.pngwing.com/pngs/987/537/png-transparent-download-downloading-save-basic-user-interface-icon-thumbnail.png",
+                id: "btn2",
+                text: "Button two"
+            }
+        ]
+    }}
+    room = { 'ThisIsNotATestRoomName' }
+    serverURL = { 'https://meet.jit.si/' }
+    token = { 'dkhalhfajhflahlfaahalhfahfsl' } />
 ```
 
 For more details on how you can use React Native SDK with React Native app, you can follow this link:
diff --git a/node_modules/@jitsi/react-native-sdk/android/.project b/node_modules/@jitsi/react-native-sdk/android/.project
new file mode 100644
index 0000000..29b5d45
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/.project
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>jitsi_react-native-sdk</name>
+	<comment>Project jitsi_react-native-sdk created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1724175942688</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/.transforms/26301967a91d0411cbd3aeaca62436ce/results.bin b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/26301967a91d0411cbd3aeaca62436ce/results.bin
new file mode 100644
index 0000000..61a58fa
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/26301967a91d0411cbd3aeaca62436ce/results.bin
@@ -0,0 +1 @@
+i/classes_dex
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/.transforms/46bb5f74cf330c888e5a484bb2e3bb01/results.bin b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/46bb5f74cf330c888e5a484bb2e3bb01/results.bin
new file mode 100644
index 0000000..0d259dd
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/46bb5f74cf330c888e5a484bb2e3bb01/results.bin
@@ -0,0 +1 @@
+o/classes
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/.transforms/46bb5f74cf330c888e5a484bb2e3bb01/transformed/classes/classes_dex/classes.dex b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/46bb5f74cf330c888e5a484bb2e3bb01/transformed/classes/classes_dex/classes.dex
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/.transforms/5b2092a376f5930b0848486b05904150/results.bin b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/5b2092a376f5930b0848486b05904150/results.bin
new file mode 100644
index 0000000..e3f0ff0
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/5b2092a376f5930b0848486b05904150/results.bin
@@ -0,0 +1 @@
+i/classes_global-synthetics
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/.transforms/be2704d7cce0a54d5df9ab9b75de166d/results.bin b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/be2704d7cce0a54d5df9ab9b75de166d/results.bin
new file mode 100644
index 0000000..e3f0ff0
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/be2704d7cce0a54d5df9ab9b75de166d/results.bin
@@ -0,0 +1 @@
+i/classes_global-synthetics
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/.transforms/c53f65b9f9b66bc7f9fac3f7aa2df1eb/results.bin b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/c53f65b9f9b66bc7f9fac3f7aa2df1eb/results.bin
new file mode 100644
index 0000000..61a58fa
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/c53f65b9f9b66bc7f9fac3f7aa2df1eb/results.bin
@@ -0,0 +1 @@
+i/classes_dex
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/.transforms/d2842c938c9d79475acb56781bea8e5c/results.bin b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/d2842c938c9d79475acb56781bea8e5c/results.bin
new file mode 100644
index 0000000..0d259dd
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/d2842c938c9d79475acb56781bea8e5c/results.bin
@@ -0,0 +1 @@
+o/classes
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/.transforms/d2842c938c9d79475acb56781bea8e5c/transformed/classes/classes_dex/classes.dex b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/d2842c938c9d79475acb56781bea8e5c/transformed/classes/classes_dex/classes.dex
new file mode 100644
index 0000000..eee74ef
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/.transforms/d2842c938c9d79475acb56781bea8e5c/transformed/classes/classes_dex/classes.dex differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/generated/source/buildConfig/debug/org/jitsi/meet/sdk/BuildConfig.java b/node_modules/@jitsi/react-native-sdk/android/build/generated/source/buildConfig/debug/org/jitsi/meet/sdk/BuildConfig.java
new file mode 100644
index 0000000..1ac18eb
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/generated/source/buildConfig/debug/org/jitsi/meet/sdk/BuildConfig.java
@@ -0,0 +1,12 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package org.jitsi.meet.sdk;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String LIBRARY_PACKAGE_NAME = "org.jitsi.meet.sdk";
+  public static final String BUILD_TYPE = "debug";
+  // Field from default config.
+  public static final boolean IS_NEW_ARCHITECTURE_ENABLED = false;
+}
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/AndroidManifest.xml b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/AndroidManifest.xml
new file mode 100644
index 0000000..cae9182
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.jitsi.meet.sdk" >
+
+    <uses-sdk android:minSdkVersion="23" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/output-metadata.json b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/output-metadata.json
new file mode 100644
index 0000000..6801cf0
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/output-metadata.json
@@ -0,0 +1,18 @@
+{
+  "version": 3,
+  "artifactType": {
+    "type": "AAPT_FRIENDLY_MERGED_MANIFESTS",
+    "kind": "Directory"
+  },
+  "applicationId": "org.jitsi.meet.sdk",
+  "variantName": "debug",
+  "elements": [
+    {
+      "type": "SINGLE",
+      "filters": [],
+      "attributes": [],
+      "outputFile": "AndroidManifest.xml"
+    }
+  ],
+  "elementType": "File"
+}
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/aar_metadata/debug/aar-metadata.properties b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/aar_metadata/debug/aar-metadata.properties
new file mode 100644
index 0000000..776557e
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/aar_metadata/debug/aar-metadata.properties
@@ -0,0 +1,5 @@
+aarFormatVersion=1.0
+aarMetadataVersion=1.0
+minCompileSdk=1
+minCompileSdkExtension=0
+minAndroidGradlePluginVersion=1.0.0
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/annotation_processor_list/debug/annotationProcessors.json b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/annotation_processor_list/debug/annotationProcessors.json
new file mode 100644
index 0000000..9e26dfe
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/annotation_processor_list/debug/annotationProcessors.json
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compile_library_classes_jar/debug/classes.jar b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compile_library_classes_jar/debug/classes.jar
new file mode 100644
index 0000000..6d3a1bf
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compile_library_classes_jar/debug/classes.jar differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compile_r_class_jar/debug/R.jar b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compile_r_class_jar/debug/R.jar
new file mode 100644
index 0000000..f2482be
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compile_r_class_jar/debug/R.jar differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compile_symbol_list/debug/R.txt b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compile_symbol_list/debug/R.txt
new file mode 100644
index 0000000..a06c7b8
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compile_symbol_list/debug/R.txt
@@ -0,0 +1,12 @@
+int drawable ic_notification 0x0
+int string app_name 0x0
+int string dropbox_app_key 0x0
+int string media_projection_notification_text 0x0
+int string media_projection_notification_title 0x0
+int string ongoing_notification_action_hang_up 0x0
+int string ongoing_notification_action_mute 0x0
+int string ongoing_notification_action_unmute 0x0
+int string ongoing_notification_channel_name 0x0
+int string ongoing_notification_text 0x0
+int string ongoing_notification_title 0x0
+int style JitsiMeetActivityStyle 0x0
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-hdpi-v4_ic_notification.png.flat b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-hdpi-v4_ic_notification.png.flat
new file mode 100644
index 0000000..c75bc57
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-hdpi-v4_ic_notification.png.flat differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-mdpi-v4_ic_notification.png.flat b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-mdpi-v4_ic_notification.png.flat
new file mode 100644
index 0000000..e10f568
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-mdpi-v4_ic_notification.png.flat differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-xhdpi-v4_ic_notification.png.flat b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-xhdpi-v4_ic_notification.png.flat
new file mode 100644
index 0000000..d8f6bb5
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-xhdpi-v4_ic_notification.png.flat differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-xxhdpi-v4_ic_notification.png.flat b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-xxhdpi-v4_ic_notification.png.flat
new file mode 100644
index 0000000..98917e8
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-xxhdpi-v4_ic_notification.png.flat differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-xxxhdpi-v4_ic_notification.png.flat b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-xxxhdpi-v4_ic_notification.png.flat
new file mode 100644
index 0000000..403f380
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/compiled_local_resources/debug/out/drawable-xxxhdpi-v4_ic_notification.png.flat differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
new file mode 100644
index 0000000..10af2ec
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
@@ -0,0 +1,6 @@
+#Tue Aug 20 16:27:35 GMT 2024
+org.jitsi.meet.sdk.jitsi_react-native-sdk-main-6\:/drawable-xhdpi/ic_notification.png=C\:\\Users\\INFO\\Desktop\\ibtikar\\gov_com\\gov_com_mobile_fork\\node_modules\\@jitsi\\react-native-sdk\\android\\build\\intermediates\\packaged_res\\debug\\drawable-xhdpi-v4\\ic_notification.png
+org.jitsi.meet.sdk.jitsi_react-native-sdk-main-6\:/drawable-xxhdpi/ic_notification.png=C\:\\Users\\INFO\\Desktop\\ibtikar\\gov_com\\gov_com_mobile_fork\\node_modules\\@jitsi\\react-native-sdk\\android\\build\\intermediates\\packaged_res\\debug\\drawable-xxhdpi-v4\\ic_notification.png
+org.jitsi.meet.sdk.jitsi_react-native-sdk-main-6\:/drawable-xxxhdpi/ic_notification.png=C\:\\Users\\INFO\\Desktop\\ibtikar\\gov_com\\gov_com_mobile_fork\\node_modules\\@jitsi\\react-native-sdk\\android\\build\\intermediates\\packaged_res\\debug\\drawable-xxxhdpi-v4\\ic_notification.png
+org.jitsi.meet.sdk.jitsi_react-native-sdk-main-6\:/drawable-hdpi/ic_notification.png=C\:\\Users\\INFO\\Desktop\\ibtikar\\gov_com\\gov_com_mobile_fork\\node_modules\\@jitsi\\react-native-sdk\\android\\build\\intermediates\\packaged_res\\debug\\drawable-hdpi-v4\\ic_notification.png
+org.jitsi.meet.sdk.jitsi_react-native-sdk-main-6\:/drawable-mdpi/ic_notification.png=C\:\\Users\\INFO\\Desktop\\ibtikar\\gov_com\\gov_com_mobile_fork\\node_modules\\@jitsi\\react-native-sdk\\android\\build\\intermediates\\packaged_res\\debug\\drawable-mdpi-v4\\ic_notification.png
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/debug/packageDebugResources/merged.dir/values/values.xml b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/debug/packageDebugResources/merged.dir/values/values.xml
new file mode 100644
index 0000000..87e1578
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/debug/packageDebugResources/merged.dir/values/values.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Jitsi Meet SDK</string>
+    <string name="dropbox_app_key"/>
+    <string name="media_projection_notification_text">You are currently sharing your screen.</string>
+    <string name="media_projection_notification_title">Media projection</string>
+    <string name="ongoing_notification_action_hang_up">Hang up</string>
+    <string name="ongoing_notification_action_mute">Mute</string>
+    <string name="ongoing_notification_action_unmute">Unmute</string>
+    <string name="ongoing_notification_channel_name">Ongoing Conference Notifications</string>
+    <string name="ongoing_notification_text">You are currently in a meeting. Tap to return to it.</string>
+    <string name="ongoing_notification_title">Ongoing meeting</string>
+    <style name="JitsiMeetActivityStyle" parent="Theme.AppCompat.Light.NoActionBar"/>
+</resources>
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
new file mode 100644
index 0000000..c1147fe
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main" generated-set="main$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\res"><file name="ic_notification" path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\res\drawable-hdpi\ic_notification.png" qualifiers="hdpi-v4" type="drawable"/><file name="ic_notification" path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\res\drawable-mdpi\ic_notification.png" qualifiers="mdpi-v4" type="drawable"/><file name="ic_notification" path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\res\drawable-xhdpi\ic_notification.png" qualifiers="xhdpi-v4" type="drawable"/><file name="ic_notification" path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\res\drawable-xxhdpi\ic_notification.png" qualifiers="xxhdpi-v4" type="drawable"/><file name="ic_notification" path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\res\drawable-xxxhdpi\ic_notification.png" qualifiers="xxxhdpi-v4" type="drawable"/><file path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\res\values\strings.xml" qualifiers=""><string name="app_name">Jitsi Meet SDK</string><string name="dropbox_app_key"/><string name="media_projection_notification_title">Media projection</string><string name="media_projection_notification_text">You are currently sharing your screen.</string><string name="ongoing_notification_title">Ongoing meeting</string><string name="ongoing_notification_text">You are currently in a meeting. Tap to return to it.</string><string name="ongoing_notification_action_hang_up">Hang up</string><string name="ongoing_notification_action_mute">Mute</string><string name="ongoing_notification_action_unmute">Unmute</string><string name="ongoing_notification_channel_name">Ongoing Conference Notifications</string></file><file path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\res\values\styles.xml" qualifiers=""><style name="JitsiMeetActivityStyle" parent="Theme.AppCompat.Light.NoActionBar"/></file></source></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug" generated-set="debug$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\build\generated\res\resValues\debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated" generated-set="generated$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\build\generated\res\resValues\debug"/></dataSet><mergedItems/></merger>
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/mergeDebugJniLibFolders/merger.xml b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/mergeDebugJniLibFolders/merger.xml
new file mode 100644
index 0000000..d92ca25
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/mergeDebugJniLibFolders/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\jniLibs"/></dataSet><dataSet config="debug" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\debug\jniLibs"/></dataSet></merger>
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/mergeDebugShaders/merger.xml b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/mergeDebugShaders/merger.xml
new file mode 100644
index 0000000..7ff7a2b
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/mergeDebugShaders/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\shaders"/></dataSet><dataSet config="debug" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\debug\shaders"/></dataSet></merger>
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/packageDebugAssets/merger.xml b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/packageDebugAssets/merger.xml
new file mode 100644
index 0000000..101af8b
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/incremental/packageDebugAssets/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet config="main" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\assets"/></dataSet><dataSet config="debug" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\debug\assets"/></dataSet><dataSet config="generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\build\intermediates\shader_assets\debug\out"/></dataSet></merger>
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AndroidSettingsModule.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AndroidSettingsModule.class
new file mode 100644
index 0000000..ffc94a0
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AndroidSettingsModule.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AppInfoModule.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AppInfoModule.class
new file mode 100644
index 0000000..f1eaa4c
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AppInfoModule.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService$1.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService$1.class
new file mode 100644
index 0000000..54984ae
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService$1.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService.class
new file mode 100644
index 0000000..7c33468
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric$1.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric$1.class
new file mode 100644
index 0000000..a2fc38f
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric$1.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric$2.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric$2.class
new file mode 100644
index 0000000..54700ca
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric$2.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric$3.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric$3.class
new file mode 100644
index 0000000..0d8c617
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric$3.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric.class
new file mode 100644
index 0000000..b26cb93
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioDeviceHandlerGeneric.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$1.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$1.class
new file mode 100644
index 0000000..34d08ce
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$1.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$2.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$2.class
new file mode 100644
index 0000000..f7997d8
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$2.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$3.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$3.class
new file mode 100644
index 0000000..1009b51
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$3.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$4.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$4.class
new file mode 100644
index 0000000..27d91ef
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$4.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$5.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$5.class
new file mode 100644
index 0000000..203966f
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$5.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$AudioDeviceHandlerInterface.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$AudioDeviceHandlerInterface.class
new file mode 100644
index 0000000..f8989bc
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule$AudioDeviceHandlerInterface.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule.class
new file mode 100644
index 0000000..de242a2
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/AudioModeModule.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/BuildConfig.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/BuildConfig.class
new file mode 100644
index 0000000..bfda949
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/BuildConfig.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ConnectionService$ConnectionImpl.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ConnectionService$ConnectionImpl.class
new file mode 100644
index 0000000..be7fe39
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ConnectionService$ConnectionImpl.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ConnectionService.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ConnectionService.class
new file mode 100644
index 0000000..ecf4ba9
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ConnectionService.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/JavaScriptSandboxModule.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/JavaScriptSandboxModule.class
new file mode 100644
index 0000000..a3b25de
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/JavaScriptSandboxModule.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/JitsiMeetReactNativePackage.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/JitsiMeetReactNativePackage.class
new file mode 100644
index 0000000..95af84d
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/JitsiMeetReactNativePackage.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/LocaleDetector.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/LocaleDetector.class
new file mode 100644
index 0000000..9844ff4
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/LocaleDetector.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/LogBridgeModule.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/LogBridgeModule.class
new file mode 100644
index 0000000..abbad0c
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/LogBridgeModule.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/PictureInPictureModule.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/PictureInPictureModule.class
new file mode 100644
index 0000000..919e444
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/PictureInPictureModule.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ProximityModule$1.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ProximityModule$1.class
new file mode 100644
index 0000000..4b41e57
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ProximityModule$1.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ProximityModule.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ProximityModule.class
new file mode 100644
index 0000000..d0cd65a
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/ProximityModule.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/RNConnectionService$CallAudioStateListener.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/RNConnectionService$CallAudioStateListener.class
new file mode 100644
index 0000000..2044c80
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/RNConnectionService$CallAudioStateListener.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/RNConnectionService.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/RNConnectionService.class
new file mode 100644
index 0000000..9e5141a
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/RNConnectionService.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/log/JitsiMeetBaseLogHandler.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/log/JitsiMeetBaseLogHandler.class
new file mode 100644
index 0000000..b71a00d
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/log/JitsiMeetBaseLogHandler.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/log/JitsiMeetDefaultLogHandler.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/log/JitsiMeetDefaultLogHandler.class
new file mode 100644
index 0000000..f4a2ab7
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/log/JitsiMeetDefaultLogHandler.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/log/JitsiMeetLogger.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/log/JitsiMeetLogger.class
new file mode 100644
index 0000000..7e1b116
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/log/JitsiMeetLogger.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/net/NAT64AddrInfo.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/net/NAT64AddrInfo.class
new file mode 100644
index 0000000..0b1869e
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/net/NAT64AddrInfo.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/net/NAT64AddrInfoModule.class b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/net/NAT64AddrInfoModule.class
new file mode 100644
index 0000000..3ea2adb
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/javac/debug/classes/org/jitsi/meet/sdk/net/NAT64AddrInfoModule.class differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/asked-unmute.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/asked-unmute.mp3
new file mode 100644
index 0000000..2dc91dc
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/asked-unmute.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOff.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOff.mp3
new file mode 100644
index 0000000..be320d0
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOff.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOff_fr.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOff_fr.mp3
new file mode 100644
index 0000000..623cc9f
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOff_fr.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOff_frCA.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOff_frCA.mp3
new file mode 100644
index 0000000..623cc9f
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOff_frCA.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOn.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOn.mp3
new file mode 100644
index 0000000..1ceed00
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOn.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOn_fr.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOn_fr.mp3
new file mode 100644
index 0000000..0ca469f
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOn_fr.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOn_frCA.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOn_frCA.mp3
new file mode 100644
index 0000000..0ca469f
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/e2eeOn_frCA.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/incomingMessage.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/incomingMessage.mp3
new file mode 100644
index 0000000..0029d2c
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/incomingMessage.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/incomingMessage.wav b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/incomingMessage.wav
new file mode 100644
index 0000000..012dbab
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/incomingMessage.wav differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/joined.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/joined.mp3
new file mode 100644
index 0000000..975e3a7
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/joined.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/joined.wav b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/joined.wav
new file mode 100644
index 0000000..16ceb80
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/joined.wav differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/knock.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/knock.mp3
new file mode 100644
index 0000000..6b68ec6
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/knock.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/left.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/left.mp3
new file mode 100644
index 0000000..d0780a9
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/left.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/left.wav b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/left.wav
new file mode 100644
index 0000000..0c9cee0
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/left.wav differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOff.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOff.mp3
new file mode 100644
index 0000000..db7e1b8
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOff.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOff_fr.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOff_fr.mp3
new file mode 100644
index 0000000..366fdae
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOff_fr.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOff_frCA.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOff_frCA.mp3
new file mode 100644
index 0000000..366fdae
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOff_frCA.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOn.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOn.mp3
new file mode 100644
index 0000000..0a1ec49
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOn.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOn_fr.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOn_fr.mp3
new file mode 100644
index 0000000..90f120d
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOn_fr.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOn_frCA.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOn_frCA.mp3
new file mode 100644
index 0000000..90f120d
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/liveStreamingOn_frCA.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/noAudioSignal.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/noAudioSignal.mp3
new file mode 100644
index 0000000..d80cc72
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/noAudioSignal.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/noisyAudioInput.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/noisyAudioInput.mp3
new file mode 100644
index 0000000..d80cc72
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/noisyAudioInput.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingRinging.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingRinging.mp3
new file mode 100644
index 0000000..f1103a0
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingRinging.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingRinging.wav b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingRinging.wav
new file mode 100644
index 0000000..7a8b643
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingRinging.wav differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingStart.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingStart.mp3
new file mode 100644
index 0000000..398ebed
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingStart.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingStart.wav b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingStart.wav
new file mode 100644
index 0000000..4b60654
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/outgoingStart.wav differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-applause.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-applause.mp3
new file mode 100644
index 0000000..2254bd2
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-applause.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-boo.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-boo.mp3
new file mode 100644
index 0000000..6ed9114
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-boo.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-crickets.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-crickets.mp3
new file mode 100644
index 0000000..7e3a6c3
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-crickets.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-laughter.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-laughter.mp3
new file mode 100644
index 0000000..772c381
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-laughter.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-raised-hand.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-raised-hand.mp3
new file mode 100644
index 0000000..2fd2f1e
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-raised-hand.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-surprise.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-surprise.mp3
new file mode 100644
index 0000000..63d48fa
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-surprise.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-thumbs-up.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-thumbs-up.mp3
new file mode 100644
index 0000000..92491a1
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/reactions-thumbs-up.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOff.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOff.mp3
new file mode 100644
index 0000000..3c89861
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOff.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOff_fr.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOff_fr.mp3
new file mode 100644
index 0000000..f36a379
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOff_fr.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOff_frCA.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOff_frCA.mp3
new file mode 100644
index 0000000..f36a379
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOff_frCA.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOn.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOn.mp3
new file mode 100644
index 0000000..e8b9e85
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOn.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOn_fr.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOn_fr.mp3
new file mode 100644
index 0000000..35c6568
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOn_fr.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOn_frCA.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOn_frCA.mp3
new file mode 100644
index 0000000..35c6568
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/recordingOn_frCA.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/rejected.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/rejected.mp3
new file mode 100644
index 0000000..857acda
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/rejected.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/rejected.wav b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/rejected.wav
new file mode 100644
index 0000000..ab9fc1c
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/rejected.wav differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/ring.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/ring.mp3
new file mode 100644
index 0000000..937ef63
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/ring.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/ring.wav b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/ring.wav
new file mode 100644
index 0000000..b37d90e
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/ring.wav differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/talkWhileMuted.mp3 b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/talkWhileMuted.mp3
new file mode 100644
index 0000000..d80cc72
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/library_assets/debug/out/sounds/talkWhileMuted.mp3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/local_only_symbol_list/debug/R-def.txt b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/local_only_symbol_list/debug/R-def.txt
new file mode 100644
index 0000000..5d6c329
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/local_only_symbol_list/debug/R-def.txt
@@ -0,0 +1,14 @@
+R_DEF: Internal format may change without notice
+local
+drawable ic_notification
+string app_name
+string dropbox_app_key
+string media_projection_notification_text
+string media_projection_notification_title
+string ongoing_notification_action_hang_up
+string ongoing_notification_action_mute
+string ongoing_notification_action_unmute
+string ongoing_notification_channel_name
+string ongoing_notification_text
+string ongoing_notification_title
+style JitsiMeetActivityStyle
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/manifest_merge_blame_file/debug/manifest-merger-blame-debug-report.txt b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/manifest_merge_blame_file/debug/manifest-merger-blame-debug-report.txt
new file mode 100644
index 0000000..7d3fed8
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/manifest_merge_blame_file/debug/manifest-merger-blame-debug-report.txt
@@ -0,0 +1,7 @@
+1<?xml version="1.0" encoding="utf-8"?>
+2<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+3    package="org.jitsi.meet.sdk" >
+4
+5    <uses-sdk android:minSdkVersion="23" />
+6
+7</manifest>
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/merged_manifest/debug/AndroidManifest.xml b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/merged_manifest/debug/AndroidManifest.xml
new file mode 100644
index 0000000..cae9182
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/merged_manifest/debug/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.jitsi.meet.sdk" >
+
+    <uses-sdk android:minSdkVersion="23" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/navigation_json/debug/navigation.json b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/navigation_json/debug/navigation.json
new file mode 100644
index 0000000..0637a08
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/navigation_json/debug/navigation.json
@@ -0,0 +1 @@
+[]
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-hdpi-v4/ic_notification.png b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-hdpi-v4/ic_notification.png
new file mode 100644
index 0000000..da701e5
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-hdpi-v4/ic_notification.png differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-mdpi-v4/ic_notification.png b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-mdpi-v4/ic_notification.png
new file mode 100644
index 0000000..7540f39
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-mdpi-v4/ic_notification.png differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-xhdpi-v4/ic_notification.png b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-xhdpi-v4/ic_notification.png
new file mode 100644
index 0000000..bed1734
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-xhdpi-v4/ic_notification.png differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-xxhdpi-v4/ic_notification.png b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-xxhdpi-v4/ic_notification.png
new file mode 100644
index 0000000..88bf389
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-xxhdpi-v4/ic_notification.png differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-xxxhdpi-v4/ic_notification.png b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-xxxhdpi-v4/ic_notification.png
new file mode 100644
index 0000000..f071fac
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/drawable-xxxhdpi-v4/ic_notification.png differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/values/values.xml b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/values/values.xml
new file mode 100644
index 0000000..87e1578
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/packaged_res/debug/values/values.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Jitsi Meet SDK</string>
+    <string name="dropbox_app_key"/>
+    <string name="media_projection_notification_text">You are currently sharing your screen.</string>
+    <string name="media_projection_notification_title">Media projection</string>
+    <string name="ongoing_notification_action_hang_up">Hang up</string>
+    <string name="ongoing_notification_action_mute">Mute</string>
+    <string name="ongoing_notification_action_unmute">Unmute</string>
+    <string name="ongoing_notification_channel_name">Ongoing Conference Notifications</string>
+    <string name="ongoing_notification_text">You are currently in a meeting. Tap to return to it.</string>
+    <string name="ongoing_notification_title">Ongoing meeting</string>
+    <style name="JitsiMeetActivityStyle" parent="Theme.AppCompat.Light.NoActionBar"/>
+</resources>
\ No newline at end of file
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/runtime_library_classes_jar/debug/classes.jar b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/runtime_library_classes_jar/debug/classes.jar
new file mode 100644
index 0000000..13bd8a9
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/runtime_library_classes_jar/debug/classes.jar differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/intermediates/symbol_list_with_package_name/debug/package-aware-r.txt b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/symbol_list_with_package_name/debug/package-aware-r.txt
new file mode 100644
index 0000000..7ee399f
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/intermediates/symbol_list_with_package_name/debug/package-aware-r.txt
@@ -0,0 +1,13 @@
+org.jitsi.meet.sdk
+drawable ic_notification
+string app_name
+string dropbox_app_key
+string media_projection_notification_text
+string media_projection_notification_title
+string ongoing_notification_action_hang_up
+string ongoing_notification_action_mute
+string ongoing_notification_action_unmute
+string ongoing_notification_channel_name
+string ongoing_notification_text
+string ongoing_notification_title
+style JitsiMeetActivityStyle
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/outputs/logs/manifest-merger-debug-report.txt b/node_modules/@jitsi/react-native-sdk/android/build/outputs/logs/manifest-merger-debug-report.txt
new file mode 100644
index 0000000..086df22
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/android/build/outputs/logs/manifest-merger-debug-report.txt
@@ -0,0 +1,17 @@
+-- Merging decision tree log ---
+manifest
+ADDED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml:1:1-4:12
+INJECTED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml:1:1-4:12
+	package
+		ADDED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml:2:11-39
+		INJECTED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml
+	xmlns:android
+		ADDED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml:1:11-69
+uses-sdk
+INJECTED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml reason: use-sdk injection requested
+INJECTED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml
+INJECTED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml
+	android:targetSdkVersion
+		INJECTED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml
+	android:minSdkVersion
+		INJECTED from C:\Users\INFO\Desktop\ibtikar\gov_com\gov_com_mobile_fork\node_modules\@jitsi\react-native-sdk\android\src\main\AndroidManifest.xml
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerConnectionService$1.class.uniqueId5 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerConnectionService$1.class.uniqueId5
new file mode 100644
index 0000000..54984ae
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerConnectionService$1.class.uniqueId5 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerConnectionService.class.uniqueId1 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerConnectionService.class.uniqueId1
new file mode 100644
index 0000000..210cd57
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerConnectionService.class.uniqueId1 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric$1.class.uniqueId12 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric$1.class.uniqueId12
new file mode 100644
index 0000000..a2fc38f
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric$1.class.uniqueId12 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric$2.class.uniqueId13 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric$2.class.uniqueId13
new file mode 100644
index 0000000..54700ca
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric$2.class.uniqueId13 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric$3.class.uniqueId8 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric$3.class.uniqueId8
new file mode 100644
index 0000000..0d8c617
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric$3.class.uniqueId8 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric.class.uniqueId6 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric.class.uniqueId6
new file mode 100644
index 0000000..b26cb93
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioDeviceHandlerGeneric.class.uniqueId6 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$1.class.uniqueId3 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$1.class.uniqueId3
new file mode 100644
index 0000000..34d08ce
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$1.class.uniqueId3 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$2.class.uniqueId7 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$2.class.uniqueId7
new file mode 100644
index 0000000..f7997d8
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$2.class.uniqueId7 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$3.class.uniqueId11 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$3.class.uniqueId11
new file mode 100644
index 0000000..1009b51
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$3.class.uniqueId11 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$4.class.uniqueId4 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$4.class.uniqueId4
new file mode 100644
index 0000000..27d91ef
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$4.class.uniqueId4 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$5.class.uniqueId0 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$5.class.uniqueId0
new file mode 100644
index 0000000..203966f
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$5.class.uniqueId0 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$AudioDeviceHandlerInterface.class.uniqueId10 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$AudioDeviceHandlerInterface.class.uniqueId10
new file mode 100644
index 0000000..f8989bc
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule$AudioDeviceHandlerInterface.class.uniqueId10 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule.class.uniqueId9 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule.class.uniqueId9
new file mode 100644
index 0000000..6eb34c4
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/AudioModeModule.class.uniqueId9 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/JitsiMeetReactNativePackage.class.uniqueId2 b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/JitsiMeetReactNativePackage.class.uniqueId2
new file mode 100644
index 0000000..95af84d
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/compileTransaction/stash-dir/JitsiMeetReactNativePackage.class.uniqueId2 differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/previous-compilation-data.bin b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/previous-compilation-data.bin
new file mode 100644
index 0000000..cd3987b
Binary files /dev/null and b/node_modules/@jitsi/react-native-sdk/android/build/tmp/compileDebugJavaWithJavac/previous-compilation-data.bin differ
diff --git a/node_modules/@jitsi/react-native-sdk/android/src/main/java/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService.java b/node_modules/@jitsi/react-native-sdk/android/src/main/java/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService.java
index 5d76ba0..3a34222 100644
--- a/node_modules/@jitsi/react-native-sdk/android/src/main/java/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService.java
+++ b/node_modules/@jitsi/react-native-sdk/android/src/main/java/org/jitsi/meet/sdk/AudioDeviceHandlerConnectionService.java
@@ -63,7 +63,7 @@ class AudioDeviceHandlerConnectionService implements
      */
     private static int audioDeviceToRouteInt(String audioDevice) {
         if (audioDevice == null) {
-            return CallAudioState.ROUTE_SPEAKER;
+            return CallAudioState.ROUTE_EARPIECE;
         }
         switch (audioDevice) {
             case AudioModeModule.DEVICE_BLUETOOTH:
@@ -76,7 +76,7 @@ class AudioDeviceHandlerConnectionService implements
                 return CallAudioState.ROUTE_SPEAKER;
             default:
                 JitsiMeetLogger.e(TAG + " Unsupported device name: " + audioDevice);
-                return CallAudioState.ROUTE_SPEAKER;
+                return CallAudioState.ROUTE_EARPIECE;
         }
     }
 
diff --git a/node_modules/@jitsi/react-native-sdk/android/src/main/java/org/jitsi/meet/sdk/AudioModeModule.java b/node_modules/@jitsi/react-native-sdk/android/src/main/java/org/jitsi/meet/sdk/AudioModeModule.java
index 368dc57..67e2d09 100644
--- a/node_modules/@jitsi/react-native-sdk/android/src/main/java/org/jitsi/meet/sdk/AudioModeModule.java
+++ b/node_modules/@jitsi/react-native-sdk/android/src/main/java/org/jitsi/meet/sdk/AudioModeModule.java
@@ -374,7 +374,7 @@ class AudioModeModule extends ReactContextBaseJavaModule {
         } else if (headsetAvailable) {
             audioDevice = DEVICE_HEADPHONES;
         } else {
-            audioDevice = DEVICE_SPEAKER;
+            audioDevice = DEVICE_EARPIECE;
         }
 
         // Consider the user's selection
diff --git a/node_modules/@jitsi/react-native-sdk/index.tsx b/node_modules/@jitsi/react-native-sdk/index.tsx
index 447008a..363f04a 100644
--- a/node_modules/@jitsi/react-native-sdk/index.tsx
+++ b/node_modules/@jitsi/react-native-sdk/index.tsx
@@ -3,165 +3,161 @@
 // NB: This import must always come first.
 import './react/bootstrap.native';
 
-import React, {
-    forwardRef,
-    useEffect,
-    useImperativeHandle,
-    useLayoutEffect,
-    useRef,
-    useState
-} from 'react';
+import React, { forwardRef, useEffect, useImperativeHandle, useLayoutEffect, useRef, useState } from 'react';
 import { View, ViewStyle } from 'react-native';
 
 import type { IRoomsInfo } from '../react/features/breakout-rooms/types';
 
 import { appNavigate } from './react/features/app/actions.native';
 import { App } from './react/features/app/components/App.native';
+import { setAudioOnly } from './react/features/base/audio-only/actions';
 import { setAudioMuted, setVideoMuted } from './react/features/base/media/actions';
 import { getRoomsInfo } from './react/features/breakout-rooms/functions';
-
+import { leaveConference } from '@jitsi/react-native-sdk/react/features/base/conference/actions.any';
 
 interface IEventListeners {
-    onAudioMutedChanged?: Function;
-    onVideoMutedChanged?: Function;
-    onConferenceBlurred?: Function;
-    onConferenceFocused?: Function;
-    onConferenceJoined?: Function;
-    onConferenceLeft?: Function;
-    onConferenceWillJoin?: Function;
-    onEnterPictureInPicture?: Function;
-    onParticipantJoined?: Function;
-    onParticipantLeft?: ({ id }: { id: string }) => void;
-    onReadyToClose?: Function;
+	onAudioMutedChanged?: Function;
+	onVideoMutedChanged?: Function;
+	onConferenceBlurred?: Function;
+	onConferenceFocused?: Function;
+	onConferenceJoined?: Function;
+	onConferenceLeft?: Function;
+	onConferenceWillJoin?: Function;
+	onEnterPictureInPicture?: Function;
+	onEndpointMessageReceived?: Function;
+	onParticipantJoined?: Function;
+	onParticipantLeft?: ({ id }: { id: string }) => void;
+	onReadyToClose?: Function;
 }
 
 interface IUserInfo {
-    avatarURL: string;
-    displayName: string;
-    email: string;
+	avatarURL: string;
+	displayName: string;
+	email: string;
 }
 
 interface IAppProps {
-    config: object;
-    eventListeners?: IEventListeners;
-    flags?: object;
-    room: string;
-    serverURL?: string;
-    style?: Object;
-    token?: string;
-    userInfo?: IUserInfo;
+	config: object;
+	eventListeners?: IEventListeners;
+	flags?: object;
+	room: string;
+	serverURL?: string;
+	style?: Object;
+	token?: string;
+	userInfo?: IUserInfo;
 }
 
 export interface JitsiRefProps {
-    close: Function;
-    setAudioMuted?: (muted: boolean) => void;
-    setVideoMuted?: (muted: boolean) => void;
-    getRoomsInfo?: () => IRoomsInfo;
+	close: Function;
+	setAudioOnly?: (value: boolean) => void;
+	setAudioMuted?: (muted: boolean) => void;
+	setVideoMuted?: (muted: boolean) => void;
+	getRoomsInfo?: () => IRoomsInfo;
 }
 
 /**
  * Main React Native SDK component that displays a Jitsi Meet conference and gets all required params as props
  */
 export const JitsiMeeting = forwardRef<JitsiRefProps, IAppProps>((props, ref) => {
-    const [ appProps, setAppProps ] = useState({});
-    const app = useRef(null);
-    const {
-        config,
-        eventListeners,
-        flags,
-        room,
-        serverURL,
-        style,
-        token,
-        userInfo
-    } = props;
-
-    // eslint-disable-next-line arrow-body-style
-    useImperativeHandle(ref, () => ({
-        close: () => {
-            const dispatch = app.current.state.store.dispatch;
-
-            dispatch(appNavigate(undefined));
-        },
-        setAudioMuted: muted => {
-            const dispatch = app.current.state.store.dispatch;
-
-            dispatch(setAudioMuted(muted));
-        },
-        setVideoMuted: muted => {
-            const dispatch = app.current.state.store.dispatch;
-
-            dispatch(setVideoMuted(muted));
-        },
-        getRoomsInfo: () => {
-            const state = app.current.state.store.getState();
-
-            return getRoomsInfo(state);
-        }
-    }));
-
-    useEffect(
-        () => {
-            const urlObj = {
-                config,
-                jwt: token
-            };
-
-            let urlProps;
-
-            if (room.includes('://')) {
-                urlProps = {
-                    ...urlObj,
-                    url: room
-                };
-            } else {
-                urlProps = {
-                    ...urlObj,
-                    room,
-                    serverURL
-                };
-            }
-
-            setAppProps({
-                'flags': flags,
-                'rnSdkHandlers': {
-                    onAudioMutedChanged: eventListeners?.onAudioMutedChanged,
-                    onVideoMutedChanged: eventListeners?.onVideoMutedChanged,
-                    onConferenceBlurred: eventListeners?.onConferenceBlurred,
-                    onConferenceFocused: eventListeners?.onConferenceFocused,
-                    onConferenceJoined: eventListeners?.onConferenceJoined,
-                    onConferenceWillJoin: eventListeners?.onConferenceWillJoin,
-                    onConferenceLeft: eventListeners?.onConferenceLeft,
-                    onEnterPictureInPicture: eventListeners?.onEnterPictureInPicture,
-                    onParticipantJoined: eventListeners?.onParticipantJoined,
-                    onParticipantLeft: eventListeners?.onParticipantLeft,
-                    onReadyToClose: eventListeners?.onReadyToClose
-                },
-                'url': urlProps,
-                'userInfo': userInfo
-            });
-        }, []
-    );
-
-    // eslint-disable-next-line arrow-body-style
-    useLayoutEffect(() => {
-        /**
-         * When you close the component you need to reset it.
-         * In some cases it needs to be added as the parent component may have been destroyed.
-         * Without this change the call remains active without having the jitsi screen.
-        */
-        return () => {
-            const dispatch = app.current?.state?.store?.dispatch;
-
-            dispatch && dispatch(appNavigate(undefined));
-        };
-    }, []);
-
-    return (
-        <View style = { style as ViewStyle }>
-            <App
-                { ...appProps }
-                ref = { app } />
-        </View>
-    );
+	const [appProps, setAppProps] = useState({});
+	const app = useRef(null);
+	const { config, eventListeners, flags, room, serverURL, style, token, userInfo } = props;
+
+	// eslint-disable-next-line arrow-body-style
+	useImperativeHandle(ref, () => ({
+		close: () => {
+			const dispatch = app.current.state.store.dispatch;
+			if (dispatch) {
+				console.log('dispatch: ', dispatch);
+
+				dispatch(leaveConference()); // Ensure this action correctly handles ending the meeting
+				console.info('Dispatch function found');
+			} else {
+				console.error('Dispatch function not found');
+			}
+			// dispatch(appNavigate(undefined));
+		},
+		setAudioOnly: value => {
+			const dispatch = app.current.state.store.dispatch;
+
+			dispatch(setAudioOnly(value));
+		},
+		setAudioMuted: muted => {
+			const dispatch = app.current.state.store.dispatch;
+
+			dispatch(setAudioMuted(muted));
+		},
+		setVideoMuted: muted => {
+			const dispatch = app.current.state.store.dispatch;
+
+			dispatch(setVideoMuted(muted));
+		},
+		getRoomsInfo: () => {
+			const state = app.current.state.store.getState();
+
+			return getRoomsInfo(state);
+		}
+	}));
+
+	useEffect(() => {
+		const urlObj = {
+			config,
+			jwt: token
+		};
+
+		let urlProps;
+
+		if (room.includes('://')) {
+			urlProps = {
+				...urlObj,
+				url: room
+			};
+		} else {
+			urlProps = {
+				...urlObj,
+				room,
+				serverURL
+			};
+		}
+
+		setAppProps({
+			flags: flags,
+			rnSdkHandlers: {
+				onAudioMutedChanged: eventListeners?.onAudioMutedChanged,
+				onVideoMutedChanged: eventListeners?.onVideoMutedChanged,
+				onConferenceBlurred: eventListeners?.onConferenceBlurred,
+				onConferenceFocused: eventListeners?.onConferenceFocused,
+				onConferenceJoined: eventListeners?.onConferenceJoined,
+				onConferenceWillJoin: eventListeners?.onConferenceWillJoin,
+				onConferenceLeft: eventListeners?.onConferenceLeft,
+				onEnterPictureInPicture: eventListeners?.onEnterPictureInPicture,
+				onEndpointMessageReceived: eventListeners?.onEndpointMessageReceived,
+				onParticipantJoined: eventListeners?.onParticipantJoined,
+				onParticipantLeft: eventListeners?.onParticipantLeft,
+				onReadyToClose: eventListeners?.onReadyToClose
+			},
+			url: urlProps,
+			userInfo: userInfo
+		});
+	}, []);
+
+	// eslint-disable-next-line arrow-body-style
+	useLayoutEffect(() => {
+		/**
+		 * When you close the component you need to reset it.
+		 * In some cases it needs to be added as the parent component may have been destroyed.
+		 * Without this change the call remains active without having the jitsi screen.
+		 */
+		return () => {
+			const dispatch = app.current?.state?.store?.dispatch;
+
+			dispatch && dispatch(appNavigate(undefined));
+		};
+	}, []);
+
+	return (
+		<View style={style as ViewStyle}>
+			<App {...appProps} ref={app} />
+		</View>
+	);
 });
diff --git a/node_modules/@jitsi/react-native-sdk/ios/sdk.xcodeproj/project.pbxproj b/node_modules/@jitsi/react-native-sdk/ios/sdk.xcodeproj/project.pbxproj
index 2039fd7..2229408 100644
--- a/node_modules/@jitsi/react-native-sdk/ios/sdk.xcodeproj/project.pbxproj
+++ b/node_modules/@jitsi/react-native-sdk/ios/sdk.xcodeproj/project.pbxproj
@@ -145,6 +145,7 @@
 		4ED4FFF12721B9B90074E620 /* JitsiAudioSession.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = JitsiAudioSession.h; sourceTree = "<group>"; };
 		4ED4FFF22721B9B90074E620 /* JitsiAudioSession.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = JitsiAudioSession.m; sourceTree = "<group>"; };
 		4ED4FFF52721BAE10074E620 /* JitsiAudioSession+Private.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "JitsiAudioSession+Private.h"; sourceTree = "<group>"; };
+		6132EF172BDFF13200BBE14D /* PrivacyInfo.xcprivacy */ = {isa = PBXFileReference; lastKnownFileType = text.xml; name = PrivacyInfo.xcprivacy; path = ../PrivacyInfo.xcprivacy; sourceTree = "<group>"; };
 		86389F55993FAAF6AEB3FA3E /* Pods-JitsiMeetSDKLite.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-JitsiMeetSDKLite.release.xcconfig"; path = "../Pods/Target Support Files/Pods-JitsiMeetSDKLite/Pods-JitsiMeetSDKLite.release.xcconfig"; sourceTree = "<group>"; };
 		891FE43DAD30BC8976683100 /* Pods-JitsiMeetSDK.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-JitsiMeetSDK.release.xcconfig"; path = "../Pods/Target Support Files/Pods-JitsiMeetSDK/Pods-JitsiMeetSDK.release.xcconfig"; sourceTree = "<group>"; };
 		8F48C340DE0D91D1012976C5 /* Pods-JitsiMeetSDKLite.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-JitsiMeetSDKLite.debug.xcconfig"; path = "../Pods/Target Support Files/Pods-JitsiMeetSDKLite/Pods-JitsiMeetSDKLite.debug.xcconfig"; sourceTree = "<group>"; };
@@ -230,6 +231,7 @@
 				0BD906E61EC0C00300C8C18E /* Products */,
 				0BCA49681EC4BBE500B793EE /* Resources */,
 				0BD906E71EC0C00300C8C18E /* src */,
+				6132EF172BDFF13200BBE14D /* PrivacyInfo.xcprivacy */,
 			);
 			sourceTree = "<group>";
 		};
@@ -728,7 +730,7 @@
 				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
-				CLANG_CXX_LANGUAGE_STANDARD = "c++17";
+				CLANG_CXX_LANGUAGE_STANDARD = "c++20";
 				CLANG_CXX_LIBRARY = "libc++";
 				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
@@ -779,13 +781,11 @@
 				ONLY_ACTIVE_ARCH = YES;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_CPLUSPLUSFLAGS = "$(inherited)";
-				OTHER_LDFLAGS = (
-					"$(inherited)",
-					" ",
-				);
+				OTHER_LDFLAGS = "$(inherited)";
 				REACT_NATIVE_PATH = "${PODS_ROOT}/../../node_modules/react-native";
 				SDKROOT = iphoneos;
 				TARGETED_DEVICE_FAMILY = "1,2";
+				USE_HERMES = false;
 				VERSIONING_SYSTEM = "apple-generic";
 				VERSION_INFO_PREFIX = "";
 			};
@@ -798,7 +798,7 @@
 				CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
 				CLANG_ANALYZER_NONNULL = YES;
 				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
-				CLANG_CXX_LANGUAGE_STANDARD = "c++17";
+				CLANG_CXX_LANGUAGE_STANDARD = "c++20";
 				CLANG_CXX_LIBRARY = "libc++";
 				CLANG_ENABLE_MODULES = YES;
 				CLANG_ENABLE_OBJC_ARC = YES;
@@ -845,14 +845,12 @@
 				MTL_ENABLE_DEBUG_INFO = NO;
 				OTHER_CFLAGS = "$(inherited)";
 				OTHER_CPLUSPLUSFLAGS = "$(inherited)";
-				OTHER_LDFLAGS = (
-					"$(inherited)",
-					" ",
-				);
+				OTHER_LDFLAGS = "$(inherited)";
 				REACT_NATIVE_PATH = "${PODS_ROOT}/../../node_modules/react-native";
 				SDKROOT = iphoneos;
 				SWIFT_COMPILATION_MODE = wholemodule;
 				TARGETED_DEVICE_FAMILY = "1,2";
+				USE_HERMES = false;
 				VALIDATE_PRODUCT = YES;
 				VERSIONING_SYSTEM = "apple-generic";
 				VERSION_INFO_PREFIX = "";
diff --git a/node_modules/@jitsi/react-native-sdk/lang/languages.json b/node_modules/@jitsi/react-native-sdk/lang/languages.json
index 919ed46..ff0b2d7 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/languages.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/languages.json
@@ -26,6 +26,7 @@
     "hsb": "Hornjoserbšćina",
     "hu": "Magyar",
     "hy": "Հայերեն",
+    "id": "Bahasa",
     "is": "Íslenska",
     "it": "Italiano",
     "ja": "日本語",
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-de.json b/node_modules/@jitsi/react-native-sdk/lang/main-de.json
index 616cec8..65cd436 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-de.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-de.json
@@ -128,6 +128,7 @@
         "privateNotice": "Private Nachricht an {{recipient}}",
         "sendButton": "Senden",
         "smileysPanel": "Emoji-Auswahl",
+        "systemDisplayName": "System",
         "tabs": {
             "chat": "Chatten",
             "polls": "Umfragen"
@@ -263,6 +264,7 @@
         "Share": "Teilen",
         "Submit": "OK",
         "WaitForHostMsg": "Die Konferenz wurde noch nicht gestartet. Falls Sie die Konferenz leiten, authentifizieren Sie sich bitte. Warten Sie andernfalls, bis die Konferenz gestartet wird.",
+        "WaitForHostNoAuthMsg": "Die Konferenz wurde noch nicht gestartet. Bitte warten Sie, bis die Konferenz gestartet wird.",
         "WaitingForHostButton": "Auf Moderation warten",
         "WaitingForHostTitle": "Warten auf den Beginn der Konferenz …",
         "Yes": "Ja",
@@ -305,6 +307,8 @@
         "contactSupport": "Support kontaktieren",
         "copied": "Kopiert",
         "copy": "Kopieren",
+        "demoteParticipantDialog": "Sind Sie sicher, dass Sie diese Person zu den Gästen verschieben möchten?",
+        "demoteParticipantTitle": "Zu Gästen verschieben",
         "dismiss": "OK",
         "displayNameRequired": "Hallo! Wie ist Ihr Name?",
         "done": "Fertig",
@@ -316,6 +320,7 @@
         "embedMeeting": "Besprechung einbetten",
         "enterDisplayName": "Bitte geben Sie hier Ihren Namen ein",
         "error": "Fehler",
+        "errorRoomCreationRestriction": "Sie haben versucht, zu schnell beizutreten, bitte versuchen Sie es gleich noch einmal.",
         "gracefulShutdown": "Der Dienst steht momentan wegen Wartungsarbeiten nicht zur Verfügung. Bitte versuchen Sie es später noch einmal.",
         "grantModeratorDialog": "Möchten Sie wirklich Moderationsrechte an diese Person vergeben?",
         "grantModeratorTitle": "Moderationsrechte vergeben",
@@ -560,6 +565,7 @@
         "noNumbers": "Keine Telefonnummern verfügbar.",
         "noPassword": "Kein Passwort benötigt",
         "noRoom": "Keine Konferenz für die Einwahlinformationen angegeben.",
+        "noWhiteboard": "Whiteboard konnte nicht geladen werden.",
         "numbers": "Einwahlnummern",
         "password": "$t(lockRoomPasswordUppercase):",
         "reachedLimit": "Sie haben die Grenzen Ihres Tarifs erreicht.",
@@ -567,7 +573,8 @@
         "sipAudioOnly": "SIP-Adresse (nur Ton)",
         "title": "Teilen",
         "tooltip": "Freigabe-Link und Einwahlinformationen für dieses Meeting",
-        "upgradeOptions": "Bitte prüfen Sie Ihre Upgrade-Optionen auf"
+        "upgradeOptions": "Bitte prüfen Sie Ihre Upgrade-Optionen auf",
+        "whiteboardError": "Whiteboard konnte nicht geladen werden. Bitte versuchen Sie es später erneut."
     },
     "inlineDialogFailure": {
         "msg": "Es ist ein Fehler aufgetreten.",
@@ -731,6 +738,8 @@
         "connectedTwoMembers": "{{first}} und {{second}} nehmen am Meeting teil",
         "dataChannelClosed": "Schlechte Videoqualität",
         "dataChannelClosedDescription": "Die Steuerungsverbindung (Bridge Channel) wurde unterbrochen, daher ist die Videoqulität auf die schlechteste Stufe limitiert.",
+        "dataChannelClosedDescriptionWithAudio": "Die Steuerungsverbindung (Bridge Channel) wurde unterbrochen, daher können Video- und Tonprobleme auftreten.",
+        "dataChannelClosedWithAudio": "Ton- und Videoqualität können beeinträchtigt sein",
         "disabledIframe": "Die Einbettung ist nur für Demo-Zwecke vorgesehen. Diese Konferenz wird in {{timeout}} Minuten beendet.",
         "disabledIframeSecondary": "Die Einbettung von {{domain}} ist nur für Demo-Zwecke vorgesehen. Diese Konferenz wird in {{timeout}} Minuten beendet. Bitte nutzen Sie <a href='{{jaasDomain}}' rel='noopener noreferrer' target='_blank'>Jitsi as a Service</a> für produktive Zwecke!",
         "disconnected": "getrennt",
@@ -802,12 +811,16 @@
         "startSilentTitle": "Sie sind ohne Audioausgabe beigetreten!",
         "suboptimalBrowserWarning": "Tut uns leid, aber die Konferenz wird mit {{appName}} kein großartiges Erlebnis. Wir versuchen immer die Situation zu verbessern, bis dahin empfehlen wir aber die Verwendung einer der <a href=\"{{recommendedBrowserPageLink}}\" target=\"_blank\">vollständig unterstützen Browser</a>.",
         "suboptimalExperienceTitle": "Browserwarnung",
+        "suggestRecordingAction": "Starten",
+        "suggestRecordingDescription": "Möchten Sie eine Aufzeichnung starten?",
+        "suggestRecordingTitle": "Konferenz aufzeichnen",
         "unmute": "Stummschaltung aufheben",
         "videoMutedRemotelyDescription": "Sie können sie jederzeit wieder einschalten.",
         "videoMutedRemotelyTitle": "Ihre Kamera wurde von {{participantDisplayName}} ausgeschaltet!",
         "videoUnmuteBlockedDescription": "Die Kamera und Bildschirmfreigabe kann aus Überlastungsschutzgründen temporär nicht eingeschaltet werden.",
         "videoUnmuteBlockedTitle": "Kamera und Bildschirmfreigabe kann nicht aktiviert werden!",
         "viewLobby": "Lobby ansehen",
+        "viewVisitors": "Gäste anzeigen",
         "waitingParticipants": "{{waitingParticipants}} Personen",
         "whiteboardLimitDescription": "Bitte speichern Sie Ihre Inhalte, da das Nutzungslimit bald erreicht wird und dann Ihr Whiteboard geschlossen wird.",
         "whiteboardLimitTitle": "Whiteboard-Nutzung"
@@ -937,6 +950,7 @@
         "or": "oder",
         "premeeting": "Vorschau",
         "proceedAnyway": "Trotzdem fortsetzen",
+        "recordingWarning": "Diese Konferenz wird möglicherweise von anderen Personen aufgezeichnet",
         "screenSharingError": "Fehler bei Bildschirmfreigabe:",
         "showScreen": "Konferenzvorschau aktivieren",
         "startWithPhone": "Mit Telefonaudio starten",
@@ -1003,7 +1017,6 @@
         "limitNotificationDescriptionNative": "Wegen hoher Nachfrage ist Ihre Aufnahme auf {{limit}} Min. begrenzt. Für unlimitierte Aufnahmen nutzen Sie bitte <3>{{app}}</3>.",
         "limitNotificationDescriptionWeb": "Wegen hoher Nachfrage ist Ihre Aufnahme auf {{limit}} Min. begrenzt. Für unlimitierte Aufnahmen nutzen Sie bitte <a href={{url}} rel='noopener noreferrer' target='_blank'>{{app}}</a>.",
         "linkGenerated": "Link zur Aufzeichnung wurde generiert.",
-        "live": "LIVE",
         "localRecordingNoNotificationWarning": "Die Aufzeichnung wird anderen Anwesenden nicht mitgeteilt. Sie müssen diese selbst darauf hinweisen, dass die Konferenz aufgezeichnet wird.",
         "localRecordingNoVideo": "Videos werden nicht aufgenommen",
         "localRecordingStartWarning": "Bitte beenden Sie die Aufzeichnung vor dem Verlassen der Konferenz, um die Aufzeichnung zu speichern.",
@@ -1020,7 +1033,6 @@
         "onBy": "{{name}} startete die Aufnahme",
         "onlyRecordSelf": "Nur eigenes Kamerabild und Ton aufzeichnen",
         "pending": "Aufzeichnung des Meetings wird vorbereitet…",
-        "rec": "AUFZ",
         "recordAudioAndVideo": "Kamera und Ton aufzeichnen",
         "recordTranscription": "Transkription aufzeichnen",
         "saveLocalRecording": "Aufzeichnung lokal abspeichern",
@@ -1177,7 +1189,7 @@
             "audioOnly": "„Nur Audio“ ein-/ausschalten",
             "audioRoute": "Audiogerät auswählen",
             "boo": "Buhen",
-            "breakoutRoom": "Breakout-Räume betreten/verlassen",
+            "breakoutRooms": "Breakout-Räume",
             "callQuality": "Qualitätseinstellungen",
             "carmode": "Automodus",
             "cc": "Untertitel ein-/ausschalten",
@@ -1360,13 +1372,9 @@
     },
     "transcribing": {
         "ccButtonTooltip": "Untertitel ein-/ausschalten",
-        "error": "Die Aufzeichnung ist fehlgeschlagen. Bitte versuchen Sie es erneut.",
         "expandedLabel": "Transkribieren ist derzeit eingeschaltet",
         "failedToStart": "Transkribieren konnte nicht gestartet werden",
         "labelToolTip": "Das Meeting wird transkribiert",
-        "off": "Transkribieren gestoppt",
-        "on": "Transkribieren gestartet",
-        "pending": "Transkribieren des Meetings wird vorbereitet…",
         "sourceLanguageDesc": "Aktuell ist die Sprache der Konferenz auf <b>{{sourceLanguage}}</b> eingestellt. <br/> Sie könne dies hier ",
         "sourceLanguageHere": "ändern",
         "start": "Anzeige der Untertitel starten",
@@ -1422,6 +1430,7 @@
     },
     "videothumbnail": {
         "connectionInfo": "Verbindungsinformationen",
+        "demote": "Zu Gästen verschieben",
         "domute": "Stummschalten",
         "domuteOthers": "Alle anderen stummschalten",
         "domuteVideo": "Kamera ausschalten",
@@ -1476,7 +1485,12 @@
         "chatIndicator": "(Gast)",
         "labelTooltip": "Anzahl Gäste: {{count}}",
         "notification": {
+            "demoteDescription": "Hierhin verschoben von {{actor}}, bitte melden Sie sich um teilzunehmen",
             "description": "Bitte melden Sie sich um teilzunehmen",
+            "noMainParticipantsDescription": "Eine Person muss die Konferenz starten. Bitte versuchen Sie es gleich noch einmal.",
+            "noMainParticipantsTitle": "Diese Konferenz wurde noch nicht gestartet.",
+            "noVisitorLobby": "Sie können nicht teilnehmen, solange die Lobby für diese Konferenz aktiviert ist.",
+            "notAllowedPromotion": "Eine Person muss Ihre Anfrage erst erlauben.",
             "title": "Sie sind Gast in der Konferenz"
         }
     },
@@ -1536,6 +1550,7 @@
     "whiteboard": {
         "accessibilityLabel": {
             "heading": "Whiteboard"
-        }
+        },
+        "screenTitle": "Whiteboard"
     }
 }
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-eo.json b/node_modules/@jitsi/react-native-sdk/lang/main-eo.json
index e1f2d69..8910e86 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-eo.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-eo.json
@@ -925,7 +925,7 @@
         "iWantToDialIn": "Mi volas alvoki",
         "initiated": "Voko komencita",
         "joinAudioByPhone": "Aliĝu kun telefona mikrofono",
-        "joinMeeting": "Aliĝu al la kunvenon",
+        "joinMeeting": "Aliĝu al la kunveno",
         "joinMeetingInLowBandwidthMode": "Aliĝu en malaltkapacita modo",
         "joinWithoutAudio": "Aliĝu sen mikrofono",
         "keyboardShortcuts": "Ŝaltu fulmoklavojn",
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-fr.json b/node_modules/@jitsi/react-native-sdk/lang/main-fr.json
index 7dbdd2a..8f84a13 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-fr.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-fr.json
@@ -74,7 +74,7 @@
         "mainRoom": "Salle principale",
         "notifications": {
             "joined": "Entrée en salle annexe \"{{name}}\"",
-            "joinedMainRoom": "Retour à la salle principalem",
+            "joinedMainRoom": "Retour à la salle principale",
             "joinedTitle": "Salles annexes"
         },
         "showParticipantList": "Afficher la liste des participants",
@@ -82,7 +82,7 @@
     },
     "calendarSync": {
         "addMeetingURL": "Ajouter un lien de conférence",
-        "confirmAddLink": "Voulez-vous ajouter un lien Jitsi à cet événement ?",
+        "confirmAddLink": "Voulez-vous ajouter un lien Jitsi à cet événement?",
         "error": {
             "appConfiguration": "L'intégration du calendrier n'est pas correctement configurée.",
             "generic": "Une erreur s'est produite. Veuillez vérifier les paramètres de votre calendrier ou tenter de l'actualiser.",
@@ -128,6 +128,7 @@
         "privateNotice": "Message privé à {{recipient}}",
         "sendButton": "Envoyer",
         "smileysPanel": "Panneaux des Émojis",
+        "systemDisplayName": "Système",
         "tabs": {
             "chat": "Chat",
             "polls": "Sondages"
@@ -138,7 +139,7 @@
     },
     "chromeExtensionBanner": {
         "buttonText": "Installer l'extension Chrome",
-        "buttonTextEdge": "Installer l’extension Edge",
+        "buttonTextEdge": "Installer l'extension Edge",
         "close": "Fermer",
         "dontShowAgain": "Ne plus m'afficher ceci",
         "installExtensionText": "Installer l'extension pour l'intégration de Google Calendar et Office 365"
@@ -219,7 +220,9 @@
         "joinInBrowser": "Rejoindre depuis le navigateur",
         "launchMeetingLabel": "Comment voulez-vous rejoindre la réunion ?",
         "launchWebButton": "Lancer dans le navigateur",
+        "noDesktopApp": "Vous n'avez pas l'application ?",
         "noMobileApp": "Vous n’avez pas l’application ?",
+        "or": "OU",
         "termsAndConditions": "En continuant, vous acceptez nos  <a href='{{termsAndConditionsLink}}' rel='noopener noreferrer' target='_blank'>conditions générales d’utilisation.</a>",
         "title": "Lancement de votre réunion dans {{app}} en cours ...",
         "titleNew": "Lancement de votre réunion ...",
@@ -261,6 +264,7 @@
         "Share": "Partager",
         "Submit": "Soumettre",
         "WaitForHostMsg": "La conférence n'a pas encore commencé. Si vous en êtes l'hôte, veuillez vous authentifier. Sinon, veuillez attendre son arrivée.",
+        "WaitForHostNoAuthMsg": "La conférence n'a pas encore commencé car aucun modérateur n'est encore arrivé. Veuillez patienter.",
         "WaitingForHostButton": "Attendre l'hôte",
         "WaitingForHostTitle": "En attente de l'hôte ...",
         "Yes": "Oui",
@@ -303,6 +307,8 @@
         "contactSupport": "Contacter le support",
         "copied": "Copié",
         "copy": "Copier",
+        "demoteParticipantDialog": "Êtes-vous sûr de vouloir déplacer ce participant en visiteur ?",
+        "demoteParticipantTitle": "Déplacer en visiteur",
         "dismiss": "Rejeter",
         "displayNameRequired": "Bonjour ! Quel est votre nom ?",
         "done": "Terminé",
@@ -314,6 +320,7 @@
         "embedMeeting": "Intégrer la réunion",
         "enterDisplayName": "Merci de saisir votre nom ici",
         "error": "Erreur",
+        "errorRoomCreationRestriction": "Vous avez essayé de rejoindre trop rapidement, veuillez revenir dans un moment.",
         "gracefulShutdown": "Notre service est actuellement en maintenance. Veuillez réessayer plus tard.",
         "grantModeratorDialog": "Êtes-vous sûr de vouloir rendre ce participant modérateur ?",
         "grantModeratorTitle": "Nommer modérateur",
@@ -424,7 +431,7 @@
         "shareAudioAltText": "Pour partager le contenu voulu, naviguer vers \"Onglet du Navigateur\", sélectionner le contenu, activer le bouton \"partager l’audio\" et enfin cliquer sur le bouton \"partager\"",
         "shareAudioTitle": "Comment partager le son",
         "shareAudioWarningD1": "vous devez cesser le partage d'écran avant de partager votre son.",
-        "shareAudioWarningD2": "viys devez partager votre écran à nouveau et cocher l'ootion \"Partager l'audio\".",
+        "shareAudioWarningD2": "vous devez partager votre écran à nouveau et cocher l'option \"Partager l'audio\".",
         "shareAudioWarningH1": "Si vous voulez partager uniquement de l'audio:",
         "shareAudioWarningTitle": "Vous devez cesser de partager l'écran avant de partager l'audio",
         "shareMediaWarningGenericH2": "Si vous voulez partager votre écran et l'audio",
@@ -558,6 +565,7 @@
         "noNumbers": "Numéros non trouvés",
         "noPassword": "Aucun",
         "noRoom": "Aucune réunion n'a été spécifiée pour l'appel entrant.",
+        "noWhiteboard": "Impossible de charger le tableau blanc.",
         "numbers": "Numéros d'appel",
         "password": "$t(lockRoomPasswordUppercase) :",
         "reachedLimit": "Vous avez atteint la limite de votre abonnement.",
@@ -565,7 +573,8 @@
         "sipAudioOnly": "Adresse SIP en audio uniquement",
         "title": "Partager",
         "tooltip": "Partager le lien et les informations de connexion pour cette conférence",
-        "upgradeOptions": "Veuillez vérifier les options de mise à niveau"
+        "upgradeOptions": "Veuillez vérifier les options de mise à niveau",
+        "whiteboardError": "Erreur de chargement du tableau blanc. Veuillez réessayer plus tard."
     },
     "inlineDialogFailure": {
         "msg": "Il y a eu un petit problème.",
@@ -729,6 +738,8 @@
         "connectedTwoMembers": "{{first}} et {{second}} ont rejoint la réunion",
         "dataChannelClosed": "Qualité vidéo dégradée",
         "dataChannelClosedDescription": "Le canal de communication avec le Bridge a été interrompu, la qualité vidéo se trouve limitée à sa valeur la plus faible.",
+        "dataChannelClosedDescriptionWithAudio": "Le canal de pont est fermé, ce qui peut entraîner des perturbations de l'audio et de la vidéo.",
+        "dataChannelClosedWithAudio": "La qualité de l'audio et de la vidéo peut être altérée",
         "disabledIframe": "L'intégration Iframe est uniquement destinée à des démos, cet appel se terminera dans {{timeout}} minutes.",
         "disabledIframeSecondary": "L'intégration Iframe de {{domaine}} est uniquement destinée à des démos, cet appel se terminera dans {{timeout}} minutes.",
         "disconnected": "déconnecté",
@@ -800,13 +811,19 @@
         "startSilentTitle": "Vous avez rejoint sans sortie audio !",
         "suboptimalBrowserWarning": "Nous craignons que votre expérience de réunion en ligne ne soit pas idéale ici. Nous cherchons des moyens d'améliorer cela, mais d'ici-là, essayez d'utiliser l'un des <a href='{{recommendedBrowserPageLink}}' target='_blank'>navigateurs supportés</a>.",
         "suboptimalExperienceTitle": "Avertissement du navigateur",
+        "suggestRecordingAction": "Démarrer",
+        "suggestRecordingDescription": "Souhaitez-vous démarrer un enregistrement ?",
+        "suggestRecordingTitle": "Enregistrer cette réunion",
         "unmute": "Rétablir le son",
         "videoMutedRemotelyDescription": "Vous pouvez toujours la réactiver.",
         "videoMutedRemotelyTitle": "Votre caméra a été coupée par {{participantDisplayName}}!",
         "videoUnmuteBlockedDescription": "Le rétablissement de la vidéo a été bloqué temporairement en raison de limites système.",
         "videoUnmuteBlockedTitle": "Rétablissement de la caméra bloqué !",
         "viewLobby": "Voir la salle d'attente",
+        "viewVisitors": "Voir les visiteurs",
         "waitingParticipants": "{{waitingParticipants}} personnes",
+        "waitingVisitors": "Visiteurs en attente dans la file : {{waitingVisitors}}",
+        "waitingVisitorsTitle": "La réunion n'est pas encore en direct !",
         "whiteboardLimitDescription": "Veuillez sauvegarder votre progression, car la limite d’utilisation du tableau blanc sera bientôt atteinte et celui-ci sera fermé.",
         "whiteboardLimitTitle": "Utiilisation du tableau blanc"
     },
@@ -820,6 +837,7 @@
             "audioModeration": "Rouvrir leur micro",
             "blockEveryoneMicCamera": "Bloquer tous les micros et caméras",
             "breakoutRooms": "Salles annexes",
+            "goLive": "Passer en direct",
             "invite": "Inviter quelqu'un",
             "moreModerationActions": "Options de modération supplémentaires",
             "moreModerationControls": "Options de modération supplémentaires",
@@ -837,6 +855,7 @@
         "headings": {
             "lobby": "Salle d'attente ({{count}})",
             "participantsList": "Participants de la réunion ({{count}})",
+            "visitorInQueue": " (en attente {{count}})",
             "visitorRequests": "(Demande {{count}} )",
             "visitors": "Visiteurs {{count}}",
             "waitingLobby": "Dans la salle d'attente ({{count}})"
@@ -850,6 +869,8 @@
     "pinnedParticipant": "Participant toujours affiché",
     "polls": {
         "answer": {
+            "edit": "Modifier",
+            "send": "Envoyer",
             "skip": "Passer",
             "submit": "Envoyer"
         },
@@ -863,6 +884,7 @@
             "pollQuestion": "Question du sondage",
             "questionPlaceholder": "Poser une question",
             "removeOption": "Supprimer l'option",
+            "save": "Enregistrer",
             "send": "Envoyer"
         },
         "errors": {
@@ -935,6 +957,7 @@
         "or": "ou",
         "premeeting": "Pré-séance",
         "proceedAnyway": "Continuer quand même",
+        "recordingWarning": "D'autres participants peuvent enregistrer cet appel",
         "screenSharingError": "Erreur de partage d'écran:",
         "showScreen": "Activer l'écran de pré-séance",
         "startWithPhone": "Commencez avec l'audio du téléphone",
@@ -1169,7 +1192,7 @@
     "toolbar": {
         "Settings": "Paramètres",
         "accessibilityLabel": {
-            "Settings": "Afficher / Masquer le menu des paramètres",
+            "Settings": "Ouvrir le menu des paramètres",
             "audioOnly": "Activer / Désactiver le mode voix uniquement",
             "audioRoute": "Sélectionner la source audio",
             "boo": "Hou",
@@ -1215,7 +1238,7 @@
             "moreActions": "Activer / Désactiver le menu d'actions supplémentaires",
             "moreActionsMenu": "Menu d'actions supplémentaires",
             "moreOptions": "Voir plus d'options",
-            "mute": "Activer / Désactiver l'audio",
+            "mute": "Couper votre micro",
             "muteEveryone": "Couper le micro de tout le monde",
             "muteEveryoneElse": "Couper le micro de tous les autres",
             "muteEveryoneElsesVideoStream": "Couper la caméra de tous les autres",
@@ -1251,11 +1274,11 @@
             "tileView": "Activer / Désactiver la vue mosaïque",
             "toggleCamera": "Changer de caméra",
             "toggleFilmstrip": "Afficher ou masquer les vignettes vidéo",
-            "unmute": "Rétablir le son",
+            "unmute": "Activer votre micro",
             "videoblur": "Activer / désactiver le floutage",
-            "videomute": "Activer / Couper la vidéo",
+            "videomute": "Couper votre vidéo",
             "videomuteGUMPending": "Connexion de votre caméra",
-            "videounmute": "Démarrer la vidéo"
+            "videounmute": "Activer votre vidéo"
         },
         "addPeople": "Ajouter des personnes à votre appel",
         "audioOnlyOff": "Désactiver le mode bande passante réduite",
@@ -1356,13 +1379,9 @@
     },
     "transcribing": {
         "ccButtonTooltip": "Activer / Désactiver les sous-titres",
-        "error": "Échec de la transcription. Veuillez réessayer.",
         "expandedLabel": "La transcription est actuellement activée",
         "failedToStart": "Échec de démarrage de la transcription",
         "labelToolTip": "La transcription de la réunion est en cours",
-        "off": "La transcription est désactivée",
-        "on": "La transcription est activée",
-        "pending": "Préparation de la transcription de la réunion ...",
         "sourceLanguageDesc": "Actuellement, la langue de la réunion est sélectionnée à <b>{{sourceLanguage}}</b>. <br/> Vous pouvez la changer à partir de ",
         "sourceLanguageHere": "ici",
         "start": "Activer les sous-titres",
@@ -1418,6 +1437,7 @@
     },
     "videothumbnail": {
         "connectionInfo": "Informations de la connexion",
+        "demote": "Déplacer en visiteur",
         "domute": "Couper le micro",
         "domuteOthers": "Couper le micro de tous les autres",
         "domuteVideo": "Couper la caméra",
@@ -1472,9 +1492,15 @@
         "chatIndicator": "(visiteur)",
         "labelTooltip": "Nombre de Visiteurs",
         "notification": {
+            "demoteDescription": "Envoyé ici par {{actor}}, levez la main pour participer",
             "description": "Pour participer lever la main.",
+            "noMainParticipantsDescription": "Un participant doit démarrer la réunion. Veuillez réessayer dans un moment.",
+            "noMainParticipantsTitle": "Cette réunion n'a pas encore commencé.",
+            "noVisitorLobby": "Vous ne pouvez pas rejoindre tant qu'une salle d'attente est activée pour la réunion.",
+            "notAllowedPromotion": "Un participant doit d'abord autoriser votre demande.",
             "title": "Vous êtes visiteur dans cette réunion"
-        }
+        },
+        "waitingMessage": "Vous rejoindrez la réunion dès qu'elle sera en direct !"
     },
     "volumeSlider": "Curseur de volume",
     "welcomepage": {
@@ -1532,6 +1558,7 @@
     "whiteboard": {
         "accessibilityLabel": {
             "heading": "Tableau blanc"
-        }
+        },
+        "screenTitle": "Tableau blanc"
     }
 }
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-frCA.json b/node_modules/@jitsi/react-native-sdk/lang/main-frCA.json
index fca36c9..8f21b91 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-frCA.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-frCA.json
@@ -1,35 +1,95 @@
 {
     "addPeople": {
+        "accessibilityLabel": {
+            "meetingLink": "Lien de la réunion: {{url}}"
+        },
         "add": "Inviter",
+        "addContacts": "Inviter vos contacts",
+        "contacts": "contacts",
+        "copyInvite": "Copier l'invitation à la réunion",
+        "copyLink": "Copier le lien de la réunion",
+        "copyStream": "Copier le lien de diffusion en direct",
         "countryNotSupported": "Nous ne prenons pas encore cette destination en charge.",
         "countryReminder": "Vous appelez en dehors des É.-U.? Veuillez vous assurer de commencer par le code de pays!",
         "disabled": "Vous ne pouvez pas inviter d'autres personnes.",
         "failedToAdd": "L'ajout de membres a échoué",
         "footerText": "Les appels sont désactivés.",
+        "googleEmail": "Gmail",
+        "inviteMoreHeader": "Vous êtes seul(e) dans la réunion",
+        "inviteMoreMailSubject": "Rejoindre une réunion {{appName}}",
+        "inviteMorePrompt": "Inviter d'autres personnes",
+        "linkCopied": "Lien copié dans le presse-papiers",
         "loading": "Rechercher des personnes et des numéros de téléphone",
         "loadingNumber": "Validation du numéro de téléphone",
         "loadingPeople": "Rechercher des personnes à inviter",
         "noResults": "Aucun résultat de recherche correspondant",
         "noValidNumbers": "Veuillez entrer un numéro de téléphone",
+        "outlookEmail": "Outlook",
+        "phoneNumbers": "Numéros de téléphone",
         "searchNumbers": "Ajouter des numéros de téléphone",
         "searchPeople": "Rechercher des personnes",
         "searchPeopleAndNumbers": "Rechercher des personnes ou ajouter des numéros de téléphone",
+        "searching": "Recherche...",
+        "shareInvite": "Partager l'invitation à la réunion",
+        "shareLink": "Partager le lien de la réunion pour inviter d'autres personnes",
+        "shareStream": "Partager le lien de diffusion en direct",
+        "sipAddresses": "Adresses SIP",
         "telephone": "Téléphone : {{number}}",
-        "title": "Inviter des personnes à cette réunion"
+        "title": "Inviter des personnes à cette réunion",
+        "yahooEmail": "Yahoo"
     },
     "audioDevices": {
         "bluetooth": "Bluetooth",
+        "car": "Système audio du véhicule",
         "headphones": "Écouteurs",
         "none": "Aucun périphérique audio n'est disponible",
         "phone": "Téléphone",
-        "speaker": "Intervenant"
+        "speaker": "Haut-parleur"
     },
     "audioOnly": {
         "audioOnly": "Bande passante faible"
     },
+    "bandwidthSettings": {
+        "assumedBandwidthBps": "p. ex. 10000000 pour 10 Mbps ",
+        "assumedBandwidthBpsWarning": "Des valeurs élevées peuvent provoquer des problèmes réseaux.",
+        "customValue": "valeur personnalisée",
+        "customValueEffect": "Positionner la valeur actuelle en bps",
+        "leaveEmpty": "Laisser vide",
+        "leaveEmptyEffect": "Autoriser l'utilisation de l'estimation",
+        "possibleValues": "Valeurs possibles",
+        "setAssumedBandwidthBps": "Bande passante estimée",
+        "title": "Réglage de bande passante",
+        "zeroEffect": "Désactiver la vidéo"
+    },
+    "breakoutRooms": {
+        "actions": {
+            "add": "Ajouter une salle pour petit groupe",
+            "autoAssign": "Assigner automatiquement aux salles",
+            "close": "Fermer",
+            "join": "Rejoindre",
+            "leaveBreakoutRoom": "Quitter la salle",
+            "more": "Plus",
+            "remove": "Supprimer",
+            "rename": "Renommer",
+            "renameBreakoutRoom": "Renommer la salle",
+            "sendToBreakoutRoom": "Envoyer le participant dans:"
+        },
+        "breakoutList": "Liste des salles",
+        "buttonLabel": "Salles pour petits groupes",
+        "defaultName": "Salle #{{index}}",
+        "hideParticipantList": "Masquer la liste des participants",
+        "mainRoom": "Salle principale",
+        "notifications": {
+            "joined": "Entrée en salle \"{{name}}\"",
+            "joinedMainRoom": "Retour à la salle principale",
+            "joinedTitle": "Salles annexes"
+        },
+        "showParticipantList": "Afficher la liste des participants",
+        "title": "Salles pour petits groupes"
+    },
     "calendarSync": {
         "addMeetingURL": "Ajouter un lien de réunion",
-        "confirmAddLink": "Voulez-vous ajouter un lien Jitsi Meet à cet événement ?",
+        "confirmAddLink": "Voulez-vous ajouter un lien Jitsi Meet à cet événement?",
         "error": {
             "appConfiguration": "L'intégration de l'agenda n'est pas correctement configurée.",
             "generic": "Une erreur s'est produite. Veuillez vérifier vos paramètres d'agenda ou essayer de rafraîchir l'agenda.",
@@ -45,11 +105,27 @@
         "refresh": "Rafraîchir l'agenda",
         "today": "Aujourd'hui"
     },
+    "carmode": {
+        "actions": {
+            "selectSoundDevice": "Sélectionnez le dispositif audio"
+        },
+        "labels": {
+            "buttonLabel": "Mode voiture",
+            "title": "Mode voiture",
+            "videoStopped": "Votre vidéo est arrêtée"
+        }
+    },
     "chat": {
+        "enter": "Entrez dans le salon",
         "error": "Erreur : votre message n'a pas été envoyé. Raison : {{error}}",
         "fieldPlaceHolder": "Tapez votre message ici",
-        "messageTo": "",
-        "messagebox": "Tapez un message",
+        "lobbyChatMessageTo": "Message de salle d'attente à {{recipient}}",
+        "message": "Message",
+        "messageAccessibleTitle": "{{user}} dit: ",
+        "messageAccessibleTitleMe": "Je dis: ",
+        "messageTo": "Message privé à {{recipient}}",
+        "messagebox": "Saisissez un message",
+        "newMessages": "Nouveaux messages",
         "nickname": {
             "popover": "Choisissez un nom d'affichage",
             "title": "Entrer un nom d'affichage pour utiliser le clavardage",
@@ -62,6 +138,13 @@
         "titleWithPolls": "Clavardage",
         "you": "vous"
     },
+    "chromeExtensionBanner": {
+        "buttonText": "Installer l'extension Chrome",
+        "buttonTextEdge": "Installer l'extension Edge",
+        "close": "Fermer",
+        "dontShowAgain": "Ne plus m'afficher ceci",
+        "installExtensionText": "Installer l'extension pour l'intégration de Google Calendar et Office 365"
+    },
     "connectingOverlay": {
         "joiningRoom": "Connexion à la réunion en cours…"
     },
@@ -75,21 +158,30 @@
         "DISCONNECTED": "Déconnecté",
         "DISCONNECTING": "Déconnexion en cours",
         "ERROR": "Erreur",
+        "FETCH_SESSION_ID": "Obtention d'un identifiant de session ...",
+        "GET_SESSION_ID_ERROR": "Obtenir une erreur d'identifiant de session: {{code}}",
+        "GOT_SESSION_ID": "Obtention d'un identifiant de session ... Terminée",
+        "LOW_BANDWIDTH": "La vidéo de {{displayName}} a été coupée pour économiser de la bande passante",
         "RECONNECTING": "Un problème de réseau est survenu. Reconnexion en cours..."
     },
     "connectionindicator": {
-        "address": "Adresse:",
+        "address": "Adresse :",
+        "audio_ssrc": "Audio SSRC :",
         "bandwidth": "Bande passante estimée :",
         "bitrate": "Débit binaire :",
         "bridgeCount": "Nombre de serveur : ",
+        "codecs": "Codecs (A/V) :",
         "connectedTo": "Connecté à :",
+        "e2eeVerified": "Chiffrement de bout en bout vérifié",
         "framerate": "Fréquence d'images :",
         "less": "Afficher moins",
         "localaddress": "Adresse locale :",
         "localaddress_plural": "Adresses locales :",
         "localport": "Port local :",
         "localport_plural": "Ports locaux :",
+        "maxEnabledResolution": "débit max",
         "more": "Afficher plus",
+        "no": "non",
         "packetloss": "Perte de paquet :",
         "quality": {
             "good": "Bonne",
@@ -103,9 +195,12 @@
         "remoteport": "Port distant :",
         "remoteport_plural": "Ports distants :",
         "resolution": "Résolution :",
+        "savelogs": "Enregistrer les logs",
         "status": "Connexion :",
         "transport": "Tranport :",
-        "transport_plural": "Transports :"
+        "transport_plural": "Transports :",
+        "video_ssrc": "Video SSRC :",
+        "yes": "oui"
     },
     "dateUtils": {
         "earlier": "Plus tôt",
@@ -115,12 +210,24 @@
     "deepLinking": {
         "appNotInstalled": "L'application mobile {{app}} est nécessaire pour rejoindre cette réunion sur votre téléphone.",
         "description": "Il ne s'est rien passé? Nous avons essayés de démarrer votre réunion dans l'application de bureau {{app}}. Veuillez réessayer ou démarrer la réunion dans l'application Web {{app}}.",
+        "descriptionNew": "Rien ne s'est passé ? Nous avons essayé de lancer votre réunion dans l'application de bureau {{app}}. <br /><br /> Vous pouvez essayer à nouveau ou la lancer dans l'application web.",
         "descriptionWithoutWeb": "Rien ne s'est passé? Nous avons essayé de démarrer votre réunion dans l'application bureau {{app}}.",
         "downloadApp": "Télécharger l'application",
+        "downloadMobileApp": "Télécharger l'application depuis le Store",
+        "ifDoNotHaveApp": "Si vous n'avez pas encore l'application:",
+        "ifHaveApp": "Si vous avez déjà installé l'application:",
+        "joinInApp": "Rejoindre la réunion en utilisant l'application",
+        "joinInAppNew": "Rejoindre depuis l'application",
+        "joinInBrowser": "Rejoindre depuis le navigateur",
+        "launchMeetingLabel": "Comment voulez-vous rejoindre la réunion ?",
         "launchWebButton": "Démarrer dans l'application Web",
+        "noMobileApp": "Vous n'avez pas l'application ?",
         "openApp": "Continuer vers l'application",
+        "termsAndConditions": "En continuant, vous acceptez nos  <a href='{{termsAndConditionsLink}}' rel='noopener noreferrer' target='_blank'>conditions générales d’utilisation.</a>",
         "title": "Démarrage de votre réunion dans {{app}} en cours…",
-        "tryAgainButton": "Veuillez réessayer sur votre ordinateur"
+        "titleNew": "Démarrage de votre réunion ...",
+        "tryAgainButton": "Veuillez réessayer sur votre ordinateur",
+        "unsupportedBrowser": "Il semble que vous utilisez un navigateur non supporté."
     },
     "defaultLink": "p. ex. {{url}}",
     "defaultNickname": "p. ex. Jane Pink",
@@ -131,11 +238,20 @@
         "microphonePermission": "Erreur lors de l'obtention de l'autorisation du micro"
     },
     "deviceSelection": {
+        "hid": {
+            "callControl": "Contrôle des appels",
+            "connectedDevices": "Appareils connectés",
+            "deleteDevice": "Supprimer un appareil",
+            "pairDevice": "Connecter un appareil"
+        },
         "noPermission": "L'autorisation n'a pas été accordée",
         "previewUnavailable": "Prévisualisation non disponible",
         "selectADevice": "Sélectionner un dispositif",
         "testAudio": "Jouer un son de test"
     },
+    "dialIn": {
+        "screenTitle": "Bilan des appels"
+    },
     "dialOut": {
         "statusMessage": "est maintenant {{status}}"
     },
@@ -145,15 +261,26 @@
         "IamHost": "Je suis l'hôte",
         "Ok": "OK",
         "Remove": "Supprimer",
-        "Share": "Oui",
+        "Share": "Partager",
         "Submit": "Envoyer",
         "WaitForHostMsg": "La conférence n'a pas encore démarré. Si vous êtes l'hôte, veuillez vous authentifier. Sinon, veuillez attendre que l'hôte arrive.",
         "WaitingForHost": "En attente de l'hôte…",
+        "WaitingForHostButton": "Attendre l'hôte",
+        "WaitingForHostTitle": "En attente de l'hôte ...",
         "Yes": "Oui",
         "accessibilityLabel": {
-            "liveStreaming": "Diffusion en direct"
+            "Cancel": "Annuler (quiter la fenêtre)",
+            "Ok": "Ok (Sauvegarder et quiter la fenêtre)",
+            "close": "Fermer la fenêtre",
+            "liveStreaming": "Diffusion en direct",
+            "sharingTabs": "Options de partage"
         },
+        "add": "Ajouter",
+        "addMeetingNote": "Ajouter une note à cette conférence",
+        "addOptionalNote": "Ajouter une note (optionnel):",
         "allow": "Autoriser",
+        "allowToggleCameraDialog": "Autorisez-vous {{initiatorName}} à changer votre mode de caméra?",
+        "allowToggleCameraTitle": "Autoriser-vous le changement de mode de caméra?",
         "alreadySharedVideoMsg": "Un autre membre partage déjà une vidéo. Cette conférence permet le partage d'une seule vidéo à la fois.",
         "alreadySharedVideoTitle": "Seulement une vidéo à la fois peut être partagée",
         "applicationWindow": "Fenêtre d'application",
@@ -176,16 +303,27 @@
         "connectErrorWithMsg": "Oups! Une erreur s'est produite. La connexion à la conférence a échoué : {{msg}}",
         "connecting": "Connexion en cours",
         "contactSupport": "Communiquez avec le service de soutien",
+        "copied": "Copié",
         "copy": "Copier",
         "dismiss": "Rejeter",
         "displayNameRequired": "Un nom d'affichage est requis",
         "done": "Terminé",
+        "e2eeDescription": "Le chiffrement de bout en bout est actuellement expérimental. Veuillez garder en tête que l'activation du chiffrement de bout en bout désactivera les services fournis côté serveur tels que : l'enregistrement, la diffusion en direct et la participation par téléphone. Gardez également en tête que la réunion ne fonctionnera que pour les personnes qui se connectent à partir de navigateurs prenant en charge les flux insérables.",
+        "e2eeDisabledDueToMaxModeDescription": "Impossible d'activer le chiffrement de bout en bout en raison du trop grand nombre de participants à la conférence.",
+        "e2eeLabel": "Activer le chiffrement de Bout-en-Bout",
+        "e2eeWarning": "ATTENTION : Tous les participants de cette réunion ne semblent pas prendre en charge le chiffrement de bout en bout. Si vous activez le chiffrement, ils ne pourront ni vous voir, ni vous entendre.",
+        "e2eeWillDisableDueToMaxModeDescription": "ATTENTION: le chiffrement de bout en bout sera automatiquement arrêté si plus de participants joignent la conférence.",
+        "embedMeeting": "Intégrer la réunion",
         "enterDisplayName": "Veuillez saisir votre nom d'affichage",
         "error": "Erreur",
         "externalInstallationMsg": "Vous devez installer notre extension de partage de bureau.",
         "externalInstallationTitle": "Extension requise",
         "goToStore": "Rendez-vous sur notre boutique en ligne",
         "gracefulShutdown": "Notre service est actuellement hors service pour l'entretien. Veuillez réessayer plus tard.",
+        "grantModeratorDialog": "Êtes-vous sûr de vouloir rendre ce participant modérateur ?",
+        "grantModeratorTitle": "Nommer modérateur",
+        "hide": "Masquer",
+        "hideShareAudioHelper": "Ne plus afficher ce dialogue",
         "incorrectPassword": "Nom d'utilisateur ou mot de passe incorrect",
         "incorrectRoomLockPassword": "Mot de passe incorrect",
         "inlineInstallExtension": "Installer maintenant",
@@ -197,12 +335,18 @@
         "kickParticipantDialog": "Êtes-vous certain de vouloir expulser ce participant?",
         "kickParticipantTitle": "Expulser ce membre?",
         "kickTitle": "Expulsé de la réunion",
+        "linkMeeting": "Relier la conférence",
+        "linkMeetingTitle": "Relier la conférence à Salesforce",
         "liveStreaming": "Diffusion en direct",
+        "liveStreamingDisabledBecauseOfActiveRecordingTooltip": "Impossible durant l'enregistrement",
         "liveStreamingDisabledForGuestTooltip": "Les invités ne peuvent pas démarrer la diffusion en direct.",
         "liveStreamingDisabledTooltip": "Démarrage de la diffusion en direct désactivé.",
+        "localUserControls": "Contrôles de l'utilisateur local",
         "lockMessage": "Échec du verrouillage de la conférence.",
         "lockRoom": "Ajouter un mot de passe à la réunion",
         "lockTitle": "Échec du verrouillage",
+        "login": "Connexion",
+        "loginQuestion": "Voulez-vous vraiment vous connecter et quitter la conférence?",
         "logoutQuestion": "Êtes-vous certain de vouloir vous déconnecter et arrêter la conférence?",
         "logoutTitle": "Déconnexion",
         "maxUsersLimitReached": "La limite du nombre maximum de membres a été atteinte. La conférence est pleine. Veuillez communiquer avec l'hôte de la réunion ou réessayer plus tard.",
@@ -212,18 +356,48 @@
         "micNotSendingData": "Impossible d'accéder à votre micro. Veuillez sélectionner un autre dispositif à partir du menu des paramètres ou essayer de recharger l'application.",
         "micNotSendingDataTitle": "Impossible d'accéder à votre micro",
         "micPermissionDeniedError": "Vous n'avez pas accordé l'autorisation d'utilisation de votre micro. Vous pouvez toujours rejoindre la conférence, mais les autres membres ne pourront pas vous entendre. Utilisez le bouton de caméra dans la barre d'adresse pour remédier à cela.",
+        "micTimeoutError": "Impossible de démarrer la source audio. Délai dépassé!",
         "micUnknownError": "Impossible d'utiliser le micro pour une raison inconnue.",
+        "moderationAudioLabel": "Autoriser les participants à réactiver leur micro",
+        "moderationVideoLabel": "Autoriser les participants à démarrer leur vidéo",
+        "muteEveryoneDialog": "Êtes-vous sûr de vouloir couper les micros de tout le monde? Vous ne pourrez plus réactiver leur micro, mais ils pourront l'activer par eux-mêmes à tout moment.",
+        "muteEveryoneDialogModerationOn": "Les participants peuvent demander à parler n'importe quand",
+        "muteEveryoneElseDialog": "Une fois leur micro coupé, vous ne pourrez plus le réactiver, mais ils pourront l'activer par eux-mêmes à tout moment.",
+        "muteEveryoneElseTitle": "Couper le micro de tout le monde sauf de {{whom}}?",
+        "muteEveryoneElsesVideoDialog": "Une fois la caméra coupée, vous ne pourrez plus la rallumer, mais ils peuvent la rallumer à tout moment.",
+        "muteEveryoneElsesVideoTitle": "Couper la vidéo de tout le monde sauf {{whom}}?",
+        "muteEveryoneSelf": "vous",
+        "muteEveryoneStartMuted": "Tout le monde démarre avec le micro coupé",
+        "muteEveryoneTitle": "Couper le micro de tout le monde ?",
+        "muteEveryonesVideoDialog": "Êtes-vous sûr de vouloir couper la caméra de tout le monde? Vous ne pourrez pas la réactiver, mais ils peuvent la remettre à tout moment.",
+        "muteEveryonesVideoDialogModerationOn": "Les participants peuvent demander à activer leur caméra n'importe quand.",
+        "muteEveryonesVideoDialogOk": "Désactiver",
+        "muteEveryonesVideoTitle": "Couper la caméra de tout le monde?",
         "muteParticipantBody": "Vous ne pourrez pas réactiver leur micro, mais ils peuvent le réactiver eux-mêmes à tout moment.",
         "muteParticipantButton": "Discrétion",
         "muteParticipantDialog": "Êtes-vous certain de vouloir désactiver le micro de ce participant? Vous ne pourrez pas le réactiver, mais il peut le réactiver lui-même à tout moment.",
         "muteParticipantTitle": "Désactiver le micro de ce membre?",
+        "muteParticipantsVideoBody": "Vous ne pourrez pas rallumer la caméra, mais ils peuvent la rallumer à tout moment.",
+        "muteParticipantsVideoBodyModerationOn": "Ni vous ni le participant ne pourront rallumer la caméra.",
+        "muteParticipantsVideoButton": "Couper la caméra",
+        "muteParticipantsVideoDialog": "Êtes-vous sûr(e) de vouloir couper la caméra de ce participant? Seul le participant pourra ensuite réactiver son micro à tout moment.",
+        "muteParticipantsVideoDialogModerationOn": "Êtes-vous sûr(e) de vouloir couper la caméra de ce participant? Ni vous ni le participant ne pourront la réactiver ensuite ?",
+        "muteParticipantsVideoTitle": "Couper la caméra de ce participant?",
+        "noDropboxToken": "Pas de jeton Dropbox valide",
+        "password": "Mot de passe",
         "passwordLabel": "Mot de passe",
         "passwordNotSupported": "La mise en place d'un mot de passe de réunion n'est pas prise en charge.",
         "passwordNotSupportedTitle": "Mot de passe non pris en charge",
         "passwordRequired": "Mot de passe requis",
+        "permissionCameraRequiredError": "L'autorisation caméra est nécessaire pour participer aux réunions avec vidéo. Merci de l'accorder dans les paramètres",
+        "permissionErrorTitle": "Permission nécessaire",
+        "permissionMicRequiredError": "L'autorisation microphone est nécessaire pour participer aux réunions avec son. Merci de l'accorder dans les paramètres",
         "popupError": "Votre navigateur bloque les fenêtres surgissantes provenant de ce site. Veuillez activer les fenêtres surgissantes dans les paramètres de sécurité de votre navigateur et réessayer.",
         "popupErrorTitle": "Fenêtre surgissante bloquée",
+        "readMore": "plus",
+        "recentlyUsedObjects": "Vos objets récemment utilisés",
         "recording": "Enregistrement",
+        "recordingDisabledBecauseOfActiveLiveStreamingTooltip": "Impossible durant le direct",
         "recordingDisabledForGuestTooltip": "Les invités ne peuvent pas démarrer l'enregistrement.",
         "recordingDisabledTooltip": "Démarrage de l'enregistrement désactivé.",
         "rejoinNow": "Rejoindre maintenant",
@@ -237,25 +411,54 @@
         "removePassword": "Supprimer un mot de passe",
         "removeSharedVideoMsg": "Êtes-vous certain de vouloir supprimer votre vidéo partagée?",
         "removeSharedVideoTitle": "Supprimer la vidéo partagée",
+        "renameBreakoutRoomLabel": "Nom de la salle annexe",
+        "renameBreakoutRoomTitle": "Renommer la salle annexe",
         "reservationError": "Erreur du système de réservation",
         "reservationErrorMsg": "Code d'erreur : {{code}}, message : {{msg}}",
         "retry": "Réessayer",
+        "screenSharingAudio": "Partager l'audio",
+        "screenSharingFailed": "Oups! Quelque chose s'est mal passé, nous n'avons pas pu démarrer le partage d'écran!",
+        "screenSharingFailedTitle": "Echec du partage d'écran!",
         "screenSharingFailedToInstall": "Oups! L'installation de votre extension de partage d'écran a échouée.",
         "screenSharingFailedToInstallTitle": "L'installation de l'extension de partage d'écran a échouée",
-        "screenSharingFirefoxPermissionDeniedError": "Une erreur s'est produite lors de la tentative de partage d'écran. Veuillez vous assurer d'avoir donné votre autorisation. ",
+        "screenSharingFirefoxPermissionDeniedError": "Une erreur s'est produite lors de la tentative de partage d'écran. Veuillez vous assurer d'avoir donné votre autorisation.",
         "screenSharingFirefoxPermissionDeniedTitle": "Oups! Il est impossible de démarrer le partage d'écran!",
         "screenSharingPermissionDeniedError": "Oups! Une erreur s'est produite avec les autorisations de l'extension de partage d'écran. Veuillez recharger et réessayer.",
-        "sendPrivateMessage": "Vous avez récemment reçu un message privé. Aviez-vous l'intention d'y répondre en privé, ou vouliez-vous envoyer votre message au groupe ?",
+        "searchInSalesforce": "Rechercher dans Salesforce",
+        "searchResults": "Résultats de recherche ({{count}})",
+        "searchResultsDetailsError": "Un problème est survenu en récupérant les données de recherche.",
+        "searchResultsError": "Un problème est survenu en récupérant des données.",
+        "searchResultsNotFound": "Aucun résultat trouvé.",
+        "searchResultsTryAgain": "Essayer d'utiliser d'autres mots clé.",
+        "sendPrivateMessage": "Vous avez récemment reçu un message privé. Aviez-vous l'intention d'y répondre en privé, ou vouliez-vous envoyer votre message au groupe?",
         "sendPrivateMessageCancel": "Envoyer au groupe",
         "sendPrivateMessageOk": "Envoyer en privé",
-        "sendPrivateMessageTitle": "Envoyer en privé ?",
+        "sendPrivateMessageTitle": "Envoyer en privé?",
         "serviceUnavailable": "Service non disponible",
         "sessTerminated": "Appel terminé",
+        "sessTerminatedReason": "L'appel a été terminé",
+        "sessionRestarted": "L'appel est relancé par la passerelle",
+        "shareAudio": "Continuer",
+        "shareAudioAltText": "Pour partager le contenu voulu, naviguer vers \"Onglet du Navigateur\", sélectionner le contenu, activer le bouton \"partager l'audio\" et enfin cliquer sur le bouton \"partager\"",
+        "shareAudioTitle": "Comment partager le son",
+        "shareAudioWarningD1": "vous devez cesser le partage d'écran avant de partager votre son.",
+        "shareAudioWarningD2": "vous devez partager votre écran à nouveau et cocher l'option \"Partager l'audio\".",
+        "shareAudioWarningH1": "Si vous voulez partager uniquement de l'audio:",
+        "shareAudioWarningTitle": "Vous devez cesser de partager l'écran avant de partager l'audio",
+        "shareMediaWarningGenericH2": "Si vous voulez partager votre écran et l'audio",
+        "shareScreenWarningD1": "vous devez arrêter le partage d'audio avant de partager votre écran.",
+        "shareScreenWarningD2": "vous devez arrêter le partage d'audio, démarrer le partage d'écran et cocher l'option  \"Partager l'audio\".",
+        "shareScreenWarningH1": "Si vous voulez partager uniquement votre écran:",
+        "shareScreenWarningTitle": "Vous devez cesser de partager votre audio avant de partager votre écran",
         "shareVideoLinkError": "Veuillez fournir un lien correct.",
         "shareVideoTitle": "Partager une vidéo",
         "shareYourScreen": "Partager votre écran",
         "shareYourScreenDisabled": "Le partage d'écran est désactivé.",
         "shareYourScreenDisabledForGuest": "Les invités ne peuvent pas partager leur écran.",
+        "sharedVideoDialogError": "Erreur: URL invalide",
+        "sharedVideoLinkPlaceholder": "lien YouTube ou lien vidéo direct",
+        "show": "Afficher",
+        "start": "Démarrer ",
         "startLiveStreaming": "Démarrer la diffusion en direct",
         "startRecording": "Commencer l'enregistrement",
         "startRemoteControlErrorMessage": "Une erreur s'est produite lors de la tentative de démarrage de la séance de contrôle à distance!",
@@ -267,16 +470,57 @@
         "thankYou": "Merci d'utiliser {{appName}}!",
         "token": "jeton",
         "tokenAuthFailed": "Désolé, vous n'avez pas la permission de rejoindre cet appel.",
+        "tokenAuthFailedReason": {
+            "audInvalid": "Valeur `aud` invalide. Cela doit être `jitsi`.",
+            "contextNotFound": "L'objet `context` est absent du payload.",
+            "expInvalid": "Valeur `exp` invalide.",
+            "featureInvalid": "Fonctionnalité invalide: {{feature}}, probablement pas encore implémentée.",
+            "featureValueInvalid": "Valeur invalide pour la fonctionnalité: {{feature}}.",
+            "featuresNotFound": "L'objet `feature` est absent du payload.",
+            "headerNotFound": "Header non trouvé.",
+            "issInvalid": "Valeur `iss` invalide. Cela doit être `chat`.",
+            "kidMismatch": "Key ID (kid) ne correspond pas au sub.",
+            "kidNotFound": "Key ID (kid) manquant.",
+            "nbfFuture": "La valeur `nbf` est dans le futur.",
+            "nbfInvalid": "Valeur `nbf` invalide.",
+            "payloadNotFound": "Payload non trouvé",
+            "tokenExpired": "Jeton expiré"
+        },
         "tokenAuthFailedTitle": "Échec de l'authentification",
+        "tokenAuthFailedWithReasons": "Désolé, vous n'êtes pas autorisé à rejoindre l'appel. La raison possible : {{reason}}.",
+        "tokenAuthUnsupported": "Token URL n'est pas supporté.",
         "transcribing": "Transcription en cours",
         "unlockRoom": "Supprimer le mot de passe de la réunion",
-        "userPassword": "mot de passe d'utilisateur",
+        "user": "Utilisateur",
+        "userIdentifier": "Identifiant utilisateur",
+        "userPassword": "Mot de passe d'utilisateur",
+        "verifyParticipantConfirm": "Ils correspondent",
+        "verifyParticipantDismiss": "Ils ne correspondent pas",
+        "verifyParticipantQuestion": "EXPÉRIMENTAL: Demander au participant {{participantName}} s'il voit le même contenu dans le même ordre.",
+        "verifyParticipantTitle": "Vérification utilisateur",
+        "videoLink": "Lien de la vidéo",
+        "viewUpgradeOptions": "Voir les options de mise à jour",
+        "viewUpgradeOptionsContent": "Pour obtenir un accès illimité à des capacités premium comme l'enregistrement, les transcriptions, diffusion RTMP et plus, vous devez mettre à jour votre plan.",
+        "viewUpgradeOptionsTitle": "Vous avez découvert une capacité premium !",
+        "whiteboardLimitContent": "Désolé, la limite d'utilisateur du tableau blanc a été atteinte.",
+        "whiteboardLimitReference": "Pour plus d'informations merci de visiter",
+        "whiteboardLimitReferenceUrl": "notre site web",
+        "whiteboardLimitTitle": "Utilisation du tableau blanc limitée",
         "yourEntireScreen": "Votre écran entier"
     },
     "documentSharing": {
         "title": "Document partagé"
     },
+    "e2ee": {
+        "labelToolTip": "Le son et la vidéo de cette conférence sont chiffrés de bout en bout"
+    },
+    "embedMeeting": {
+        "title": "Intégrer cette réunion"
+    },
     "feedback": {
+        "accessibilityLabel": {
+            "yourChoice": "Votre choix: {{rating}}"
+        },
         "average": "Moyenne",
         "bad": "Mauvaise",
         "detailsLabel": "Dites-nous en plus.",
@@ -285,18 +529,28 @@
         "veryBad": "Très mauvaise",
         "veryGood": "Très bonne"
     },
+    "filmstrip": {
+        "accessibilityLabel": {
+            "heading": "Vignettes vidéos"
+        }
+    },
+    "giphy": {
+        "noResults": "Aucun résultat de recherche :(",
+        "search": "Rechercher dans GIPHY"
+    },
     "incomingCall": {
         "answer": "Réponse",
         "audioCallTitle": "Appel entrant",
         "decline": "Rejeter",
-        "productLabel": "de Jitsi Meet",
+        "productLabel": "via Jitsi Meet",
         "videoCallTitle": "Appel vidéo entrant"
     },
     "info": {
         "accessibilityLabel": "Afficher l'information",
         "addPassword": "Ajouter un mot de passe",
         "cancelPassword": "Annuler le mot de passe",
-        "conferenceURL": "Liens",
+        "conferenceURL": "Lien:",
+        "copyNumber": "Copier le numéro",
         "country": "Pays",
         "dialANumber": "Pour rejoindre votre réunion, composez un de ces numéros et entrez le NIP.",
         "dialInConferenceID": "NIP :",
@@ -308,25 +562,34 @@
         "inviteLiveStream": "Pour voir la diffusion en directe de cette réunion, cliquez sur ce lien : {{url}}",
         "invitePhone": "Pour rejoindre depuis un téléphone, composez : {{number}},,{{conferenceID}}#\n",
         "invitePhoneAlternatives": "Vous cherchez un numéro d'appel différent ?\nConsultez la liste de numéros d'appel de la réunion : {{url}}\n\n\nSi vous appelez également via un téléphone de salle, vous pouvez vous connecter sans audio : {{silentUrl}}",
+        "inviteSipEndpoint": "Pour rejoindre en utilisant l'adresse SIP, entrez ceci : {{sipUri}}",
+        "inviteTextiOSInviteUrl": "Clickez le lien suivant pour rejoindre: {{inviteUrl}}.",
+        "inviteTextiOSJoinSilent": "Si vous téléphonez avec un téléphone de réunion, utilisez ce lien pour rejoindre sans vous connecter en audio: {{silentUrl}}.",
+        "inviteTextiOSPersonal": "{{name}} vous invite à une réunion.",
+        "inviteTextiOSPhone": "Pour rejoindre par téléphone, utilisez ce numéro: {{number}},,{{conferenceID}}#. Si vous voulez utiliser un autre numéro, voici la liste complête: {{didUrl}}.",
         "inviteURLFirstPartGeneral": "Vous avez été invité à rejoindre une réunion.",
         "inviteURLFirstPartPersonal": "{{name}} vous invite à une réunion.\n",
         "inviteURLSecondPart": "\nRejoindre la réunion:\n{{url}}\n",
         "label": "Informations de réunion",
         "liveStreamURL": "Diffusion en direct :",
         "moreNumbers": "Plus de numéros",
-        "noNumbers": "Aucun numéro d'appel interne.",
+        "noNumbers": "Aucun numéro d'appel trouvé",
         "noPassword": "Aucun",
         "noRoom": "Vous n'avez pas précisé de salle pour l'appel interne.",
-        "numbers": "Numéros d'appel interne",
-        "password": "Mot de passe :",
-        "title": "Oui",
-        "tooltip": "Lien de partage et informations d'appel interne pour cette réunion"
+        "numbers": "Numéros d'appel",
+        "password": "Mot de passe:",
+        "reachedLimit": "Vous avez atteint la limite de votre abonnement.",
+        "sip": "adresse SIP",
+        "sipAudioOnly": "Adresse SIP en audio uniquement",
+        "title": "Partager",
+        "tooltip": "Lien de partage et informations d'appel interne pour cette réunion",
+        "upgradeOptions": "Veuillez vérifier les options de mise à niveau"
     },
     "inlineDialogFailure": {
         "msg": "Nous avons rencontré un obstacle.",
-        "retry": "% abandonnés",
+        "retry": "Réessayer",
         "support": "Soutien",
-        "supportMsg": "Si cela se produit à nouveau, veuillez communiquer avec"
+        "supportMsg": "Si cela se produit à nouveau, veuillez contacter"
     },
     "inviteDialog": {
         "alertText": "L'invitation de certains participants a échoué.",
@@ -336,14 +599,16 @@
         "searchPlaceholder": "Participant ou numéro de téléphone",
         "send": "Envoyer"
     },
+    "jitsiHome": "{{logo}} Logo, liens vers la page d'accueil",
     "keyboardShortcuts": {
-        "focusLocal": "Focaliser sur votre vidéo",
-        "focusRemote": "Focaliser sur la vidéo d'une autre personne",
+        "focusLocal": "Épingler votre vidéo",
+        "focusRemote": "Épingler la vidéo d'une autre personne",
         "fullScreen": "Afficher ou quitter le mode plein écran",
+        "giphyMenu": "Activer ou désactiver le menu GIPHY",
         "keyboardShortcuts": "Raccourcis clavier",
         "localRecording": "Afficher ou masquer les commandes d'enregistrement local",
         "mute": "Activer ou désactiver votre micro",
-        "pushToTalk": "Messagerie vocale instantanée",
+        "pushToTalk": "Maintenir la touche pour parler",
         "raiseHand": "Lever ou abaisser votre main",
         "showSpeakerStats": "Afficher les statistiques d'intervenant",
         "toggleChat": "Ouvrir ou fermer le clavardage",
@@ -353,6 +618,10 @@
         "videoMute": "Démarrer ou arrêter votre caméra",
         "videoQuality": "Gérer la qualité d'appel"
     },
+    "largeVideo": {
+        "screenIsShared": "Vous êtes en train de partager votre écran",
+        "showMeWhatImSharing": "M'afficher ce que je partage"
+    },
     "liveStreaming": {
         "busy": "Libération de ressources de diffusion en cours. Veuillez réessayer dans quelques minutes.",
         "busyTitle": "Tous les diffuseurs sont actuellement occupés",
@@ -368,13 +637,18 @@
         "expandedPending": "Le démarrage de la diffusion en direct est en cours…",
         "failedToStart": "Le démarrage de la diffusion en direct a échoué",
         "getStreamKeyManually": "La récupération de diffusions en direct a échoué. Essayez d'obtenir une clé de diffusion en direct sur YouTube.",
+        "googlePrivacyPolicy": "Politique de confidentialité de Google",
+        "inProgress": "Enregisrtement ou diffusion en cours",
         "invalidStreamKey": "La clé de diffusion en direct peut être erronée.",
+        "limitNotificationDescriptionNative": "Votre diffusion sera limitée à {{limit}} min. Pour une diffusion illimitée, essayez {{app}}.",
+        "limitNotificationDescriptionWeb": "En raison d'une forte demande, votre diffusion sera limitée à {{limit}} min. Pour une diffusion illimitée, essayez <a href={{url}} rel='noopener noreferrer' target='_blank'> {{app}} </a>.",
         "off": "La diffusion en direct s'est arrêtée",
         "offBy": "{{name}} a arrêté la diffusion en continu",
         "on": "Diffusion en direct",
         "onBy": "{{name}} démarré la diffusion en continu",
         "pending": "Démarrage de la diffusion en direct…",
         "serviceName": "Service de diffusion en direct",
+        "sessionAlreadyActive": "Cette session est déjà en cours d'enregistrement ou de diffusion.",
         "signIn": "Se connecter avec Google",
         "signInCTA": "Connectez-vous ou entrez votre clé de diffusion en direct de YouTube",
         "signOut": "Se déconnecter",
@@ -382,7 +656,45 @@
         "start": "Démarrer une diffusion en direct",
         "streamIdHelp": "Qu'est-ce que c'est?",
         "title": "Diffusion en direct",
-        "unavailableTitle": "Diffusion en direct non disponible"
+        "unavailableTitle": "Diffusion en direct non disponible",
+        "youtubeTerms": "Conditions d'utilisation de YouTube"
+    },
+    "lobby": {
+        "backToKnockModeButton": "Aucun mot de passe, demander à rejoindre plutôt",
+        "chat": "Chat",
+        "dialogTitle": "Mode salle d'attente",
+        "disableDialogContent": "Le mode salle d'attente est actuellement activé. Cette fonctionnalité garantit que les participants indésirables ne peuvent pas rejoindre votre réunion. Souhaitez-vous la désactiver?",
+        "disableDialogSubmit": "Désactiver",
+        "emailField": "Saisissez votre adresse email",
+        "enableDialogPasswordField": "Définir le mot de passe (optionnel)",
+        "enableDialogSubmit": "Activer",
+        "enableDialogText": "Le mode salle d'attente vous permet de protéger votre réunion en autorisant les personnes à entrer qu'après l'approbation formelle d'un modérateur.",
+        "enterPasswordButton": "Saisissez un mot de passe de réunion",
+        "enterPasswordTitle": "Saisissez le mot de passe pour rejoindre la réunion",
+        "errorMissingPassword": "Veuillez saisir le mot de passe de la réunion",
+        "invalidPassword": "Mot de passe invalide",
+        "joinRejectedMessage": "Votre requête pour rejoindre une réunion a été refusée par un modérateur.",
+        "joinRejectedTitle": "Demande d'accès rejetée.",
+        "joinTitle": "Rejoindre une réunion",
+        "joinWithPasswordMessage": "Tentative de rejoindre avec mot de passe, patientez s'il vous plait ...",
+        "joiningMessage": "Vous allez rejoindre une réunion dès que quelqu'un aura accepté votre demande",
+        "joiningTitle": "Demander à rejoindre une réunion ...",
+        "joiningWithPasswordTitle": "Rejoindre avec mot de passe ...",
+        "knockButton": "Demander à rejoindre",
+        "knockTitle": "Quelqu'un souhaite rejoindre la réunion",
+        "knockingParticipantList": "Liste des participants en attente",
+        "lobbyChatStartedNotification": "Un modérateur dialogue en salle d'attente avec {{attendee}}",
+        "lobbyChatStartedTitle": "Un modérateur dialogue en salle d'attente avec vous.",
+        "lobbyClosed": "La salle d'attente a été fermée.",
+        "nameField": "Saisissez votre nom",
+        "notificationLobbyAccessDenied": "{{targetParticipantName}} a été refusé par {{originParticipantName}}",
+        "notificationLobbyAccessGranted": "{{targetParticipantName}} a été accepté par {{originParticipantName}}",
+        "notificationLobbyDisabled": "Le mode salle d'attente a été désactivé par {{originParticipantName}}",
+        "notificationLobbyEnabled": "Le mode salle d'attente a été activé par {{originParticipantName}}",
+        "notificationTitle": "Salle d'attente",
+        "passwordJoinButton": "Rejoindre",
+        "title": "Salle d'attente",
+        "toggleLabel": "Activer la salle d'attente"
     },
     "localRecording": {
         "clientState": {
@@ -392,7 +704,7 @@
         },
         "dialogTitle": "Commandes d'enregistrement local",
         "duration": "Durée",
-        "durationNA": "S. O.",
+        "durationNA": "N. D.",
         "encoding": "Encodage",
         "label": "LOR",
         "labelToolTip": "L'enregistrement local est en cours",
@@ -407,28 +719,73 @@
         "moderator": "Modérateur",
         "no": "Non",
         "participant": "Participant",
-        "participantStats": "Statistiques de participants",
+        "participantStats": "Statistiques de participant",
+        "selectTabTitle": "🎥 Veuillez sélectionner cet onglet pour enregistrer",
         "sessionToken": "Jeton de séance",
         "start": "Commencer l'enregistrement",
         "stop": "Arrêter l'enregistrement",
+        "stopping": "Arrêt de l'enregistrement",
+        "wait": "Patienter pendant la sauvegarde de votre enregistrement.",
         "yes": "Oui"
     },
     "lockRoomPassword": "mot de passe",
     "lockRoomPasswordUppercase": "Mot de passe",
+    "lonelyMeetingExperience": {
+        "button": "Inviter d'autres personnes",
+        "youAreAlone": "Vous êtes le seul participant de la réunion"
+    },
     "me": "moi",
     "notify": {
+        "OldElectronAPPTitle": "Faille de sécurité !",
+        "allowAction": "Permettre",
+        "allowedUnmute": "Vous pouvez réactiver votre écran, votre caméra ou partager votre écran.",
+        "audioUnmuteBlockedDescription": "Le rétablissement du son a été bloqué temporairement en raison de limites système.",
+        "audioUnmuteBlockedTitle": "Rétablissement du son bloqué!",
+        "chatMessages": "Messages de chat",
         "connectedOneMember": "{{name}} a rejoint la réunion",
         "connectedThreePlusMembers": "{{name}} et {{count}} autres ont rejoint la réunion",
         "connectedTwoMembers": "{{first}} et {{second}} ont rejoint la réunion",
+        "dataChannelClosed": "Qualité vidéo dégradée",
+        "dataChannelClosedDescription": "Le canal de communication avec le Bridge a été interrompu, la qualité vidéo se trouve limitée à sa valeur la plus faible.",
+        "disabledIframe": "L'intégration Iframe est uniquement destinée à des démos, cet appel se terminera dans {{timeout}} minutes.",
+        "disabledIframeSecondary": "L'intégration Iframe de {{domaine}} est uniquement destinée à des démos, cet appel se terminera dans {{timeout}} minutes.",
         "disconnected": "déconnecté",
+        "displayNotifications": "Afficher les notifications pour",
+        "dontRemindMe": "Ne pas me le rappeler",
         "focus": "Sujet de la conférence",
         "focusFail": "{{component}} non disponible; réessayez dans {{ms}} sec",
+        "gifsMenu": "GIPHY",
         "grantedTo": "Droits de modérateur accordés à {{to}}!",
+        "groupTitle": "Notifications",
+        "hostAskedUnmute": "Le modérateur souhaite vous donner la parole",
         "invitedOneMember": "{{displayName}} a été invité",
         "invitedThreePlusMembers": "{{name}} et {{count}} autres ont été invités",
         "invitedTwoMembers": "{{first}} et {{second}} ont été invités",
+        "joinMeeting": "Rejoindre",
         "kickParticipant": "{{kicked}} a été expulsé par {{kicker}}",
+        "leftOneMember": "{{name}} a quitté la réunion",
+        "leftThreePlusMembers": "{{name}} et beaucoup d'autres ont quitté la réunion",
+        "leftTwoMembers": "{{first}} et {{second}} ont quitté la réunion",
+        "linkToSalesforce": "Lien à Salesforce",
+        "linkToSalesforceDescription": "Vous pouvez lier le résumé de la conférence à un objet Salesforce.",
+        "linkToSalesforceError": "Impossible de relier la conférence à Salesforce",
+        "linkToSalesforceKey": "Relier cette conférence",
+        "linkToSalesforceProgress": "Liaison de la conférence à Salesforce...",
+        "linkToSalesforceSuccess": "La conférence a été reliée à Salesforce",
+        "localRecordingStarted": "{{name}} a commencé un enregistrement local.",
+        "localRecordingStopped": "{{name}} a arrêté un enregistrement local.",
         "me": "Moi",
+        "moderationInEffectCSDescription": "Merci de lever la main si vous voulez partager votre écran.",
+        "moderationInEffectCSTitle": "Le partage d'écran est interdit par le modérateur",
+        "moderationInEffectDescription": "Merci de levez la main pour demander la parole.",
+        "moderationInEffectTitle": "Votre micro est coupé par le modérateur",
+        "moderationInEffectVideoDescription": "Merci de lever la main si vous souhaitez démarrer votre caméra.",
+        "moderationInEffectVideoTitle": "Votre caméra est coupée par le modérateur",
+        "moderationRequestFromModerator": "Le modérateur souhaite que vous activiez votre micro",
+        "moderationRequestFromParticipant": "Souhaite parler",
+        "moderationStartedTitle": "Modération démarrée",
+        "moderationStoppedTitle": "Modération arrêtée",
+        "moderationToggleDescription": "par {{participantDisplayName}}",
         "moderator": "Droits de modérateur accordés!",
         "muted": "Vous avez joint la conversation en sourdine.",
         "mutedRemotelyDescription": "Vous pouvez toujours activer votre micro pour prendre la parole. Désactivez votre micro quand vous terminez pour éviter les bruits parasites.",
@@ -437,24 +794,173 @@
         "newDeviceAction": "Utiliser",
         "newDeviceAudioTitle": "Nouveau dispositif audio détecté",
         "newDeviceCameraTitle": "Nouvelle caméra détectée",
+        "noiseSuppressionDesktopAudioDescription": "La suppression de bruit ne peut pas être activée en même temps que la partage audio du système, veuillez le désactiver et réessayer.",
+        "noiseSuppressionFailedTitle": "Échec du démarrage de la suppression de bruit",
+        "noiseSuppressionStereoDescription": "La suppression de bruit d'une source stéréo n'est pas encore supportée.",
+        "oldElectronClientDescription1": "Vous semblez utiliser une ancienne version du client Jitsi Meet qui présente des failles de sécurité connues. Veuillez vous assurer de mettre à jour vers notre ",
+        "oldElectronClientDescription2": "dernière build",
+        "oldElectronClientDescription3": " rapidement !",
+        "participantWantsToJoin": "souhaite rejoindre la réunion",
+        "participantsWantToJoin": "souhaitent rejoindre la réunion",
         "passwordRemovedRemotely": "$t(lockRoomPasswordUppercase) supprimé par un autre participant",
         "passwordSetRemotely": "$t(lockRoomPasswordUppercase) défini par un autre participant",
+        "raiseHandAction": "Lever la main",
         "raisedHand": "{{name}} voudrait parler.",
+        "reactionSounds": "Bloquer les réactions sonores",
+        "reactionSoundsForAll": "Bloquer les réactions sonores pour tous",
+        "screenShareNoAudio": " La case Partager l'audio n'a pas été cochée dans l'écran de sélection de la fenêtre.",
+        "screenShareNoAudioTitle": "La case Partager l'audio n'a pas été cochée",
+        "screenSharingAudioOnlyDescription": "Veuillez noter qu'en partageant votre écran, vous impactez le mode “Meilleure Performance” et vous utilisez plus de bande passante.",
+        "screenSharingAudioOnlyTitle": "Mode \"Meilleure Performance\"",
+        "selfViewTitle": "Vous pouvez toujours rétablir l'affichage de votre propre vidéo dans les paramètres",
         "somebody": "Quelqu'un",
         "startSilentDescription": "Rejoignez la réunion de nouveau pour activer l'audio",
         "startSilentTitle": "Vous avez rejoint sans sortie audio!",
-        "suboptimalBrowserWarning": "Nous craignons que votre expérience de réunion en ligne ne soit bonne ici. Nous cherchons des moyens d’améliorer cela, mais d’ici-là, essayez d’utiliser l’un des <a href='{{recommendedBrowserPageLink}}' target='_blank'>navigateurs supportés</a>.",
+        "suboptimalBrowserWarning": "Nous craignons que votre expérience de réunion en ligne ne soit bonne ici. Nous cherchons des moyens d'améliorer cela, mais d'ici-là, essayez d'utiliser l'un des <a href='{{recommendedBrowserPageLink}}' target='_blank'>navigateurs supportés</a>.",
         "suboptimalExperienceTitle": "Avertissement de navigateur",
-        "unmute": "Rétablir le son"
+        "unmute": "Rétablir le son",
+        "videoMutedRemotelyDescription": "Vous pouvez toujours la réactiver.",
+        "videoMutedRemotelyTitle": "Votre caméra a été coupée par {{participantDisplayName}}!",
+        "videoUnmuteBlockedDescription": "Le rétablissement de la vidéo a été bloqué temporairement en raison de limites système.",
+        "videoUnmuteBlockedTitle": "Rétablissement de la caméra bloqué !",
+        "viewLobby": "Voir la salle d'attente",
+        "waitingParticipants": "{{waitingParticipants}} personnes",
+        "whiteboardLimitDescription": "Veuillez sauvegarder votre progression, car la limite d'utilisation du tableau blanc sera bientôt atteinte et celui-ci sera fermé.",
+        "whiteboardLimitTitle": "Utiilisation du tableau blanc"
+    },
+    "participantsPane": {
+        "actions": {
+            "admit": "Accepter",
+            "admitAll": "Tout accepter",
+            "allow": "Autoriser les participants à:",
+            "allowVideo": "permettre la vidéo",
+            "askUnmute": "Demander de réactiver le micro",
+            "audioModeration": "Rouvrir leur micro",
+            "blockEveryoneMicCamera": "Bloquer tous les micros et caméras",
+            "breakoutRooms": "Salles annexes",
+            "invite": "Inviter quelqu'un",
+            "moreModerationActions": "Options de modération supplémentaires",
+            "moreModerationControls": "Options de modération supplémentaires",
+            "moreParticipantOptions": "Options supplémentaires pour les participants",
+            "mute": "Couper le micro",
+            "muteAll": "Couper le micro de tout le monde",
+            "muteEveryoneElse": "Couper le micro de tous les autres",
+            "reject": "Refuser",
+            "stopEveryonesVideo": "Couper toutes les caméras",
+            "stopVideo": "Couper la vidéo",
+            "unblockEveryoneMicCamera": "Débloquer tous les micros et caméras",
+            "videoModeration": "Démarrer leur vidéo"
+        },
+        "close": "Fermer",
+        "headings": {
+            "lobby": "Salle d'attente ({{count}})",
+            "participantsList": "Participants de la réunion ({{count}})",
+            "visitorRequests": "(Demande {{count}} )",
+            "visitors": "Visiteurs {{count}}",
+            "waitingLobby": "Dans la salle d'attente ({{count}})"
+        },
+        "search": "Rechercher des participants",
+        "title": "Participants"
     },
     "passwordDigitsOnly": "Jusqu'à {{number}} chiffres",
     "passwordSetRemotely": "réglé par un autre membre",
+    "pinParticipant": "Épingler - {{participantName}}",
+    "pinnedParticipant": "Participant toujours affiché",
     "polls": {
+        "answer": {
+            "skip": "Passer",
+            "submit": "Envoyer"
+        },
+        "by": "Par {{ name }}",
+        "create": {
+            "addOption": "Ajouter une option",
+            "answerPlaceholder": "Option {{index}}",
+            "cancel": "Annuler",
+            "create": "Créer un sondage",
+            "pollOption": "Option {{index}}",
+            "pollQuestion": "Question du sondage",
+            "questionPlaceholder": "Poser une question",
+            "removeOption": "Supprimer l'option",
+            "send": "Envoyer"
+        },
         "errors": {
             "notUniqueOption": "Les options doivent être uniques"
+        },
+        "notification": {
+            "description": "Ouvrez l'onglet des sondages pour voter",
+            "title": "Un nouveau sondage a été ajouté à la réunion"
+        },
+        "results": {
+            "changeVote": "Changer le vote",
+            "empty": "Il n'y a pas encore de sondages dans cette réunion. Démarrez un sondage ici !",
+            "hideDetailedResults": "Masquer les détails",
+            "showDetailedResults": "Afficher les détails",
+            "vote": "Voter"
         }
     },
     "poweredby": "optimisé par",
+    "prejoin": {
+        "audioAndVideoError": "Erreur audio et video:",
+        "audioDeviceProblem": "Il y a un problème avec votre périphérique audio",
+        "audioOnlyError": "Erreur audio :",
+        "audioTrackError": "N'a pas pu créer la piste audio.",
+        "callMe": "Appelez-moi",
+        "callMeAtNumber": "Appelez-moi à ce numéro :",
+        "calling": "Appel",
+        "configuringDevices": "Configuration des appareils ...",
+        "connectedWithAudioQ": "Êtes-vous connecté avec le microphone ?",
+        "connection": {
+            "good": "Votre connexion Internet est bonne !",
+            "nonOptimal": "Votre connexion n'est pas optimale",
+            "poor": "Vous avez une mauvaise connexion"
+        },
+        "connectionDetails": {
+            "audioClipping": "Attendez vous à ce que votre son soit coupé.",
+            "audioHighQuality": "Votre son sera de bonne qualité.",
+            "audioLowNoVideo": "Attendez vous à une faible qualité audio et aucune vidéo",
+            "goodQuality": "Impressionnant ! La qualité de vos médias sera excellente",
+            "noMediaConnectivity": "Nous n'avons pas pu trouver un moyen d'établir une connectivité multimédia pour ce test. Cela est généralement causé par un pare-feu ou un NAT.",
+            "noVideo": "Attendez vous à ce que votre qualité vidéo soit très mauvaise.",
+            "undetectable": "Si vous ne parvenez toujours pas à passer des appels dans le navigateur, nous vous recommandons de vous assurer que vos haut-parleurs, microphone et caméra sont correctement configurés, que vous avez accordé à votre navigateur les droits d'utiliser votre microphone et votre caméra et que la version de votre navigateur est à jour. Si vous rencontrez toujours des difficultés pour appeler, vous devez contacter le développeur de l'application Web.",
+            "veryPoorConnection": "Attendez vous à ce que la qualité de votre appel soit très mauvaise",
+            "videoFreezing": "Attendez vous à ce que votre vidéo saute, soit noire, et pixelisée.",
+            "videoHighQuality": "Votre vidéo sera de bonne qualité",
+            "videoLowQuality": "Votre vidéo sera de basse qualité en terme d'images par seconde et de résolution.",
+            "videoTearing": "Attendez vous à ce que votre vidéo soit pixélisée ou contienne des artefacts visuels."
+        },
+        "copyAndShare": "Copier & partager le lien",
+        "dialInMeeting": "Participez à la réunion",
+        "dialInPin": "Participez à la réunion et saisir le code PIN :",
+        "dialing": "Numérotation",
+        "doNotShow": "Ne plus afficher ceci",
+        "errorDialOut": "Impossible de composer le numéro",
+        "errorDialOutDisconnected": "Impossible de composer le numéro. Déconnecté",
+        "errorDialOutFailed": "Impossible de composer le numéro. L'appel a échoué",
+        "errorDialOutStatus": "Erreur lors de l'obtention de l'état d'appel sortant",
+        "errorMissingName": "Veuillez entrer votre nom pour entrer en conférence",
+        "errorNoPermissions": "Vous devez permettre l'accès microphone et caméra",
+        "errorStatusCode": "Erreur de numérotation, code d'état: {{status}}",
+        "errorValidation": "La validation du numéro a échoué",
+        "iWantToDialIn": "Je veux me connecter",
+        "initiated": "Appel lancé",
+        "joinAudioByPhone": "Rejoindre avec l'audio du téléphone",
+        "joinMeeting": "Rejoindre la réunion",
+        "joinMeetingInLowBandwidthMode": "Rejoindre en mode bande passante réduite",
+        "joinWithoutAudio": "Rejoignez sans microphone",
+        "keyboardShortcuts": "Activer les raccourcis clavier",
+        "linkCopied": "Lien copié dans le presse-papiers",
+        "lookGood": "Il semble que votre microphone fonctionne correctement",
+        "or": "ou",
+        "premeeting": "Pré-séance",
+        "proceedAnyway": "Continuer quand même",
+        "screenSharingError": "Erreur de partage d'écran:",
+        "showScreen": "Activer l'écran de pré-séance",
+        "startWithPhone": "Commencez avec l'audio du téléphone",
+        "unsafeRoomConsent": "Je comprends les risques et je veux quand même rejoindre cette réunion",
+        "videoOnlyError": "Erreur vidéo:",
+        "videoTrackError": "Impossible de créer une piste vidéo.",
+        "viewAllNumbers": "voir tous les numéros"
+    },
     "presenceStatus": {
         "busy": "Occupé",
         "calling": "Appel en cours…",
@@ -470,44 +976,91 @@
         "ringing": "Sonnerie"
     },
     "profile": {
+        "avatar": "avatar",
         "setDisplayNameLabel": "Définir votre nom d'affichage",
         "setEmailInput": "Entrer votre adresse courriel",
         "setEmailLabel": "Définir votre courriel Gravatar",
         "title": "Profil"
     },
     "raisedHand": "Aimerait prendre la parole",
+    "raisedHandsLabel": "Nombre de mains levées",
+    "record": {
+        "already": {
+            "linked": "L'enregistrement est déjà relié à cette session."
+        },
+        "type": {
+            "account": "Compte",
+            "contact": "Contact",
+            "lead": "Piste",
+            "opportunity": "Opportunité",
+            "owner": "Propriétaire"
+        }
+    },
     "recording": {
         "authDropboxText": "Téléverser à Dropbox",
         "availableSpace": "Espace disponible : {{spaceLeft}} Mo (approximativement {{duration}} minutes d'enregistrement)",
         "beta": "BETA",
         "busy": "Libération de ressources pour l'enregistrement. Veuillez réessayer dans quelques minutes.",
         "busyTitle": "Tous les enregistreurs sont actuellement occupés",
+        "copyLink": "Copier lien",
         "error": "L'enregistrement a échoué. Veuillez réessayer.",
+        "errorFetchingLink": "Erreur de récupération du lien d'enregistrement.",
         "expandedOff": "L'enregistrement a été arrêté.",
         "expandedOn": "La réunion est actuellement enregistrée.",
         "expandedPending": "Démarrage de l'enregistrement en cours…",
         "failedToStart": "Échec du démarrage de l'enregistrement",
         "fileSharingdescription": "Partager l'enregistrement avec les participants de la réunion",
+        "highlight": "Souligner",
+        "highlightMoment": "Souligner un moment",
+        "highlightMomentDisabled": "Vous ne pouvez souligner des moments que pendant une réunion",
+        "highlightMomentSuccess": "Moment souligné",
+        "highlightMomentSucessDescription": "Votre moment souligné sera ajouté au résumé de la réunion.",
+        "inProgress": "Enregistrement ou diffusion en cours",
+        "limitNotificationDescriptionNative": "En raison d'une forte demande, votre enregistrement sera limité à {{limit}} min. Pour des enregistrements illimités, essayez <3> {{app}} </3>.",
+        "limitNotificationDescriptionWeb": "En raison d'une forte demande, votre enregistrement sera limité à {{limit}} min. Pour des enregistrements illimités, essayez <a href={{url}} rel='noopener noreferrer' target='_blank'> {{app}} </a>.",
+        "linkGenerated": "Nous avons généré un lien à votre enregistrement.",
         "live": "EN DIRECT",
+        "localRecordingNoNotificationWarning": "Le démarrage de l’enregistrement ne sera pas annoncé aux autres participants. Vous devrez les informer par vous-même que la réunion sera enregistrée.",
+        "localRecordingNoVideo": "La vidéo n'est pas en cours d’enregistrement",
+        "localRecordingStartWarning": "Assurez-vous d’arrêter l’enregistrement vidéo avant de quitter la réunion afin de pouvoir le sauvegarder.",
+        "localRecordingStartWarningTitle": "Arrêter l’enregistrement pour le sauvegarder",
+        "localRecordingVideoStop": "Arrêter votre vidéo va aussi arrêter votre enregistrement local. Êtes-vous sûrs de vouloir continuer ?",
+        "localRecordingVideoWarning": "Pour enregistrer votre vidéo, vous devez avoir celle-ci active au moment de commencer l’enregistrement.",
+        "localRecordingWarning": "Assurez-vous de sélectionner l’onglet courant pour utiliser le bon son et la bonne vidéo. L’enregistrement est pour le moment limité à 1 Go, soit approximativement 100 minutes.",
         "loggedIn": "Connecté en tant que {{userName}}",
+        "noMicPermission": "La piste microphone ne peut pas être créée. Veuillez autoriser l’utilisation du microphone.",
+        "noStreams": "Aucun flux audio ou vidéo détectés.",
         "off": "L'enregistrement est arrêté",
         "offBy": "{{name}} a arrêté l'enregistrement",
         "on": "Enregistrement",
         "onBy": "{{name}} a démarré l'enregistrement",
+        "onlyRecordSelf": "Enregistrer seulement mon audio et ma vidéo.",
         "pending": "Enregistrement de la réunion en préparation…",
         "rec": "REC",
+        "recordAudioAndVideo": "Enregistrer l'audio et la vidéo",
+        "recordTranscription": "Enregistrer la transcription",
+        "saveLocalRecording": "Sauvegarder l’enregistrement local (Beta)",
         "serviceDescription": "Votre enregistrement sera sauvegardé par le service d'enregistrement",
+        "serviceDescriptionCloud": "Enregistrement Cloud",
+        "serviceDescriptionCloudInfo": "Les conférences enregistrées sont automatiquement supprimées 24h après leur heure d'enregistrement.",
         "serviceName": "Service d'enregistrement",
+        "sessionAlreadyActive": "Cette session est déjà en cours d'enregistrement ou de diffusion.",
+        "showAdvancedOptions": "Afficher les options avancées",
         "signIn": "Se connecter",
         "signOut": "Se déconnecter",
+        "surfaceError": "Veuillez sélectionner l’onglet courant.",
         "title": "Enregistrement",
         "unavailable": "Oups! Le {{serviceName}} n'est pas disponible pour le moment. Nous nous efforçons de régler le problème. Veuillez réessayer plus tard.",
-        "unavailableTitle": "Enregistrement non disponible"
+        "unavailableTitle": "Enregistrement non disponible",
+        "uploadToCloud": "Envoyer vers le cloud"
     },
+    "screenshareDisplayName": "Écran {{name}}",
     "sectionList": {
         "pullToRefresh": "Tirer pour rafraîchir"
     },
     "settings": {
+        "audio": "Audio",
+        "buttonLabel": "Paramètres",
         "calendar": {
             "about": "L'intégration de l'agenda de {{appName}} est utilisée pour accéder en toute sécurité à votre agenda pour qu'il puisse lire les événements à venir.",
             "disconnect": "Déconnexion",
@@ -515,38 +1068,73 @@
             "signedIn": "Accès aux événements de votre agenda en cours pour {{email}}. Cliquez sur le bouton de déconnexion ci-dessous pour terminer l'accès aux événements d'agenda.",
             "title": "Calendrier"
         },
+        "desktopShareFramerate": "Images par seconde pour le Partage d'écran",
+        "desktopShareHighFpsWarning": "Augmenter le nombre d'images par seconde pour le partage d'écran peut impacter votre bande passante. Vous devez repartager l'écran pour que ces paramètres soient utilisés.",
+        "desktopShareWarning": "Vous devez repartager l'écran pour que ces paramètres soient utilisés.",
         "devices": "Dispositifs",
         "followMe": "Tous les participants me suivent",
+        "framesPerSecond": "images par seconde",
+        "incomingMessage": "un message arrive",
         "language": "Langue",
         "loggedIn": "Connecté en tant que {{name}}",
+        "maxStageParticipants": "Nombre maximum de participants pouvant être épinglé sur l’affichage principal (EXPÉRIMENTAL)",
+        "microphones": "Microphones",
         "moderator": "Modérateur",
+        "moderatorOptions": "Options de modérateur",
         "more": "Plus",
         "name": "Nom",
         "noDevice": "Aucun",
+        "notifications": "Notifications",
+        "participantJoined": "un participant arrive",
+        "participantKnocking": "un participant en salle d’attente",
+        "participantLeft": "un participant quitte",
+        "playSounds": "Jouer un son quand",
+        "reactions": "Il y a une réaction à la réunion",
+        "sameAsSystem": "Identique au système ({{label}})",
         "selectAudioOutput": "Sortie audio",
         "selectCamera": "Caméra",
         "selectMic": "Micro",
+        "selfView": "Affichage de votre propre vidéo",
+        "shortcuts": "Raccourcis",
+        "speakers": "Haut-parleurs",
         "startAudioMuted": "Tous les participants débutent en sourdine",
+        "startReactionsMuted": "Tout le monde commence avec les réactions sonores bloquées",
         "startVideoMuted": "Tous les participants débutent masqués",
-        "title": "Paramètres"
+        "talkWhileMuted": "vous parlez en étant muet",
+        "title": "Paramètres",
+        "video": "Vidéo"
     },
     "settingsView": {
         "advanced": "Avancé",
+        "alertCancel": "Annuler",
         "alertOk": "OK",
         "alertTitle": "Alerte",
         "alertURLText": "L'URL de serveur saisi n'est pas valide",
+        "apply": "Appliquer",
         "buildInfoSection": "Information de version",
         "conferenceSection": "Conférence",
         "disableCallIntegration": "Désactiver l'intégration d'appels native",
+        "disableCrashReporting": "Désactiver les rapports de plantage",
+        "disableCrashReportingWarning": "Etes-vous certain de vouloir désactiver les rapports de plantage ? Le paramètre sera effectif après le redémarrage de l'application.",
         "disableP2P": "Désactiver le mode pair à pair",
         "displayName": "Nom d'affichage",
+        "displayNamePlaceholderText": "Ex : Jean Dupond",
         "email": "Courriel",
+        "emailPlaceholderText": "email@example..com",
+        "gavatarMessage": "Si votre email est associé à un compte Gravatar, nous allons l’utiliser pour afficher votre image de profil.",
+        "goTo": "Aller à",
         "header": "Paramètres",
+        "help": "Aide",
+        "links": "Liens",
+        "privacy": "Confidentialité",
         "profileSection": "Profil",
+        "sdkVersion": "Version du SDK",
         "serverURL": "URL du serveur",
         "showAdvanced": "Afficher les paramètres avancés",
+        "startCarModeInLowBandwidthMode": "Commencer le mode voiture en mode bande passante réduite",
         "startWithAudioMuted": "Démarrer avec l'audio en sourdine",
         "startWithVideoMuted": "Démarrer avec la vidéo en sourdine",
+        "terms": "Conditions d’utilisations",
         "version": "Version"
     },
     "share": {
@@ -555,16 +1143,25 @@
     },
     "speaker": "Intervenant",
     "speakerStats": {
+        "angry": "En colère",
+        "disgusted": "Dégoûté",
+        "displayEmotions": "Afficher réactions",
+        "fearful": "Effrayé",
+        "happy": "Content",
         "hours": "{{count}} h",
         "minutes": "{{count}} min",
         "name": "Nom",
+        "neutral": "Neutre",
+        "sad": "Triste",
         "search": "Recherche",
         "searchHint": "Recherche des participants",
         "seconds": "{{count}} s",
         "speakerStats": "Statistiques d'intervenant",
-        "speakerTime": "Temps d'intervention"
+        "speakerTime": "Temps d'intervention",
+        "surprised": "Surpris"
     },
     "startupoverlay": {
+        "genericTitle": "La conférence a besoin d'utiliser votre microphone et votre caméra.",
         "policyText": " ",
         "title": "{{app}} doit utiliser votre micro et votre caméra."
     },
@@ -573,93 +1170,197 @@
         "text": "Appuyez sur le bouton <i>Rejoindre</i> pour vous reconnecter.",
         "title": "Votre appel vidéo a été interrompu parce que cet ordinateur est tombé en veille."
     },
+    "termsView": {
+        "title": "Conditions d'utilisation"
+    },
+    "toggleTopPanelLabel": "Basculer le panneau supérieur",
     "toolbar": {
         "Settings": "Paramètres",
         "accessibilityLabel": {
             "Settings": "Basculement des paramètres",
             "audioOnly": "Basculement du mode audio uniquement",
             "audioRoute": "Sélectionner le dispositif audio",
+            "boo": "Bou",
+            "breakoutRooms": "Rejoindre / quitter une salle annexe",
             "callQuality": "Gestion de la qualité d'appel",
+            "carmode": "Mode voiture",
             "cc": "Basculement des sous-titres",
             "chat": "Basculement de la fenêtre de clavardage",
+            "clap": "Applaudir",
+            "closeChat": "Fermer la discussion instantanée",
+            "closeMoreActions": "Fermer le menu plus d'actions",
+            "closeParticipantsPane": "Fermer le panneau des participants",
+            "collapse": "Plier",
             "document": "Basculement du document partagé",
+            "documentClose": "Fermer le document partagé",
+            "documentOpen": "Ouvrir le document partagé",
             "download": "",
+            "embedMeeting": "Intégrer la réunion",
+            "endConference": "Terminer la réunion pour tout le monde",
+            "enterFullScreen": "Passer en mode plein écran",
+            "enterTileView": "Passer en vue mosaïque",
+            "exitFullScreen": "Quitter le mode plein écran",
+            "exitTileView": "Quitter la vue mosaïque",
+            "expand": "Développer",
             "feedback": "Laisser un commentaire",
             "fullScreen": "Basculement de l'affichage plein écran",
+            "giphy": "Activer/désactiver le menu GIPHY",
+            "grantModerator": "donner des droits de modérateur",
             "hangup": "Quitter l'appel",
+            "heading": "Barre d'outils",
             "help": "",
+            "hideWhiteboard": "Masquer le tableau blanc",
             "invite": "Inviter des personnes",
             "kick": "Expulser le participant",
+            "laugh": "Rire",
+            "leaveConference": "Quitter la réunion",
+            "like": "Approuver",
+            "linkToSalesforce": "Lien à Salesforce",
+            "lobbyButton": "Activer / Désactiver le mode salle d'attente",
             "localRecording": "Basculement des commandes d'enregistrement local",
             "lockRoom": "Basculement du mot de passe de la réunion",
+            "lowerHand": "Baisser la main",
             "moreActions": "Basculement du menu d'actions supplémentaires",
             "moreActionsMenu": "Menu d'actions supplémentaires",
+            "moreOptions": "Voir plus d'options",
             "mute": "Basculement de la sourdine",
+            "muteEveryone": "Couper le micro de tout le monde",
+            "muteEveryoneElse": "Couper le micro de tous les autres",
+            "muteEveryoneElsesVideoStream": "Couper la caméra de tous les autres",
+            "muteEveryonesVideoStream": "Couper la caméra de tout le monde",
+            "muteGUMPending": "Connection de votre microphone",
+            "noiseSuppression": "Suppression du bruit",
+            "openChat": "Ouvrir le chat",
+            "participants": "Participants",
             "pip": "Basculement du mode image dans l'image",
             "privateMessage": "",
             "profile": "Modifier votre profil",
             "raiseHand": "Basculement de la main levée",
+            "reactions": "Réactions",
+            "reactionsMenu": "Ouvrir / fermer le menu réactions",
             "recording": "Basculement de l'enregistrement",
             "remoteMute": "Mettre le participant en sourdine",
+            "remoteVideoMute": "Couper la caméra du participant",
+            "security": "Options de sécurité",
+            "selectBackground": "Selectionner un arrière-plan",
+            "selfView": "Afficher votre vidéo",
             "shareRoom": "Inviter quelqu'un",
             "shareYourScreen": "Basculement du partage d'écran",
+            "shareaudio": "Partager l'audio",
             "sharedvideo": "Basculement du partage de vidéo",
             "shortcuts": "Basculement des raccourcis",
-            "show": "",
+            "show": "Afficher en premier plan",
+            "showWhiteboard": "Afficher le tableux blanc",
+            "silence": "Silence",
             "speakerStats": "Basculement des statistiques d'intervenant",
+            "stopScreenSharing": "Arrêter le partage d'écran",
+            "stopSharedVideo": "Arrêter la vidéo partagée",
+            "surprised": "Surpris",
             "tileView": "Basculement de l'affichage mosaïque",
             "toggleCamera": "Basculement de la caméra",
+            "toggleFilmstrip": "Afficher ou masquer les vignettes vidéo",
+            "unmute": "Rétablir le son",
             "videoblur": "Alterner le brouillage vidéo",
-            "videomute": "Basculement de la sourdine vidéo"
+            "videomute": "Basculement de la sourdine vidéo",
+            "videomuteGUMPending": "Connexion de votre caméra",
+            "videounmute": "Démarrer la vidéo"
         },
         "addPeople": "Ajouter des personnes à votre appel",
         "audioOnlyOff": "Désactiver le mode bande passante faible",
         "audioOnlyOn": "Activer le mode bande passante faible",
         "audioRoute": "Sélectionner le dispositif audio",
+        "audioSettings": "Paramètres audio",
         "authenticate": "Authentification",
+        "boo": "Huer",
         "callQuality": "Gestion de la qualité d'appel",
         "chat": "Ouvrir / Fermer le clavardage",
+        "clap": "Applaudir",
         "closeChat": "Fermer le clavardage",
+        "closeParticipantsPane": "Fermer le panneau des participants",
+        "closeReactionsMenu": "Fermer le menu réactions",
+        "disableNoiseSuppression": "Arrêter la suppression du bruit",
+        "disableReactionSounds": "Vous pouvez interdire les réactions sonores à cette réunion",
         "documentClose": "Fermer le document partagé",
         "documentOpen": "Ouvrir le document partagé",
         "download": "Télécharger nos applications",
+        "e2ee": "Chiffrement de Bout-en-Bout",
+        "embedMeeting": "Intégrer la réunion",
+        "enableNoiseSuppression": "Activer la suppression du bruit",
+        "endConference": "Terminer la réunion pour tout le monde",
         "enterFullScreen": "Afficher le mode plein écran",
         "enterTileView": "Passer à l'affichage mosaïque",
         "exitFullScreen": "Quitter le mode plein écran",
         "exitTileView": "Quitter l'affichage mosaïque",
         "feedback": "Laisser un commentaire",
+        "giphy": "Activer/désactiver le menu GIPHY",
         "hangup": "Quitter",
         "help": "Aide",
         "invite": "Inviter des personnes",
+        "joinBreakoutRoom": "Rejoindre salle annexe",
+        "laugh": "Rire",
+        "leaveBreakoutRoom": "Quitter salle annexe",
+        "leaveConference": "Quitter la réunion",
+        "like": "Approuver",
+        "linkToSalesforce": "Lien à Salesforce",
+        "lobbyButtonDisable": "Désactiver le mode salle d'attente / contrôle des participant(e)s",
+        "lobbyButtonEnable": "Activer le mode salle d'attente / contrôle des participant(e)s",
         "login": "Connexion",
         "logout": "Déconnexion",
         "lowerYourHand": "Abaisser votre main",
         "moreActions": "Plus d'actions",
+        "moreOptions": "Plus d'options",
         "mute": "Activer / Réactiver le son",
+        "muteEveryone": "Couper le micro à tout le monde",
+        "muteEveryonesVideo": "Couper la caméra de tout le monde",
+        "muteGUMPending": "Connection de votre microphone",
         "noAudioSignalDesc": "Si vous n'avez pas délibérément coupé le son des paramètres du système ou du matériel, envisagez de changer le périphérique.",
         "noAudioSignalDescSuggestion": "Si vous n'avez pas délibérément coupé le son des paramètres du système ou du matériel, pensez à utiliser le périphérique suivant :",
+        "noAudioSignalDialInDesc": "Vous pouvez également appeler en utilisant :",
+        "noAudioSignalDialInLinkDesc": "Numéros d'appel",
         "noAudioSignalTitle": "Il n'y a pas d'entrée provenant de votre micro !",
+        "noiseSuppression": "Suppression du bruit",
+        "noisyAudioInputDesc": "Il semble que votre microphone soit bruyant, veuillez le couper ou changer de périphérique.",
+        "noisyAudioInputTitle": "Votre microphone semble être bruyant !",
         "openChat": "Ouvrir le clavardage",
+        "openReactionsMenu": "Ouvrir le menu Réactions",
+        "participants": "Participants",
         "pip": "Passer en mode image dans l'image",
         "privateMessage": "Envoyer un message privé",
         "profile": "Modifier votre profil",
         "raiseHand": "Lever / Abaisser votre main",
         "raiseYourHand": "Lever votre main",
+        "reactionBoo": "Envoyer réaction huer",
+        "reactionClap": "Envoyer réaction applaudir",
+        "reactionLaugh": "Envoyer réaction rire",
+        "reactionLike": "Envoyer réaction approuver",
+        "reactionSilence": "Envoyer réaction silence",
+        "reactionSurprised": "Envoyer réaction surprise",
+        "reactions": "Reactions",
+        "security": "Options de sécurité",
+        "selectBackground": "Sélectionner un arrière-plan",
         "shareRoom": "Inviter quelqu'un",
         "sharedvideo": "Partager une vidéo",
         "shortcuts": "Voir les raccourcis",
+        "showWhiteboard": "Afficher le tableau blanc",
+        "silence": "Silence",
         "speakerStats": "Statistiques d'intervenant",
         "startScreenSharing": "Démarrer le partage d'écran",
         "startSubtitles": "Activer les sous-titres",
         "startvideoblur": "Brouiller mon arrière plan",
+        "stopAudioSharing": "Arrêter le partage son",
         "stopScreenSharing": "Arrêter le partage d'écran",
         "stopSharedVideo": "Arrêter la vidéo",
         "stopSubtitles": "Désactiver les sous-titres",
         "stopvideoblur": "Désactiver le brouillage d'arrière-plan",
+        "surprised": "Surpris",
         "talkWhileMutedPopup": "Vous essayez de parler? Vous êtes en sourdine.",
         "tileViewToggle": "Basculement de l'affichage mosaïque",
         "toggleCamera": "Basculement de la caméra",
-        "videomute": "Démarrer / Arrêter la caméra"
+        "unmute": "Rétablir le son",
+        "videoSettings": "Paramètres vidéo",
+        "videomute": "Démarrer / Arrêter la caméra",
+        "videomuteGUMPending": "Connexion de votre caméra",
+        "videounmute": "Démarrer la caméra"
     },
     "transcribing": {
         "ccButtonTooltip": "Activer / Désactiver les sous-titres",
@@ -668,11 +1369,17 @@
         "failedToStart": "Échec du démarrage de la transcription",
         "labelToolTip": "La réunion est transcrite",
         "off": "La transcription est arrêtée",
+        "on": "La transcription est activée",
         "pending": "Préparation de la transcription de la réunion en cours…",
+        "sourceLanguageDesc": "Actuellement, la langue de la réunion est sélectionnée à <b>{{sourceLanguage}}</b>. <br/> Vous pouvez la changer à partir de ",
+        "sourceLanguageHere": "ici",
         "start": "Activer l'affichage des sous-titres",
         "stop": "Désactiver l'affichage des sous-titres",
+        "subtitles": "sous-titres",
+        "subtitlesOff": "off",
         "tr": "PI"
     },
+    "unpinParticipant": "Désépingler - {{participantName}}",
     "userMedia": {
         "androidGrantPermissions": "Sélectionner <b><i>Autoriser</i></b> lorsque votre navigateur vous demande l'autorisation.",
         "chromeGrantPermissions": "Sélectionner <b><i>Autoriser</i></b> lorsque votre navigateur vous demande l'autorisation.",
@@ -696,12 +1403,15 @@
         "pending": "{{displayName}} a été invité"
     },
     "videoStatus": {
+        "adjustFor": "Ajuster pour:",
         "audioOnly": "AUD",
         "audioOnlyExpanded": "Vous êtes en mode bande passante faible. Dans ce mode, vous ne recevrez que le partage audio et le partage d’écran.",
+        "bestPerformance": "la meilleure performance",
         "callQuality": "Qualité d'appel",
         "hd": "HD",
         "hdTooltip": "Visionnement de vidéo en haute définition",
         "highDefinition": "Haute définition",
+        "highestQuality": "Meilleure qualité",
         "labelTooiltipNoVideo": "Aucune vidéo",
         "labelTooltipAudioOnly": "Mode bande passante faible activé",
         "ld": "LD",
@@ -709,29 +1419,83 @@
         "lowDefinition": "Basse définition",
         "onlyAudioAvailable": "Seulement l'audio est disponible",
         "onlyAudioSupported": "Ce navigateur prend seulement l'audio en charge.",
+        "performanceSettings": "Paramètres de performance",
+        "recording": "Enregistrement en cours",
         "sd": "SD",
         "sdTooltip": "Visionnement de vidéo en définition standard",
-        "standardDefinition": "Définition standard"
+        "standardDefinition": "Définition standard",
+        "streaming": "Diffusion en direct en cours"
     },
     "videothumbnail": {
+        "connectionInfo": "Informations de la connexion",
         "domute": "Discrétion",
-        "flip": "Actionner",
-        "kick": "Expulser",
+        "domuteOthers": "Couper le micro de tous les autres",
+        "domuteVideo": "Couper la caméra",
+        "domuteVideoOfOthers": "Couper la caméra des autres",
+        "flip": "Miroir",
+        "grantModerator": "Donner des droits de modérateur",
+        "hideSelfView": "Masquer l'affichage de votre propre vidéo",
+        "kick": "Exclure",
+        "mirrorVideo": "Inverser ma vidéo",
         "moderator": "Modérateur",
         "mute": "Le membre est en sourdine",
         "muted": "Discrétion",
+        "pinToStage": "Garder affiché",
         "remoteControl": "Contrôle à distance",
+        "screenSharing": "Cette personne partage son écran",
         "show": "Afficher en premier plan",
+        "showSelfView": "Afficher votre propre vidéo",
+        "unpinFromStage": "Ne plus garder affiché",
+        "verify": "Vérifier le participant",
+        "videoMuted": "Caméra coupée",
         "videomute": "Le membre a arrêté la caméra"
     },
+    "virtualBackground": {
+        "accessibilityLabel": {
+            "currentBackground": "Arrière-plan actuel: {{background}}",
+            "selectBackground": "Sélectionner un arrière-plan"
+        },
+        "addBackground": "Ajouter un arrière-plan",
+        "apply": "Appliquer",
+        "backgroundEffectError": "Erreur dans l'application de l'effet d'arrière-plan.",
+        "blur": "Flou",
+        "deleteImage": "Supprimer l'image",
+        "desktopShare": "Partage de bureau",
+        "desktopShareError": "Impossible de créer le partage de bureau",
+        "image1": "Plage",
+        "image2": "Mur blanc neutre",
+        "image3": "Pièce vide blanche",
+        "image4": "Lampadaire noir",
+        "image5": "Montagne",
+        "image6": "Forêt ",
+        "image7": "Lever de soleil",
+        "none": "Rien",
+        "pleaseWait": "Veuillez patienter...",
+        "removeBackground": "Supprimer l'arrière-plan",
+        "slightBlur": "Léger flou",
+        "title": "Arrière-plan virtuel",
+        "uploadedImage": "Image téléversée {{index}}",
+        "webAssemblyWarning": "WebAssembly non supporté",
+        "webAssemblyWarningDescription": "WebAssembly invalidé ou non supporté par ce navigateur"
+    },
+    "visitors": {
+        "chatIndicator": "(visiteur)",
+        "labelTooltip": "Nombre de Visiteurs",
+        "notification": {
+            "description": "Pour participer lever la main.",
+            "title": "Vous êtes visiteur dans cette réunion"
+        }
+    },
+    "volumeSlider": "Curseur de volume",
     "welcomepage": {
         "accessibilityLabel": {
             "join": "Toucher pour rejoindre",
             "roomname": "Entrer le nom de la salle"
         },
+        "addMeetingName": "Ajouter un nom de réunion",
         "appDescription": "Profitez de la conversation vidéo avec toute votre équipe. Allez-y, invitez tous ceux que vous connaissez. {{app}} est une solution 100 % libre de conférence vidéo entièrement chiffrée que vous pouvez utiliser en tout temps et gratuitement, sans avoir besoin de compte.",
         "audioVideoSwitch": {
-            "audio": "Téléphone",
+            "audio": "Voix",
             "video": "Vidéo"
         },
         "calendar": "Calendrier",
@@ -740,18 +1504,43 @@
         "enterRoomTitle": "Démarrer une nouvelle réunion",
         "go": "Aller",
         "goSmall": "Aller",
+        "headerSubtitle": "Conférences sécurisées et de haute qualité",
+        "headerTitle": "Jitsi Meet",
         "info": "Ret. arr.",
+        "jitsiOnMobile": "Jitsi sur mobile – télécharger notre application et démarrez des conférences de n'import où",
         "join": "CRÉER / REJOINDRE",
+        "logo": {
+            "calendar": "Logo Calendar",
+            "desktopPreviewThumbnail": "Miniature d'aperçu du bureau",
+            "googleLogo": "Logo Google",
+            "logoDeepLinking": "Logo Jitsi meet",
+            "microsoftLogo": "Logo Microsoft",
+            "policyLogo": "Logo de la politique"
+        },
+        "meetingsAccessibilityLabel": "Réunions",
+        "mobileDownLoadLinkAndroid": "Télécharger l'application mobile sur Android",
+        "mobileDownLoadLinkFDroid": "Télécharger l'application mobile sur F-Droid",
+        "mobileDownLoadLinkIos": "Télécharger l'application mobile sur iOS",
+        "moderatedMessage": "Ou <a href=\"{{url}}\" rel=\"noopener noreferrer\" target=\"_blank\">réserver une URL de réunion</a> à l'avance et où vous êtes le seul modérateur.",
         "privacy": "Confidentialité",
         "recentList": "Récent",
         "recentListDelete": "Supprimer",
         "recentListEmpty": "Votre liste récente est actuellement vide. Clavardez avec votre équipe et vous y trouverez toutes vos réunions récentes.",
+        "recentMeetings": "Vos réunions récentes",
         "reducedUIText": "Bienvenue sur {{app}}!",
         "roomNameAllowedChars": "Le nom de la réunion ne doit contenir aucun de ces caractères : ?, &, :, ', \", %, #.",
         "roomname": "Entrer le nom de la salle",
         "roomnameHint": "Entrez le nom ou l'URL de la salle que vous voulez rejoindre. Vous pouvez inventer un nom, mais assurez-vous de le partager avec les participants de la réunion pour qu'ils utilisent le même nom.",
         "sendFeedback": "Envoyer un commentaire",
+        "settings": "Paramètres",
+        "startMeeting": "Démarrer la conférence",
         "terms": "Termes",
-        "title": "Conférence vidéo sécurisée, pleinement fonctionnelle et entièrement gratuite"
+        "title": "Conférence vidéo sécurisée, riche en fonctionnalités et entièrement gratuite",
+        "upcomingMeetings": "Vos réunions à venir"
+    },
+    "whiteboard": {
+        "accessibilityLabel": {
+            "heading": "Tableau blanc"
+        }
     }
 }
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-he.json b/node_modules/@jitsi/react-native-sdk/lang/main-he.json
index 80bce90..20471f0 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-he.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-he.json
@@ -9,7 +9,7 @@
         "loading": "מחפש אנשים ומספרי טלפון",
         "loadingNumber": "מאמת מספר טלפון",
         "loadingPeople": "מחפש אנשים להזמין",
-        "noResults": "לא נמצאו תואצות מתאימות",
+        "noResults": "לא נמצאו תוצאות מתאימות",
         "noValidNumbers": "אנא הזן מסםר טלפון",
         "searchNumbers": "הוסף מספר טלפון",
         "searchPeople": "חפש אנשים",
@@ -47,7 +47,7 @@
     },
     "chat": {
         "error": "שגיאה: ההודעה שלך \"{{originalText}}\" לא נשלחה. סיבה: {{error}}",
-        "fieldPlaceHolder": "הקלד הודעתך כאו",
+        "fieldPlaceHolder": "הקלד הודעתך כאן",
         "messageTo": "הודעה פרטית אל {{recipient}}",
         "messagebox": "הקלד הודעה",
         "nickname": {
@@ -442,7 +442,7 @@
     "me": "אני",
     "notify": {
         "OldElectronAPPTitle": "פגיעות אבטחה!",
-        "connectedOneMember": "{{name}} הצטרף למפדש",
+        "connectedOneMember": "{{name}} הצטרף למפגש",
         "connectedThreePlusMembers": "{{name}} ו-{{count}} אחרים הצטרפו למפגש",
         "connectedTwoMembers": "{{first}} ו-{{second}} הצטרפו למפגש",
         "disconnected": "מנותק",
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-hu.json b/node_modules/@jitsi/react-native-sdk/lang/main-hu.json
index c818342..cb4ebc2 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-hu.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-hu.json
@@ -184,6 +184,7 @@
         "Share": "Megosztás",
         "Submit": "Elküldés",
         "WaitForHostMsg": "A konferencia még nem kezdődött meg. Ha Ön a házigazda, akkor hitelesítse magát. Ellenkező esetben, kérjük várjon a házigazda érkezésére.",
+        "WaitForHostNoAuthMsg": "A konferencia még nem kezdődött el, mert nincs elérhető moderátor. Kérlek várj.",
         "WaitingForHost": "Várakozás a házigazdára…",
         "Yes": "Igen",
         "accessibilityLabel": {
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-id.json b/node_modules/@jitsi/react-native-sdk/lang/main-id.json
new file mode 100644
index 0000000..89298ff
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-id.json
@@ -0,0 +1,1559 @@
+{
+    "addPeople": {
+        "accessibilityLabel": {
+            "meetingLink": "Tautan rapat: {{url}}"
+        },
+        "add": "Undang",
+        "addContacts": "Undang kontak Anda",
+        "contacts": "kontak",
+        "copyInvite": "Salin undangan rapat",
+        "copyLink": "Salin tautan rapat",
+        "copyStream": "Salin tautan streaming langsung",
+        "countryNotSupported": "Kami belum mendukung destinasi ini.",
+        "countryReminder": "Menelepon ke luar AS? Pastikan Anda memulai dengan kode negara!",
+        "defaultEmail": "Email Default Anda",
+        "disabled": "Anda tidak dapat mengundang orang lain.",
+        "failedToAdd": "Gagal menambahkan peserta",
+        "googleEmail": "Email Google",
+        "inviteMoreHeader": "Anda adalah satu-satunya yang ada di dalam rapat",
+        "inviteMoreMailSubject": "Bergabunglah dengan rapat {{appName}}",
+        "inviteMorePrompt": "Undang lebih banyak orang",
+        "linkCopied": "Tautan disalin ke papan klip",
+        "noResults": "Tidak ada hasil pencarian yang cocok",
+        "outlookEmail": "Email Outlook",
+        "phoneNumbers": "nomor telepon",
+        "searching": "Mencari...",
+        "shareInvite": "Bagikan undangan rapat",
+        "shareLink": "Bagikan tautan rapat untuk mengundang orang lain",
+        "shareStream": "Bagikan tautan streaming langsung",
+        "sipAddresses": "alamat sip",
+        "telephone": "Telepon: {{number}}",
+        "title": "Undang orang ke rapat ini",
+        "yahooEmail": "Email Yahoo"
+    },
+    "audioDevices": {
+        "bluetooth": "Bluetooth",
+        "car": "Audio Mobil",
+        "headphones": "Headphone",
+        "none": "Tidak ada perangkat audio yang tersedia",
+        "phone": "Ponsel",
+        "speaker": "Speaker"
+    },
+    "audioOnly": {
+        "audioOnly": "Bandwidth rendah"
+    },
+    "bandwidthSettings": {
+        "assumedBandwidthBps": "misalnya 10000000 untuk 10 Mbps",
+        "assumedBandwidthBpsWarning": "Nilai yang lebih tinggi dapat menyebabkan masalah jaringan.",
+        "customValue": "nilai kustom",
+        "customValueEffect": "untuk mengatur nilai bps yang sebenarnya",
+        "leaveEmpty": "biarkan kosong",
+        "leaveEmptyEffect": "untuk memungkinkan estimasi dilakukan",
+        "possibleValues": "Nilai yang mungkin",
+        "setAssumedBandwidthBps": "Bandwidth yang diasumsikan (bps)",
+        "title": "Pengaturan bandwidth",
+        "zeroEffect": "untuk menonaktifkan video"
+    },
+    "breakoutRooms": {
+        "actions": {
+            "add": "Tambahkan ruang breakout",
+            "autoAssign": "Tetapkan secara otomatis ke ruang breakout",
+            "close": "Tutup",
+            "join": "Gabung",
+            "leaveBreakoutRoom": "Tinggalkan ruang breakout",
+            "more": "Lainnya",
+            "remove": "Hapus",
+            "rename": "Ganti nama",
+            "renameBreakoutRoom": "Ganti nama ruang breakout",
+            "sendToBreakoutRoom": "Kirim peserta ke:"
+        },
+        "breakoutList": "Daftar breakout",
+        "buttonLabel": "Ruang breakout",
+        "defaultName": "Ruang breakout #{{index}}",
+        "hideParticipantList": "Sembunyikan daftar peserta",
+        "mainRoom": "Ruang utama",
+        "notifications": {
+            "joined": "Bergabung dengan ruang breakout \"{{name}}\"",
+            "joinedMainRoom": "Bergabung dengan ruang utama",
+            "joinedTitle": "Ruang Breakout"
+        },
+        "showParticipantList": "Tampilkan daftar peserta",
+        "title": "Ruang Breakout"
+    },
+    "calendarSync": {
+        "addMeetingURL": "Tambahkan tautan rapat",
+        "confirmAddLink": "Apakah Anda ingin menambahkan tautan Jitsi ke acara ini?",
+        "error": {
+            "appConfiguration": "Integrasi kalender tidak dikonfigurasi dengan benar.",
+            "generic": "Terjadi kesalahan. Harap periksa pengaturan kalender Anda atau coba perbarui kalender.",
+            "notSignedIn": "Terjadi kesalahan saat mengautentikasi untuk melihat acara kalender. Harap periksa pengaturan kalender Anda dan coba masuk kembali."
+        },
+        "join": "Gabung",
+        "joinTooltip": "Gabung ke rapat",
+        "nextMeeting": "Rapat berikutnya",
+        "noEvents": "Tidak ada acara mendatang yang dijadwalkan.",
+        "ongoingMeeting": "Rapat sedang berlangsung",
+        "permissionButton": "Buka pengaturan",
+        "permissionMessage": "Izin Kalender diperlukan untuk melihat rapat Anda dalam aplikasi.",
+        "refresh": "Perbarui kalender",
+        "today": "Hari ini"
+    },
+    "carmode": {
+        "actions": {
+            "selectSoundDevice": "Pilih perangkat suara"
+        },
+        "labels": {
+            "buttonLabel": "Mode mobil",
+            "title": "Mode mobil",
+            "videoStopped": "Video Anda dihentikan"
+        }
+    },
+    "chat": {
+        "enter": "Masuk ke ruang",
+        "error": "Error: pesan Anda tidak terkirim. Alasan: {{error}}",
+        "fieldPlaceHolder": "Aa",
+        "lobbyChatMessageTo": "Pesan obrolan lobby ke {{recipient}}",
+        "message": "Pesan",
+        "messageAccessibleTitle": "{{user}} berkata:",
+        "messageAccessibleTitleMe": "saya berkata:",
+        "messageTo": "Pesan pribadi ke {{recipient}}",
+        "messagebox": "Ketik pesan",
+        "newMessages": "Pesan baru",
+        "nickname": {
+            "popover": "Pilih nama panggilan",
+            "title": "Masukkan nama panggilan untuk menggunakan obrolan",
+            "titleWithPolls": "Masukkan nama panggilan untuk menggunakan obrolan dan jajak pendapat"
+        },
+        "noMessagesMessage": "Belum ada pesan dalam pertemuan ini. Mulai percakapan di sini!",
+        "privateNotice": "Pesan pribadi ke {{recipient}}",
+        "sendButton": "Kirim",
+        "smileysPanel": "Panel Emoji",
+        "systemDisplayName": "Sistem",
+        "tabs": {
+            "chat": "Obrolan",
+            "polls": "Jajak Pendapat"
+        },
+        "title": "Obrolan",
+        "titleWithPolls": "Obrolan dan Jajak Pendapat",
+        "you": "Anda"
+    },
+    "chromeExtensionBanner": {
+        "buttonText": "Pasang Ekstensi Chrome",
+        "buttonTextEdge": "Pasang Ekstensi Edge",
+        "close": "Tutup",
+        "dontShowAgain": "Jangan tampilkan ini lagi",
+        "installExtensionText": "Pasang ekstensi untuk integrasi Google Calendar dan Office 365"
+    },
+    "connectingOverlay": {
+        "joiningRoom": "Menghubungkan Anda ke pertemuan Anda..."
+    },
+    "connection": {
+        "ATTACHED": "Terlampir",
+        "AUTHENTICATING": "Mengautentikasi",
+        "AUTHFAIL": "Autentikasi gagal",
+        "CONNECTED": "Terhubung",
+        "CONNECTING": "Menghubungkan",
+        "CONNFAIL": "Gagal terhubung",
+        "DISCONNECTED": "Terputus",
+        "DISCONNECTING": "Memutuskan",
+        "ERROR": "Error",
+        "FETCH_SESSION_ID": "Mendapatkan session-id...",
+        "GET_SESSION_ID_ERROR": "Error mendapatkan session-id: {{code}}",
+        "GOT_SESSION_ID": "Mendapatkan session-id... Selesai",
+        "LOW_BANDWIDTH": "Video untuk {{displayName}} telah dimatikan untuk menghemat bandwidth"
+    },
+    "connectionindicator": {
+        "address": "Alamat:",
+        "audio_ssrc": "Audio SSRC:",
+        "bandwidth": "Perkiraan bandwidth:",
+        "bitrate": "Bitrate:",
+        "bridgeCount": "Jumlah server: ",
+        "codecs": "Codec (A/V): ",
+        "connectedTo": "Terhubung ke:",
+        "e2eeVerified": "E2EE diverifikasi:",
+        "framerate": "Frame rate:",
+        "less": "Tampilkan lebih sedikit",
+        "localaddress": "Alamat lokal:",
+        "localaddress_plural": "Alamat lokal:",
+        "localport": "Port lokal:",
+        "localport_plural": "Port lokal:",
+        "maxEnabledResolution": "kirim maks",
+        "more": "Tampilkan lebih banyak",
+        "no": "tidak",
+        "packetloss": "Packet loss:",
+        "participant_id": "ID Partisipan:",
+        "quality": {
+            "good": "Bagus",
+            "inactive": "Tidak aktif",
+            "lost": "Hilang",
+            "nonoptimal": "Nonoptimal",
+            "poor": "Buruk"
+        },
+        "remoteaddress": "Alamat remote:",
+        "remoteaddress_plural": "Alamat remote:",
+        "remoteport": "Port remote:",
+        "remoteport_plural": "Port remote:",
+        "resolution": "Resolusi:",
+        "savelogs": "Simpan log",
+        "status": "Koneksi:",
+        "transport": "Transport:",
+        "transport_plural": "Transport:",
+        "video_ssrc": "Video SSRC:",
+        "yes": "ya"
+    },
+    "dateUtils": {
+        "earlier": "Lebih awal",
+        "today": "Hari ini",
+        "yesterday": "Kemarin"
+    },
+    "deepLinking": {
+        "appNotInstalled": "Anda memerlukan aplikasi seluler {{app}} untuk bergabung dengan pertemuan ini di ponsel Anda.",
+        "description": "Tidak terjadi apa-apa? Kami mencoba meluncurkan pertemuan Anda di aplikasi desktop {{app}}. Coba lagi atau buka di aplikasi web {{app}}.",
+        "descriptionNew": "Tidak terjadi apa-apa? Kami mencoba meluncurkan pertemuan Anda di aplikasi desktop {{app}}. <br /><br /> Anda dapat mencoba lagi atau buka di web.",
+        "descriptionWithoutWeb": "Tidak terjadi apa-apa? Kami mencoba meluncurkan pertemuan Anda di aplikasi desktop {{app}}.",
+        "downloadApp": "Unduh aplikasi",
+        "downloadMobileApp": "Unduh dari App Store",
+        "ifDoNotHaveApp": "Jika Anda belum memiliki aplikasi:",
+        "ifHaveApp": "Jika Anda sudah memiliki aplikasi:",
+        "joinInApp": "Bergabung dengan pertemuan ini menggunakan aplikasi",
+        "joinInAppNew": "Bergabung dalam aplikasi",
+        "joinInBrowser": "Bergabung di peramban",
+        "launchMeetingLabel": "Bagaimana Anda ingin bergabung dengan pertemuan ini?",
+        "launchWebButton": "Buka di web",
+        "noDesktopApp": "Anda tidak memiliki aplikasinya?",
+        "noMobileApp": "Anda tidak memiliki aplikasinya?",
+        "or": "ATAU",
+        "termsAndConditions": "Dengan melanjutkan Anda menyetujui <a href='{{termsAndConditionsLink}}' rel='noopener noreferrer' target='_blank'>syarat & ketentuan</a> kami.",
+        "title": "Meluncurkan pertemuan Anda di {{app}}...",
+        "titleNew": "Meluncurkan pertemuan Anda...",
+        "tryAgainButton": "Coba lagi di desktop",
+        "unsupportedBrowser": "Sepertinya Anda menggunakan peramban yang tidak kami dukung."
+    },
+    "defaultLink": "contoh. {{url}}",
+    "defaultNickname": "contoh. Jane Pink",
+    "deviceError": {
+        "cameraError": "Gagal mengakses kamera Anda",
+        "cameraPermission": "Error memperoleh izin kamera",
+        "microphoneError": "Gagal mengakses mikrofon Anda",
+        "microphonePermission": "Error memperoleh izin mikrofon"
+    },
+    "deviceSelection": {
+        "hid": {
+            "callControl": "Kontrol panggilan",
+            "connectedDevices": "Perangkat terhubung:",
+            "deleteDevice": "Hapus perangkat",
+            "pairDevice": "Pasangkan perangkat"
+        },
+        "noPermission": "Izin tidak diberikan",
+        "previewUnavailable": "Pratinjau tidak tersedia",
+        "selectADevice": "Pilih perangkat",
+        "testAudio": "Uji"
+    },
+    "dialIn": {
+        "screenTitle": "Ringkasan panggilan masuk"
+    },
+    "dialOut": {
+        "statusMessage": "sekarang {{status}}"
+    },
+    "dialog": {
+        "Back": "Kembali",
+        "Cancel": "Batal",
+        "IamHost": "Masuk",
+        "Ok": "OK",
+        "Remove": "Hapus",
+        "Share": "Bagikan",
+        "Submit": "Kirim",
+        "WaitForHostMsg": "Konferensi belum dimulai karena belum ada moderator yang datang. Jika Anda ingin menjadi moderator, silakan masuk. Jika tidak, harap tunggu.",
+        "WaitForHostNoAuthMsg": "Konferensi belum dimulai karena belum ada moderator yang datang. Harap tunggu.",
+        "WaitingForHostButton": "Tunggu moderator",
+        "WaitingForHostTitle": "Menunggu moderator...",
+        "Yes": "Ya",
+        "accessibilityLabel": {
+            "Cancel": "Batal (tinggalkan dialog)",
+            "Ok": "OK (simpan dan tinggalkan dialog)",
+            "close": "Tutup dialog",
+            "liveStreaming": "Streaming Langsung",
+            "sharingTabs": "Opsi Berbagi"
+        },
+        "add": "Tambah",
+        "addMeetingNote": "Tambahkan catatan tentang pertemuan ini",
+        "addOptionalNote": "Tambahkan catatan (opsional):",
+        "allow": "Izinkan",
+        "allowToggleCameraDialog": "Apakah Anda mengizinkan {{initiatorName}} untuk mengubah mode kamera Anda?",
+        "allowToggleCameraTitle": "Izinkan ubah kamera?",
+        "alreadySharedVideoMsg": "Partisipan lain sudah membagikan video. Konferensi ini hanya memungkinkan satu video yang dibagikan pada satu waktu.",
+        "alreadySharedVideoTitle": "Hanya satu video yang diizinkan pada satu waktu",
+        "applicationWindow": "Jendela aplikasi",
+        "authenticationRequired": "Autentikasi diperlukan",
+        "cameraConstraintFailedError": "Kamera Anda tidak memenuhi beberapa batasan yang diperlukan.",
+        "cameraNotFoundError": "Kamera tidak ditemukan.",
+        "cameraNotSendingData": "Kami tidak dapat mengakses kamera Anda. Periksa apakah aplikasi lain menggunakan perangkat ini, pilih perangkat lain dari menu pengaturan, atau coba muat ulang aplikasi.",
+        "cameraNotSendingDataTitle": "Tidak dapat mengakses kamera",
+        "cameraPermissionDeniedError": "Anda belum memberikan izin untuk menggunakan kamera Anda. Anda masih dapat bergabung dengan konferensi tetapi orang lain tidak akan melihat Anda. Gunakan tombol kamera di bilah alamat untuk memperbaikinya.",
+        "cameraTimeoutError": "Tidak dapat memulai sumber video. Timeout terjadi!",
+        "cameraUnknownError": "Tidak dapat menggunakan kamera karena alasan yang tidak diketahui.",
+        "cameraUnsupportedResolutionError": "Kamera Anda tidak mendukung resolusi video yang diperlukan.",
+        "close": "Tutup",
+        "conferenceDisconnectMsg": "Anda mungkin ingin memeriksa koneksi jaringan Anda. Menghubungkan kembali dalam {{seconds}} detik...",
+        "conferenceDisconnectTitle": "Anda telah terputus.",
+        "conferenceReloadMsg": "Kami mencoba memperbaiki ini. Menghubungkan kembali dalam {{seconds}} detik...",
+        "conferenceReloadTitle": "Sayangnya, terjadi kesalahan.",
+        "confirm": "Konfirmasi",
+        "confirmNo": "Tidak",
+        "confirmYes": "Ya",
+        "connectError": "Ups! Ada yang salah dan kami tidak bisa terhubung ke konferensi.",
+        "connectErrorWithMsg": "Ups! Ada yang salah dan kami tidak bisa terhubung ke konferensi: {{msg}}",
+        "connecting": "Menghubungkan",
+        "contactSupport": "Hubungi dukungan",
+        "copied": "Tersalin",
+        "copy": "Salin",
+        "demoteParticipantDialog": "Apakah Anda yakin ingin memindahkan partisipan ini ke pengunjung?",
+        "demoteParticipantTitle": "Pindahkan ke pengunjung",
+        "dismiss": "Abaikan",
+        "displayNameRequired": "Hai! Siapa namamu?",
+        "done": "Selesai",
+        "e2eeDescription": "Enkripsi End-to-End saat ini adalah EKSPERIMENTAL. Harap diingat bahwa mengaktifkan enkripsi end-to-end akan menonaktifkan layanan yang disediakan oleh server seperti: partisipasi telepon. Juga, perlu diingat bahwa pertemuan hanya akan berfungsi bagi orang yang bergabung dari browser dengan dukungan untuk aliran masuk.",
+        "e2eeDisabledDueToMaxModeDescription": "Tidak dapat mengaktifkan Enkripsi End-to-End karena jumlah partisipan yang besar dalam konferensi.",
+        "e2eeLabel": "Aktifkan Enkripsi End-to-End",
+        "e2eeWarning": "PERINGATAN: Tidak semua partisipan dalam pertemuan ini tampaknya memiliki dukungan untuk Enkripsi End-to-End. Jika Anda mengaktifkannya, mereka tidak akan dapat melihat atau mendengar Anda.",
+        "e2eeWillDisableDueToMaxModeDescription": "PERINGATAN: Enkripsi End-to-End akan dinonaktifkan secara otomatis jika lebih banyak partisipan bergabung dalam konferensi.",
+        "embedMeeting": "Sematkan pertemuan",
+        "enterDisplayName": "Masukkan namamu",
+        "error": "Error",
+        "errorRoomCreationRestriction": "Anda mencoba bergabung terlalu cepat, harap kembali beberapa saat lagi.",
+        "gracefulShutdown": "Layanan kami saat ini tidak berfungsi karena pemeliharaan. Silakan coba lagi nanti.",
+        "grantModeratorDialog": "Apakah Anda yakin ingin memberikan hak moderator kepada {{participantName}}?",
+        "grantModeratorTitle": "Berikan hak moderator",
+        "hide": "Sembunyikan",
+        "hideShareAudioHelper": "Jangan tampilkan dialog ini lagi",
+        "incorrectPassword": "Nama pengguna atau kata sandi salah",
+        "incorrectRoomLockPassword": "Kata sandi salah",
+        "internalError": "Ups! Ada yang salah. Kesalahan berikut terjadi: {{error}}",
+        "internalErrorTitle": "Kesalahan internal",
+        "kickMessage": "Anda dapat menghubungi {{participantDisplayName}} untuk detail lebih lanjut.",
+        "kickParticipantButton": "Keluarkan",
+        "kickParticipantDialog": "Apakah Anda yakin ingin mengeluarkan partisipan ini?",
+        "kickParticipantTitle": "Keluarkan partisipan ini?",
+        "kickTitle": "Ouch! {{participantDisplayName}} mengeluarkan Anda dari pertemuan",
+        "linkMeeting": "Tautkan pertemuan",
+        "linkMeetingTitle": "Tautkan pertemuan ke Salesforce",
+        "liveStreaming": "Streaming Langsung",
+        "liveStreamingDisabledBecauseOfActiveRecordingTooltip": "Tidak mungkin saat perekaman aktif",
+        "localUserControls": "Kontrol pengguna lokal",
+        "lockMessage": "Gagal mengunci konferensi.",
+        "lockRoom": "Tambahkan kata sandi pertemuan $t(lockRoomPassword)",
+        "lockTitle": "Kunci gagal",
+        "login": "Masuk",
+        "loginQuestion": "Apakah Anda yakin ingin masuk dan meninggalkan konferensi?",
+        "logoutQuestion": "Apakah Anda yakin ingin keluar dan meninggalkan konferensi?",
+        "logoutTitle": "Keluar",
+        "maxUsersLimitReached": "Batas jumlah peserta maksimum telah tercapai. Konferensi penuh. Harap hubungi pemilik pertemuan atau coba lagi nanti!",
+        "maxUsersLimitReachedTitle": "Batas peserta maksimum tercapai",
+        "micConstraintFailedError": "Mikrofon Anda tidak memenuhi beberapa batasan yang diperlukan.",
+        "micNotFoundError": "Mikrofon tidak ditemukan.",
+        "micNotSendingData": "Buka pengaturan komputer Anda untuk membuka suara mikrofon Anda dan menyesuaikan levelnya",
+        "micNotSendingDataTitle": "Mikrofon Anda dibisukan oleh pengaturan sistem Anda",
+        "micPermissionDeniedError": "Anda belum memberikan izin untuk menggunakan mikrofon Anda. Anda masih dapat bergabung dengan konferensi tetapi orang lain tidak akan mendengar Anda. Gunakan tombol kamera di bilah alamat untuk memperbaikinya.",
+        "micTimeoutError": "Tidak dapat memulai sumber audio. Timeout terjadi!",
+        "micUnknownError": "Tidak dapat menggunakan mikrofon karena alasan yang tidak diketahui.",
+        "moderationAudioLabel": "Izinkan peserta membuka suara mereka sendiri",
+        "moderationVideoLabel": "Izinkan peserta untuk memulai video mereka",
+        "muteEveryoneDialog": "Partisipan dapat membuka suara mereka sendiri kapan saja.",
+        "muteEveryoneDialogModerationOn": "Partisipan dapat mengirim permintaan untuk berbicara kapan saja.",
+        "muteEveryoneElseDialog": "Setelah dibisukan, Anda tidak akan bisa membukanya kembali, tetapi mereka dapat membuka suara mereka kapan saja.",
+        "muteEveryoneElseTitle": "Bisukan semua kecuali {{whom}}?",
+        "muteEveryoneElsesVideoDialog": "Setelah kamera dinonaktifkan, Anda tidak akan bisa mengaktifkannya kembali, tetapi mereka dapat mengaktifkannya kembali kapan saja.",
+        "muteEveryoneElsesVideoTitle": "Hentikan video semua kecuali {{whom}}?",
+        "muteEveryoneSelf": "dirimu sendiri",
+        "muteEveryoneStartMuted": "Semua orang mulai dibisukan dari sekarang",
+        "muteEveryoneTitle": "Bisukan semua?",
+        "muteEveryonesVideoDialog": "Partisipan dapat menyalakan video mereka kapan saja.",
+        "muteEveryonesVideoDialogModerationOn": "Partisipan dapat mengirim permintaan untuk menyalakan video mereka kapan saja.",
+        "muteEveryonesVideoDialogOk": "Nonaktifkan",
+        "muteEveryonesVideoTitle": "Hentikan video semua orang?",
+        "muteParticipantBody": "Anda tidak akan bisa membukanya kembali, tetapi mereka dapat membuka suara mereka kapan saja.",
+        "muteParticipantButton": "Bisukan",
+        "muteParticipantsVideoBody": "Anda tidak akan bisa menyalakan kamera kembali, tetapi mereka dapat menyalakannya kembali kapan saja.",
+        "muteParticipantsVideoBodyModerationOn": "Anda tidak akan bisa menyalakan kamera kembali dan mereka juga tidak akan bisa.",
+        "muteParticipantsVideoButton": "Hentikan video",
+        "muteParticipantsVideoDialog": "Apakah Anda yakin ingin menonaktifkan kamera partisipan ini? Anda tidak akan bisa menyalakan kamera kembali, tetapi mereka dapat menyalakannya kembali kapan saja.",
+        "muteParticipantsVideoDialogModerationOn": "Apakah Anda yakin ingin menonaktifkan kamera partisipan ini? Anda tidak akan bisa menyalakan kamera kembali dan mereka juga tidak akan bisa.",
+        "muteParticipantsVideoTitle": "Nonaktifkan kamera partisipan ini?",
+        "noDropboxToken": "Tidak ada token Dropbox valid",
+        "password": "Kata sandi",
+        "passwordLabel": "Konferensi telah dikunci oleh seorang partisipan. Harap masukkan $t(lockRoomPassword) untuk bergabung.",
+        "passwordNotSupported": "Pengaturan $t(lockRoomPassword) pertemuan tidak didukung.",
+        "passwordNotSupportedTitle": "$t(lockRoomPasswordUppercase) tidak didukung",
+        "passwordRequired": "$t(lockRoomPasswordUppercase) diperlukan",
+        "permissionCameraRequiredError": "Izin kamera diperlukan untuk berpartisipasi dalam konferensi dengan video. Harap berikan izin tersebut di Pengaturan",
+        "permissionErrorTitle": "Izin diperlukan",
+        "permissionMicRequiredError": "Izin mikrofon diperlukan untuk berpartisipasi dalam konferensi dengan audio. Harap berikan izin tersebut di Pengaturan",
+        "readMore": "lebih lanjut",
+        "recentlyUsedObjects": "Objek yang Anda gunakan baru-baru ini",
+        "recording": "Merekam",
+        "recordingDisabledBecauseOfActiveLiveStreamingTooltip": "Tidak mungkin saat streaming langsung aktif",
+        "rejoinNow": "Gabung kembali sekarang",
+        "remoteControlAllowedMessage": "{{user}} menerima permintaan kontrol jarak jauh Anda!",
+        "remoteControlDeniedMessage": "{{user}} menolak permintaan kontrol jarak jauh Anda!",
+        "remoteControlErrorMessage": "Terjadi kesalahan saat mencoba meminta izin kontrol jarak jauh dari {{user}}!",
+        "remoteControlRequestMessage": "Apakah Anda akan mengizinkan {{user}} untuk mengontrol desktop Anda dari jarak jauh?",
+        "remoteControlShareScreenWarning": "Perhatikan bahwa jika Anda menekan \"Izinkan\" Anda akan membagikan layar Anda!",
+        "remoteControlStopMessage": "Sesi kontrol jarak jauh berakhir!",
+        "remoteControlTitle": "Kontrol desktop jarak jauh",
+        "remoteUserControls": "Kontrol pengguna jarak jauh dari {{username}}",
+        "removePassword": "Hapus $t(lockRoomPassword)",
+        "removeSharedVideoMsg": "Apakah Anda yakin ingin menghapus video yang Anda bagikan?",
+        "removeSharedVideoTitle": "Hapus video yang dibagikan",
+        "renameBreakoutRoomLabel": "Nama ruang",
+        "renameBreakoutRoomTitle": "Ubah nama ruang breakout",
+        "reservationError": "Kesalahan sistem reservasi",
+        "reservationErrorMsg": "Kode kesalahan: {{code}}, pesan: {{msg}}",
+        "retry": "Coba lagi",
+        "screenSharingAudio": "Bagikan audio",
+        "screenSharingFailed": "Ups! Ada yang salah, kami tidak dapat memulai berbagi layar!",
+        "screenSharingFailedTitle": "Berbagi layar gagal!",
+        "screenSharingPermissionDeniedError": "Ups! Ada yang salah dengan izin berbagi layar Anda. Harap muat ulang dan coba lagi.",
+        "searchInSalesforce": "Cari di Salesforce",
+        "searchResults": "Hasil pencarian ({{count}})",
+        "searchResultsDetailsError": "Ada masalah saat mengambil data pemilik.",
+        "searchResultsError": "Ada masalah saat mengambil data.",
+        "searchResultsNotFound": "Tidak ada hasil pencarian ditemukan.",
+        "searchResultsTryAgain": "Coba gunakan kata kunci alternatif.",
+        "sendPrivateMessage": "Anda baru saja menerima pesan pribadi. Apakah Anda bermaksud untuk membalas secara pribadi, atau Anda ingin mengirim pesan Anda ke grup?",
+        "sendPrivateMessageCancel": "Kirim ke grup",
+        "sendPrivateMessageOk": "Kirim secara pribadi",
+        "sendPrivateMessageTitle": "Kirim secara pribadi?",
+        "serviceUnavailable": "Layanan tidak tersedia",
+        "sessTerminated": "Panggilan berakhir",
+        "sessTerminatedReason": "Pertemuan telah berakhir",
+        "sessionRestarted": "Panggilan diulang karena masalah koneksi.",
+        "shareAudio": "Lanjutkan",
+        "shareAudioAltText": "untuk membagikan konten yang diinginkan, navigasikan ke \"Tab Browser\", pilih konten, aktifkan tanda centang \"bagikan audio\" dan klik tombol \"bagikan\"",
+        "shareAudioTitle": "Bagaimana cara berbagi audio",
+        "shareAudioWarningD1": "Anda perlu menghentikan berbagi layar sebelum berbagi audio Anda.",
+        "shareAudioWarningD2": "Anda perlu me-restart berbagi layar Anda dan memeriksa opsi \"bagikan audio\".",
+        "shareAudioWarningH1": "Jika Anda hanya ingin berbagi audio:",
+        "shareAudioWarningTitle": "Anda perlu menghentikan berbagi layar sebelum berbagi audio",
+        "shareMediaWarningGenericH2": "Jika Anda ingin berbagi layar dan audio Anda",
+        "shareScreenWarningD1": "Anda perlu menghentikan berbagi audio sebelum berbagi layar Anda.",
+        "shareScreenWarningD2": "Anda perlu menghentikan berbagi audio, memulai berbagi layar, dan memeriksa opsi \"bagikan audio\".",
+        "shareScreenWarningH1": "Jika Anda hanya ingin berbagi layar Anda:",
+        "shareScreenWarningTitle": "Anda perlu menghentikan berbagi audio sebelum berbagi layar Anda",
+        "shareVideoLinkError": "Harap berikan tautan video yang benar.",
+        "shareVideoTitle": "Bagikan video",
+        "shareYourScreen": "Bagikan layar Anda",
+        "shareYourScreenDisabled": "Berbagi layar dinonaktifkan.",
+        "sharedVideoDialogError": "Kesalahan: URL tidak valid",
+        "sharedVideoLinkPlaceholder": "Tautan YouTube atau tautan video langsung",
+        "show": "Tampilkan",
+        "start": "Mulai",
+        "startLiveStreaming": "Mulai streaming langsung",
+        "startRecording": "Mulai perekaman",
+        "startRemoteControlErrorMessage": "Terjadi kesalahan saat mencoba memulai sesi kontrol jarak jauh!",
+        "stopLiveStreaming": "Hentikan streaming langsung",
+        "stopRecording": "Hentikan perekaman",
+        "stopRecordingWarning": "Apakah Anda yakin ingin menghentikan perekaman?",
+        "stopStreamingWarning": "Apakah Anda yakin ingin menghentikan streaming langsung?",
+        "streamKey": "Kunci streaming langsung",
+        "thankYou": "Terima kasih telah menggunakan {{appName}}!",
+        "token": "token",
+        "tokenAuthFailed": "Maaf, Anda tidak diizinkan untuk bergabung dengan panggilan ini.",
+        "tokenAuthFailedReason": {
+            "audInvalid": "Nilai `aud` tidak valid. Harus `jitsi`.",
+            "contextNotFound": "Objek `context` hilang dari muatan.",
+            "expInvalid": "Nilai `exp` tidak valid.",
+            "featureInvalid": "Fitur tidak valid: {{feature}}, kemungkinan besar belum diimplementasikan.",
+            "featureValueInvalid": "Nilai tidak valid untuk fitur: {{feature}}.",
+            "featuresNotFound": "Objek `features` hilang dari muatan.",
+            "headerNotFound": "Tidak ada header.",
+            "issInvalid": "Nilai `iss` tidak valid. Harus `chat`.",
+            "kidMismatch": "ID Kunci (kid) tidak cocok dengan sub.",
+            "kidNotFound": "ID Kunci (kid) tidak ditemukan.",
+            "nbfFuture": "Nilai `nbf` berada di masa depan.",
+            "nbfInvalid": "Nilai `nbf` tidak valid.",
+            "payloadNotFound": "Muatan hilang.",
+            "tokenExpired": "Token kedaluwarsa."
+        },
+        "tokenAuthFailedTitle": "Autentikasi gagal",
+        "tokenAuthFailedWithReasons": "Maaf, Anda tidak diizinkan untuk bergabung dengan panggilan ini. Kemungkinan alasan: {{reason}}",
+        "tokenAuthUnsupported": "URL Token tidak didukung.",
+        "transcribing": "Transkripsi",
+        "unlockRoom": "Hapus $t(lockRoomPassword)",
+        "user": "Pengguna",
+        "userIdentifier": "Identifier pengguna",
+        "userPassword": "Kata sandi pengguna",
+        "verifyParticipantConfirm": "Mereka cocok",
+        "verifyParticipantDismiss": "Mereka tidak cocok",
+        "verifyParticipantQuestion": "EKSPERIMENTAL: Tanyakan pada peserta {{participantName}} apakah mereka melihat konten yang sama, dalam urutan yang sama.",
+        "verifyParticipantTitle": "Verifikasi pengguna",
+        "videoLink": "Tautan video",
+        "viewUpgradeOptions": "Lihat opsi peningkatan",
+        "viewUpgradeOptionsContent": "Untuk mendapatkan akses tanpa batas ke fitur premium seperti perekaman, transkripsi, Streaming RTMP & lebih, Anda perlu meningkatkan paket Anda.",
+        "viewUpgradeOptionsTitle": "Anda menemukan fitur premium!",
+        "whiteboardLimitContent": "Maaf, batas pengguna whiteboard bersama telah tercapai.",
+        "whiteboardLimitReference": "Untuk informasi lebih lanjut, silakan kunjungi",
+        "whiteboardLimitReferenceUrl": "situs web kami",
+        "whiteboardLimitTitle": "Penggunaan papan tulis terbatas",
+        "yourEntireScreen": "Seluruh layar Anda"
+    },
+    "documentSharing": {
+        "title": "Dokumen yang Dibagikan"
+    },
+    "e2ee": {
+        "labelToolTip": "Komunikasi Audio dan Video dalam panggilan ini dienkripsi end-to-end"
+    },
+    "embedMeeting": {
+        "title": "Sematkan pertemuan ini"
+    },
+    "feedback": {
+        "accessibilityLabel": {
+            "yourChoice": "Pilihan Anda: {{rating}}"
+        },
+        "average": "Rata-rata",
+        "bad": "Buruk",
+        "detailsLabel": "Beritahu kami lebih lanjut tentang itu.",
+        "good": "Baik",
+        "rateExperience": "Beri penilaian pengalaman pertemuan Anda",
+        "star": "Bintang",
+        "veryBad": "Sangat Buruk",
+        "veryGood": "Sangat Baik"
+    },
+    "filmstrip": {
+        "accessibilityLabel": {
+            "heading": "Thumbnail Video"
+        }
+    },
+    "giphy": {
+        "noResults": "Tidak ada hasil yang ditemukan :(",
+        "search": "Cari di GIPHY"
+    },
+    "incomingCall": {
+        "answer": "Jawab",
+        "audioCallTitle": "Panggilan Masuk",
+        "decline": "Tolak",
+        "productLabel": "dari Jitsi Meet",
+        "videoCallTitle": "Panggilan Video Masuk"
+    },
+    "info": {
+        "accessibilityLabel": "Tampilkan info",
+        "addPassword": "Tambahkan $t(lockRoomPassword)",
+        "cancelPassword": "Batalkan $t(lockRoomPassword)",
+        "conferenceURL": "Tautan:",
+        "copyNumber": "Salin nomor",
+        "country": "Negara",
+        "dialANumber": "Untuk bergabung dengan pertemuan Anda, tekan salah satu nomor ini dan masukkan pin.",
+        "dialInConferenceID": "PIN:",
+        "dialInNotSupported": "Maaf, pemanggilan saat ini tidak didukung.",
+        "dialInNumber": "Dial-in:",
+        "dialInSummaryError": "Kesalahan dalam mengambil info dial-in sekarang. Silakan coba lagi nanti.",
+        "dialInTollFree": "Bebas Pulsa",
+        "genericError": "Whups, ada yang salah.",
+        "inviteLiveStream": "Untuk melihat streaming langsung pertemuan ini, klik tautan ini: {{url}}",
+        "invitePhone": "Untuk bergabung melalui telepon, ketuk ini: {{number}},,{{conferenceID}}#\n",
+        "invitePhoneAlternatives": "Mencari nomor panggilan lain?\nLihat nomor panggilan pertemuan: {{url}}\n\n\nJika juga melakukan panggilan melalui telepon ruangan, bergabung tanpa menghubungkan ke audio: {{silentUrl}}",
+        "inviteSipEndpoint": "Untuk bergabung menggunakan alamat SIP, masukkan ini: {{sipUri}}",
+        "inviteTextiOSInviteUrl": "Klik tautan berikut untuk bergabung: {{inviteUrl}}.",
+        "inviteTextiOSJoinSilent": "Jika Anda melakukan panggilan melalui telepon ruangan, gunakan tautan ini untuk bergabung tanpa menghubungkan ke audio: {{silentUrl}}.",
+        "inviteTextiOSPersonal": "{{name}} mengundang Anda ke pertemuan.",
+        "inviteTextiOSPhone": "Untuk bergabung melalui telepon, gunakan nomor ini: {{number}},,{{conferenceID}}#. Jika Anda mencari nomor lain, ini daftar lengkapnya: {{didUrl}}.",
+        "inviteURLFirstPartGeneral": "Anda diundang untuk bergabung dalam pertemuan.",
+        "inviteURLFirstPartPersonal": "{{name}} mengundang Anda ke pertemuan.\n",
+        "inviteURLSecondPart": "\nBergabunglah dalam pertemuan:\n{{url}}\n",
+        "label": "Info Dial-in",
+        "liveStreamURL": "Streaming langsung:",
+        "moreNumbers": "Lebih banyak nomor",
+        "noNumbers": "Tidak ada nomor dial-in.",
+        "noPassword": "Tidak ada",
+        "noRoom": "Tidak ada ruangan yang ditentukan untuk dial-in.",
+        "noWhiteboard": "Tidak dapat memuat papan tulis.",
+        "numbers": "Nomor-nomor Dial-in",
+        "password": "$t(lockRoomPasswordUppercase): ",
+        "reachedLimit": "Anda telah mencapai batas paket Anda.",
+        "sip": "Alamat SIP",
+        "sipAudioOnly": "Alamat audio SIP saja",
+        "title": "Bagikan",
+        "tooltip": "Bagikan tautan dan info dial-in untuk pertemuan ini",
+        "upgradeOptions": "Silakan periksa opsi peningkatan di",
+        "whiteboardError": "Kesalahan dalam memuat papan tulis. Silakan coba lagi nanti."
+    },
+    "inlineDialogFailure": {
+        "msg": "Kami sedikit tersandung.",
+        "retry": "Coba lagi",
+        "support": "Dukungan",
+        "supportMsg": "Jika ini terus terjadi, hubungi"
+    },
+    "inviteDialog": {
+        "alertText": "Gagal mengundang beberapa peserta.",
+        "header": "Undang",
+        "searchCallOnlyPlaceholder": "Masukkan nomor telepon",
+        "searchPeopleOnlyPlaceholder": "Cari peserta",
+        "searchPlaceholder": "Peserta atau nomor telepon",
+        "send": "Kirim"
+    },
+    "jitsiHome": "{{logo}} Logo, tautan ke Beranda",
+    "keyboardShortcuts": {
+        "focusLocal": "Fokus pada video Anda",
+        "focusRemote": "Fokus pada video orang lain",
+        "fullScreen": "Lihat atau keluar dari layar penuh",
+        "giphyMenu": "Beralih menu GIPHY",
+        "keyboardShortcuts": "Pintasan keyboard",
+        "localRecording": "Tampilkan atau sembunyikan kontrol perekaman lokal",
+        "mute": "Bisukan atau aktifkan mikrofon Anda",
+        "pushToTalk": "Tekan untuk berbicara",
+        "raiseHand": "Angkat atau turunkan tangan Anda",
+        "showSpeakerStats": "Tampilkan statistik partisipan",
+        "toggleChat": "Buka atau tutup obrolan",
+        "toggleFilmstrip": "Tampilkan atau sembunyikan thumbnail video",
+        "toggleParticipantsPane": "Tampilkan atau sembunyikan panel partisipan",
+        "toggleScreensharing": "Beralih antara berbagi kamera dan layar",
+        "toggleShortcuts": "Tampilkan atau sembunyikan pintasan keyboard",
+        "videoMute": "Mulai atau hentikan kamera Anda"
+    },
+    "largeVideo": {
+        "screenIsShared": "Anda sedang membagikan layar Anda",
+        "showMeWhatImSharing": "Tunjukkan apa yang saya bagikan"
+    },
+    "liveStreaming": {
+        "busy": "Kami sedang berupaya untuk membebaskan sumber daya streaming. Silakan coba lagi dalam beberapa menit.",
+        "busyTitle": "Semua streamer saat ini sibuk",
+        "changeSignIn": "Ganti akun.",
+        "choose": "Pilih siaran langsung",
+        "chooseCTA": "Pilih opsi streaming. Anda saat ini masuk sebagai {{email}}.",
+        "enterStreamKey": "Masukkan kunci siaran langsung YouTube Anda di sini.",
+        "error": "Gagal Siaran Langsung. Silakan coba lagi.",
+        "errorAPI": "Terjadi kesalahan saat mengakses siaran YouTube Anda. Silakan coba masuk lagi.",
+        "errorLiveStreamNotEnabled": "Siaran Langsung tidak diaktifkan pada {{email}}. Harap aktifkan siaran langsung atau masuk ke akun dengan siaran langsung diaktifkan.",
+        "expandedOff": "Siaran Langsung telah berhenti",
+        "expandedOn": "Pertemuan saat ini sedang siaran langsung",
+        "expandedPending": "Siaran Langsung sedang dimulai...",
+        "failedToStart": "Gagal memulai Siaran Langsung",
+        "getStreamKeyManually": "Kami tidak dapat mengambil siaran langsung apa pun. Coba dapatkan kunci siaran langsung Anda dari YouTube.",
+        "googlePrivacyPolicy": "Kebijakan Privasi Google",
+        "inProgress": "Perekaman atau siaran langsung sedang berlangsung",
+        "invalidStreamKey": "Kunci siaran langsung mungkin salah.",
+        "limitNotificationDescriptionNative": "Pemutaran streaming Anda akan dibatasi menjadi {{limit}} menit. Untuk streaming tanpa batas, coba {{app}}.",
+        "limitNotificationDescriptionWeb": "Karena permintaan yang tinggi, streaming Anda akan dibatasi menjadi {{limit}} menit. Untuk streaming tanpa batas, coba <a href={{url}} rel='noopener noreferrer' target='_blank'>{{app}}</a>.",
+        "off": "Siaran Langsung berhenti",
+        "offBy": "{{name}} menghentikan siaran langsung",
+        "on": "Siaran Langsung dimulai",
+        "onBy": "{{name}} memulai siaran langsung",
+        "pending": "Memulai Live Stream...",
+        "serviceName": "Layanan Siaran Langsung",
+        "sessionAlreadyActive": "Sesi ini sudah direkam atau siaran langsung.",
+        "signIn": "Masuk dengan Google",
+        "signInCTA": "Masuk atau masukkan kunci siaran langsung Anda dari YouTube.",
+        "signOut": "Keluar",
+        "signedInAs": "Anda saat ini masuk sebagai:",
+        "start": "Mulai siaran langsung",
+        "streamIdHelp": "Apa ini?",
+        "title": "Live Stream",
+        "unavailableTitle": "Siaran Langsung tidak tersedia",
+        "youtubeTerms": "Ketentuan Layanan YouTube"
+    },
+    "lobby": {
+        "backToKnockModeButton": "Meminta untuk bergabung",
+        "chat": "Obrolan",
+        "dialogTitle": "Mode Lobi",
+        "disableDialogContent": "Mode Lobi saat ini diaktifkan. Fitur ini memastikan bahwa peserta yang tidak diinginkan tidak dapat bergabung dengan pertemuan Anda. Apakah Anda ingin menonaktifkannya?",
+        "disableDialogSubmit": "Nonaktifkan",
+        "emailField": "Masukkan alamat email Anda",
+        "enableDialogPasswordField": "Atur kata sandi (opsional)",
+        "enableDialogSubmit": "Aktifkan",
+        "enableDialogText": "Mode Lobi memungkinkan Anda melindungi pertemuan Anda dengan hanya memungkinkan orang masuk setelah persetujuan formal oleh moderator.",
+        "enterPasswordButton": "Masukkan kata sandi pertemuan",
+        "enterPasswordTitle": "Masukkan kata sandi untuk bergabung dengan pertemuan",
+        "errorMissingPassword": "Harap masukkan kata sandi pertemuan",
+        "invalidPassword": "Kata sandi tidak valid",
+        "joinRejectedMessage": "Permintaan bergabung Anda ditolak oleh moderator.",
+        "joinRejectedTitle": "Permintaan bergabung ditolak.",
+        "joinTitle": "Bergabung dengan Pertemuan",
+        "joinWithPasswordMessage": "Mencoba bergabung dengan kata sandi, harap tunggu...",
+        "joiningMessage": "Anda akan bergabung dengan pertemuan segera setelah seseorang menerima permintaan Anda",
+        "joiningTitle": "Meminta untuk bergabung dengan pertemuan...",
+        "joiningWithPasswordTitle": "Bergabung dengan kata sandi...",
+        "knockButton": "Meminta untuk Bergabung",
+        "knockTitle": "Seseorang ingin bergabung dengan pertemuan",
+        "knockingParticipantList": "Daftar peserta yang meminta bergabung",
+        "lobbyChatStartedNotification": "{{moderator}} memulai obrolan lobi dengan {{attendee}}",
+        "lobbyChatStartedTitle": "{{moderator}} telah memulai obrolan lobi dengan Anda.",
+        "lobbyClosed": "Ruang lobi telah ditutup.",
+        "nameField": "Masukkan nama Anda",
+        "notificationLobbyAccessDenied": "{{targetParticipantName}} telah ditolak untuk bergabung oleh {{originParticipantName}}",
+        "notificationLobbyAccessGranted": "{{targetParticipantName}} telah diizinkan untuk bergabung oleh {{originParticipantName}}",
+        "notificationLobbyDisabled": "Lobi telah dinonaktifkan oleh {{originParticipantName}}",
+        "notificationLobbyEnabled": "Lobi telah diaktifkan oleh {{originParticipantName}}",
+        "notificationTitle": "Lobi",
+        "passwordJoinButton": "Gabung",
+        "title": "Lobi",
+        "toggleLabel": "Aktifkan lobi"
+    },
+    "localRecording": {
+        "clientState": {
+            "off": "Mati",
+            "on": "Hidup",
+            "unknown": "Tidak diketahui"
+        },
+        "dialogTitle": "Kontrol Perekaman Lokal",
+        "duration": "Durasi",
+        "durationNA": "N/A",
+        "encoding": "Pengodean",
+        "label": "Perekaman Lokal",
+        "labelToolTip": "Perekaman lokal sedang diaktifkan",
+        "localRecording": "Perekaman Lokal",
+        "me": "Saya",
+        "messages": {
+            "engaged": "Perekaman lokal diaktifkan.",
+            "finished": "Sesi perekaman {{token}} selesai. Silakan kirim file yang direkam ke moderator.",
+            "finishedModerator": "Sesi perekaman {{token}} selesai. Perekaman trek lokal telah disimpan. Mohon minta peserta lain untuk mengirimkan perekaman mereka.",
+            "notModerator": "Anda bukan moderator. Anda tidak dapat memulai atau menghentikan perekaman lokal."
+        },
+        "moderator": "Moderator",
+        "no": "Tidak",
+        "participant": "Peserta",
+        "participantStats": "Statistik Peserta",
+        "selectTabTitle": "🎥 Silakan pilih tab ini untuk perekaman",
+        "sessionToken": "Token Sesi",
+        "start": "Mulai Perekaman",
+        "stop": "Hentikan Perekaman",
+        "stopping": "Menghentikan Perekaman",
+        "wait": "Harap tunggu sementara kami menyimpan rekaman Anda",
+        "yes": "Ya"
+    },
+    "lockRoomPassword": "kata sandi",
+    "lockRoomPasswordUppercase": "Kata Sandi",
+    "lonelyMeetingExperience": {
+        "button": "Undang orang lain",
+        "youAreAlone": "Anda satu-satunya di pertemuan ini"
+    },
+    "me": "saya",
+    "notify": {
+        "OldElectronAPPTitle": "Kerentanan keamanan!",
+        "allowAction": "Izinkan",
+        "allowedUnmute": "Anda dapat mengaktifkan mikrofon Anda, memulai kamera Anda, atau berbagi layar Anda.",
+        "audioUnmuteBlockedDescription": "Operasi membuka mikrofon sementara diblokir karena batasan sistem.",
+        "audioUnmuteBlockedTitle": "Pembukaan mikrofon diblokir!",
+        "chatMessages": "Pesan obrolan",
+        "connectedOneMember": "{{name}} bergabung dengan pertemuan",
+        "connectedThreePlusMembers": "{{name}} dan banyak lainnya bergabung dengan pertemuan",
+        "connectedTwoMembers": "{{first}} dan {{second}} bergabung dengan pertemuan",
+        "dataChannelClosed": "Kualitas video mungkin terganggu",
+        "dataChannelClosedDescription": "Saluran jembatan tidak aktif dan karenanya kualitas video mungkin terbatas pada pengaturan terendahnya.",
+        "dataChannelClosedDescriptionWithAudio": "Saluran jembatan tidak aktif dan karenanya gangguan audio dan video mungkin terjadi.",
+        "dataChannelClosedWithAudio": "Kualitas audio dan video mungkin terganggu",
+        "disabledIframe": "Embedding hanya ditujukan untuk tujuan demonstrasi, jadi panggilan ini akan terputus dalam {{timeout}} menit.",
+        "disabledIframeSecondary": "Embedding {{domain}} hanya ditujukan untuk tujuan demonstrasi, jadi panggilan ini akan terputus dalam {{timeout}} menit. Harap gunakan <a href='{{jaasDomain}}' rel='noopener noreferrer' target='_blank'>Jitsi as a Service</a> untuk embedding produksi!",
+        "disconnected": "terputus",
+        "displayNotifications": "Tampilkan notifikasi untuk",
+        "dontRemindMe": "Jangan ingatkan saya",
+        "focus": "Fokus konferensi",
+        "focusFail": "{{component}} tidak tersedia - coba lagi dalam {{ms}} detik",
+        "gifsMenu": "GIPHY",
+        "groupTitle": "Pemberitahuan",
+        "hostAskedUnmute": "Moderator ingin Anda berbicara",
+        "invitedOneMember": "{{name}} telah diundang",
+        "invitedThreePlusMembers": "{{name}} dan {{count}} lainnya telah diundang",
+        "invitedTwoMembers": "{{first}} dan {{second}} telah diundang",
+        "joinMeeting": "Gabung",
+        "kickParticipant": "{{kicked}} telah dikeluarkan oleh {{kicker}}",
+        "leftOneMember": "{{name}} meninggalkan pertemuan",
+        "leftThreePlusMembers": "{{name}} dan banyak lainnya meninggalkan pertemuan",
+        "leftTwoMembers": "{{first}} dan {{second}} meninggalkan pertemuan",
+        "linkToSalesforce": "Tautan ke Salesforce",
+        "linkToSalesforceDescription": "Anda dapat mengaitkan ringkasan pertemuan ke objek Salesforce.",
+        "linkToSalesforceError": "Gagal mengaitkan pertemuan ke Salesforce",
+        "linkToSalesforceKey": "Tautkan pertemuan ini",
+        "linkToSalesforceProgress": "Mengaitkan pertemuan ke Salesforce...",
+        "linkToSalesforceSuccess": "Pertemuan telah dihubungkan ke Salesforce",
+        "localRecordingStarted": "{{name}} telah memulai perekaman lokal.",
+        "localRecordingStopped": "{{name}} telah menghentikan perekaman lokal.",
+        "me": "Saya",
+        "moderationInEffectCSDescription": "Silakan angkat tangan jika Anda ingin membagikan layar Anda.",
+        "moderationInEffectCSTitle": "Berbagi layar diblokir oleh moderator",
+        "moderationInEffectDescription": "Silakan angkat tangan jika Anda ingin berbicara.",
+        "moderationInEffectTitle": "Mikrofon Anda dibisukan oleh moderator",
+        "moderationInEffectVideoDescription": "Silakan angkat tangan jika Anda ingin memulai kamera Anda.",
+        "moderationInEffectVideoTitle": "Kamera Anda diblokir oleh moderator",
+        "moderationRequestFromModerator": "Host ingin Anda membuka suara",
+        "moderationRequestFromParticipant": "Ingin berbicara",
+        "moderationStartedTitle": "Moderasi dimulai",
+        "moderationStoppedTitle": "Moderasi dihentikan",
+        "moderationToggleDescription": "oleh {{participantDisplayName}}",
+        "moderator": "Anda sekarang menjadi moderator",
+        "muted": "Anda telah memulai percakapan dalam keadaan dibisukan.",
+        "mutedRemotelyDescription": "Anda selalu dapat membuka suara saat Anda siap berbicara. Bisukan kembali saat selesai untuk menjaga kebisingan dari pertemuan.",
+        "mutedRemotelyTitle": "Anda telah dibisukan oleh {{participantDisplayName}}",
+        "mutedTitle": "Anda dibisukan!",
+        "newDeviceAction": "Gunakan",
+        "newDeviceAudioTitle": "Perangkat audio baru terdeteksi",
+        "newDeviceCameraTitle": "Kamera baru terdeteksi",
+        "noiseSuppressionDesktopAudioDescription": "Pengurangan kebisingan tidak dapat diaktifkan saat berbagi audio desktop, harap nonaktifkan dan coba lagi.",
+        "noiseSuppressionFailedTitle": "Gagal memulai pengurangan kebisingan",
+        "noiseSuppressionStereoDescription": "Pengurangan kebisingan audio stereo saat ini tidak didukung.",
+        "oldElectronClientDescription1": "Anda sepertinya menggunakan versi lama dari klien Jitsi Meet yang memiliki kerentanan keamanan yang diketahui. Pastikan Anda memperbarui ke ",
+        "oldElectronClientDescription2": "build terbaru",
+        "oldElectronClientDescription3": " sekarang!",
+        "participantWantsToJoin": "Ingin bergabung dengan pertemuan",
+        "participantsWantToJoin": "Ingin bergabung dengan pertemuan",
+        "passwordRemovedRemotely": "$t(lockRoomPasswordUppercase) dihapus oleh peserta lain",
+        "passwordSetRemotely": "$t(lockRoomPasswordUppercase) diatur oleh peserta lain",
+        "raiseHandAction": "Angkat tangan",
+        "raisedHand": "Ingin berbicara.",
+        "raisedHands": "{{participantName}} dan {{raisedHands}} orang lain",
+        "reactionSounds": "Nonaktifkan suara",
+        "reactionSoundsForAll": "Nonaktifkan suara untuk semua",
+        "screenShareNoAudio": "Kotak berbagi audio tidak dicentang di layar pemilihan.",
+        "screenShareNoAudioTitle": "Tidak dapat berbagi audio sistem!",
+        "screenSharingAudioOnlyDescription": "Harap dicatat bahwa dengan membagikan layar Anda, Anda memengaruhi mode \"Kinerja terbaik\" dan Anda akan menggunakan lebih banyak bandwidth.",
+        "screenSharingAudioOnlyTitle": "Mode \"Kinerja terbaik\"",
+        "selfViewTitle": "Anda selalu dapat menampilkan kembali tampilan diri dari pengaturan",
+        "somebody": "Seseorang",
+        "startSilentDescription": "Gabung kembali dengan pertemuan untuk mengaktifkan audio",
+        "startSilentTitle": "Anda bergabung tanpa output audio!",
+        "suboptimalBrowserWarning": "Kami khawatir pengalaman pertemuan Anda tidak akan begitu bagus di sini. Kami mencari cara untuk memperbaiki ini, tetapi sampai saat itu silakan coba menggunakan salah satu <a href='{{recommendedBrowserPageLink}}' target='_blank'>browser yang didukung sepenuhnya</a>.",
+        "suboptimalExperienceTitle": "Peringatan Browser",
+        "suggestRecordingAction": "Mulai",
+        "suggestRecordingDescription": "Apakah Anda ingin memulai perekaman?",
+        "suggestRecordingTitle": "Rekam pertemuan ini",
+        "unmute": "Hidupkan suara",
+        "videoMutedRemotelyDescription": "Anda selalu dapat menghidupkannya kembali.",
+        "videoMutedRemotelyTitle": "Video Anda telah dimatikan oleh {{participantDisplayName}}",
+        "videoUnmuteBlockedDescription": "Operasi membuka kamera dan berbagi desktop sementara diblokir karena batasan sistem.",
+        "videoUnmuteBlockedTitle": "Pembukaan kamera dan berbagi desktop diblokir!",
+        "viewLobby": "Tampilkan lobi",
+        "viewVisitors": "Tampilkan pengunjung",
+        "waitingParticipants": "{{waitingParticipants}} orang",
+        "whiteboardLimitDescription": "Simpan progress Anda, karena batas pengguna akan segera tercapai dan papan tulis akan ditutup.",
+        "whiteboardLimitTitle": "Penggunaan papan tulis"
+    },
+    "participantsPane": {
+        "actions": {
+            "admit": "Menerima",
+            "admitAll": "Terima semua",
+            "allow": "Izinkan peserta untuk:",
+            "allowVideo": "Izinkan video",
+            "askUnmute": "Minta untuk unmute",
+            "audioModeration": "Unmute sendiri",
+            "blockEveryoneMicCamera": "Blokir mic dan kamera semua orang",
+            "breakoutRooms": "Ruangan breakout",
+            "invite": "Undang Seseorang",
+            "moreModerationActions": "Opsi moderasi lebih lanjut",
+            "moreModerationControls": "Kontrol moderasi lebih lanjut",
+            "moreParticipantOptions": "Opsi peserta lebih lanjut",
+            "mute": "Bisukan",
+            "muteAll": "Bisukan semua",
+            "muteEveryoneElse": "Bisukan semua orang lain",
+            "reject": "Tolak",
+            "stopEveryonesVideo": "Hentikan video semua orang",
+            "stopVideo": "Hentikan video",
+            "unblockEveryoneMicCamera": "Buka blokir mic dan kamera semua orang",
+            "videoModeration": "Mulai video mereka"
+        },
+        "close": "Tutup",
+        "headings": {
+            "lobby": "Lobi ({{count}})",
+            "participantsList": "Peserta pertemuan ({{count}})",
+            "visitorRequests": " (permintaan {{count}})",
+            "visitors": "Pengunjung {{count}}",
+            "waitingLobby": "Menunggu di lobi ({{count}})"
+        },
+        "search": "Cari peserta",
+        "title": "Peserta"
+    },
+    "passwordDigitsOnly": "Hingga {{number}} digit",
+    "passwordSetRemotely": "Diatur oleh peserta lain",
+    "pinParticipant": "{{participantName}} - Pin",
+    "pinnedParticipant": "Peserta yang di-pin",
+    "polls": {
+        "answer": {
+            "edit": "Edit",
+            "send": "Kirim",
+            "skip": "Lewati",
+            "submit": "Kirim"
+        },
+        "by": "Oleh {{ name }}",
+        "create": {
+            "addOption": "Tambahkan opsi",
+            "answerPlaceholder": "Opsi {{index}}",
+            "cancel": "Batal",
+            "create": "Buat jajak pendapat",
+            "pollOption": "Opsi jajak pendapat {{index}}",
+            "pollQuestion": "Pertanyaan jajak pendapat",
+            "questionPlaceholder": "Ajukan pertanyaan",
+            "removeOption": "Hapus opsi",
+            "save": "Simpan",
+            "send": "Kirim"
+        },
+        "errors": {
+            "notUniqueOption": "Opsi harus unik"
+        },
+        "notification": {
+            "description": "Buka tab jajak pendapat untuk memberikan suara",
+            "title": "Polling baru ditambahkan ke pertemuan ini"
+        },
+        "results": {
+            "changeVote": "Ubah suara",
+            "empty": "Tidak ada jajak pendapat dalam pertemuan ini. Mulai jajak pendapat di sini!",
+            "hideDetailedResults": "Sembunyikan detail",
+            "showDetailedResults": "Tampilkan detail",
+            "vote": "Suara"
+        }
+    },
+    "poweredby": "dipersembahkan oleh",
+    "prejoin": {
+        "audioAndVideoError": "Kesalahan audio dan video:",
+        "audioDeviceProblem": "Ada masalah dengan perangkat audio Anda",
+        "audioOnlyError": "Kesalahan audio:",
+        "audioTrackError": "Tidak bisa membuat trek audio.",
+        "callMe": "Hubungi saya",
+        "callMeAtNumber": "Hubungi saya di nomor ini:",
+        "calling": "Menelepon",
+        "configuringDevices": "Mengkonfigurasi perangkat...",
+        "connectedWithAudioQ": "Anda terhubung dengan audio?",
+        "connection": {
+            "good": "Koneksi internet Anda terlihat baik!",
+            "nonOptimal": "Koneksi internet Anda tidak optimal",
+            "poor": "Anda memiliki koneksi internet yang buruk"
+        },
+        "connectionDetails": {
+            "audioClipping": "Kami mengharapkan audio Anda dipotong.",
+            "audioHighQuality": "Kami mengharapkan audio Anda memiliki kualitas yang sangat baik.",
+            "audioLowNoVideo": "Kami mengharapkan kualitas audio Anda rendah dan tidak ada video.",
+            "goodQuality": "Hebat! Kualitas media Anda akan sangat baik.",
+            "noMediaConnectivity": "Kami tidak dapat menemukan cara untuk menetapkan konektivitas media untuk tes ini. Ini biasanya disebabkan oleh firewall atau NAT.",
+            "noVideo": "Kami mengharapkan bahwa video Anda akan buruk.",
+            "undetectable": "Jika Anda masih tidak dapat melakukan panggilan di browser, kami sarankan Anda memastikan speaker, mikrofon, dan kamera Anda sudah diatur dengan benar, bahwa Anda telah memberikan izin browser Anda untuk menggunakan mikrofon dan kamera, dan bahwa versi browser Anda terbaru. Jika Anda masih mengalami masalah saat menelepon, Anda harus menghubungi pengembang aplikasi web.",
+            "veryPoorConnection": "Kami mengharapkan kualitas panggilan Anda benar-benar buruk.",
+            "videoFreezing": "Kami mengharapkan bahwa video Anda akan membeku, menjadi hitam, dan berpixel.",
+            "videoHighQuality": "Kami mengharapkan video Anda memiliki kualitas yang baik.",
+            "videoLowQuality": "Kami mengharapkan bahwa video Anda akan memiliki kualitas rendah dalam hal frame rate dan resolusi.",
+            "videoTearing": "Kami mengharapkan bahwa video Anda akan berpixel atau memiliki artefak visual."
+        },
+        "copyAndShare": "Salin & bagikan tautan pertemuan",
+        "dialInMeeting": "Dial ke pertemuan",
+        "dialInPin": "Dial ke pertemuan dan masukkan kode PIN:",
+        "dialing": "Menghubungi",
+        "doNotShow": "Jangan tampilkan layar ini lagi",
+        "errorDialOut": "Tidak bisa melakukan panggilan keluar",
+        "errorDialOutDisconnected": "Tidak bisa melakukan panggilan keluar. Terputus",
+        "errorDialOutFailed": "Tidak bisa melakukan panggilan keluar. Panggilan gagal",
+        "errorDialOutStatus": "Error mendapatkan status panggilan keluar",
+        "errorMissingName": "Silakan masukkan nama Anda untuk bergabung dengan pertemuan",
+        "errorNoPermissions": "Anda perlu mengaktifkan akses mikrofon dan kamera",
+        "errorStatusCode": "Error saat menelepon keluar, kode status: {{status}}",
+        "errorValidation": "Validasi nomor gagal",
+        "iWantToDialIn": "Saya ingin menelepon",
+        "initiated": "Panggilan diinisialisasi",
+        "joinAudioByPhone": "Bergabung dengan audio telepon",
+        "joinMeeting": "Gabung pertemuan",
+        "joinMeetingInLowBandwidthMode": "Bergabung dalam mode bandwidth rendah",
+        "joinWithoutAudio": "Bergabung tanpa audio",
+        "keyboardShortcuts": "Aktifkan Pintasan Keyboard",
+        "linkCopied": "Tautan disalin ke papan klip",
+        "lookGood": "Semuanya berfungsi dengan baik",
+        "or": "atau",
+        "premeeting": "Pra-pertemuan",
+        "proceedAnyway": "Lanjutkan saja",
+        "recordingWarning": "Peserta lain mungkin sedang merekam panggilan ini",
+        "screenSharingError": "Kesalahan berbagi layar:",
+        "showScreen": "Aktifkan layar pra pertemuan",
+        "startWithPhone": "Mulai dengan audio ponsel",
+        "unsafeRoomConsent": "Saya memahami risikonya, saya ingin bergabung dengan pertemuan",
+        "videoOnlyError": "Kesalahan video:",
+        "videoTrackError": "Tidak bisa membuat trek video.",
+        "viewAllNumbers": "lihat semua nomor"
+    },
+    "presenceStatus": {
+        "busy": "Sibuk",
+        "calling": "Menelepon...",
+        "connected": "Terhubung",
+        "connecting": "Menghubungkan...",
+        "connecting2": "Menghubungkan*...",
+        "disconnected": "Terputus",
+        "expired": "Kedaluwarsa",
+        "ignored": "Diabaikan",
+        "initializingCall": "Memulai Panggilan...",
+        "invited": "Diundang",
+        "rejected": "Ditolak",
+        "ringing": "Berdering..."
+    },
+    "profile": {
+        "avatar": "avatar",
+        "setDisplayNameLabel": "Nama",
+        "setEmailInput": "Masukkan email",
+        "setEmailLabel": "Email Gravatar",
+        "title": "Profil"
+    },
+    "raisedHand": "Ingin berbicara",
+    "raisedHandsLabel": "Jumlah tangan yang diangkat",
+    "record": {
+        "already": {
+            "linked": "Pertemuan sudah terhubung ke objek Salesforce ini."
+        },
+        "type": {
+            "account": "Akun",
+            "contact": "Kontak",
+            "lead": "Lead",
+            "opportunity": "Peluang",
+            "owner": "Pemilik"
+        }
+    },
+    "recording": {
+        "authDropboxText": "Unggah ke Dropbox",
+        "availableSpace": "Ruang yang tersedia: {{spaceLeft}} MB (sekitar {{duration}} menit rekaman)",
+        "beta": "BETA",
+        "busy": "Kami sedang berupaya membebaskan sumber daya rekaman. Harap coba lagi dalam beberapa menit.",
+        "busyTitle": "Semua rekorder sedang sibuk saat ini",
+        "copyLink": "Salin Tautan",
+        "error": "Rekaman gagal. Harap coba lagi.",
+        "errorFetchingLink": "Gagal mengambil tautan rekaman.",
+        "expandedOff": "Rekaman telah berhenti",
+        "expandedOn": "Pertemuan saat ini sedang direkam",
+        "expandedPending": "Rekaman sedang dimulai...",
+        "failedToStart": "Gagal memulai rekaman",
+        "fileSharingdescription": "Bagikan tautan rekaman dengan peserta pertemuan",
+        "highlight": "Sorot",
+        "highlightMoment": "Sorot momen",
+        "highlightMomentDisabled": "Anda dapat menyorot momen ketika rekaman dimulai",
+        "highlightMomentSuccess": "Momen disorot",
+        "highlightMomentSucessDescription": "Momen yang Anda sorot akan ditambahkan ke ringkasan pertemuan.",
+        "inProgress": "Rekaman atau siaran langsung sedang berlangsung",
+        "limitNotificationDescriptionNative": "Karena permintaan tinggi, rekaman Anda akan dibatasi menjadi {{limit}} menit. Untuk rekaman tanpa batas, coba <3>{{app}}</3>.",
+        "limitNotificationDescriptionWeb": "Karena permintaan tinggi, rekaman Anda akan dibatasi menjadi {{limit}} menit. Untuk rekaman tanpa batas, coba <a href={{url}} rel='noopener noreferrer' target='_blank'>{{app}}</a>.",
+        "linkGenerated": "Kami telah menghasilkan tautan untuk rekaman Anda.",
+        "localRecordingNoNotificationWarning": "Rekaman tidak akan diumumkan kepada peserta lain. Anda perlu memberi tahu mereka bahwa pertemuan direkam.",
+        "localRecordingNoVideo": "Video tidak direkam",
+        "localRecordingStartWarning": "Pastikan Anda menghentikan rekaman sebelum keluar dari pertemuan untuk menyimpannya.",
+        "localRecordingStartWarningTitle": "Hentikan rekaman untuk menyimpannya",
+        "localRecordingVideoStop": "Menghentikan video Anda juga akan menghentikan rekaman lokal. Apakah Anda yakin ingin melanjutkan?",
+        "localRecordingVideoWarning": "Untuk merekam video Anda, Anda harus mengaktifkannya saat memulai rekaman",
+        "localRecordingWarning": "Pastikan Anda memilih tab saat ini untuk menggunakan video dan audio yang tepat. Rekaman saat ini dibatasi hingga 1GB, sekitar 100 menit.",
+        "loggedIn": "Masuk sebagai {{userName}}",
+        "noMicPermission": "Trek mikrofon tidak dapat dibuat. Harap izinkan penggunaan mikrofon.",
+        "noStreams": "Tidak ada aliran audio atau video yang terdeteksi.",
+        "off": "Rekaman berhenti",
+        "offBy": "{{name}} menghentikan rekaman",
+        "on": "Rekaman dimulai",
+        "onBy": "{{name}} memulai rekaman",
+        "onlyRecordSelf": "Rekam hanya aliran audio dan video saya",
+        "pending": "Persiapan untuk merekam pertemuan...",
+        "recordAudioAndVideo": "Rekam audio dan video",
+        "recordTranscription": "Rekam transkripsi",
+        "saveLocalRecording": "Simpan file rekaman secara lokal (Beta)",
+        "serviceDescription": "Rekaman Anda akan disimpan oleh layanan rekaman",
+        "serviceDescriptionCloud": "Rekaman cloud",
+        "serviceDescriptionCloudInfo": "Pertemuan yang direkam secara otomatis dihapus 24 jam setelah waktu rekaman mereka.",
+        "serviceName": "Layanan rekaman",
+        "sessionAlreadyActive": "Sesi ini sudah direkam atau disiarkan langsung.",
+        "showAdvancedOptions": "Opsi Lanjutan",
+        "signIn": "Masuk",
+        "signOut": "Keluar",
+        "surfaceError": "Harap pilih tab saat ini.",
+        "title": "Rekaman",
+        "unavailable": "Ups! {{serviceName}} saat ini tidak tersedia. Kami sedang berupaya menyelesaikan masalah ini. Harap coba lagi nanti.",
+        "unavailableTitle": "Rekaman tidak tersedia",
+        "uploadToCloud": "Unggah ke cloud"
+    },
+    "screenshareDisplayName": "Layar {{name}}",
+    "sectionList": {
+        "pullToRefresh": "Tarik untuk menyegarkan"
+    },
+    "security": {
+        "about": "Anda dapat menambahkan {{lockRoomPassword}} ke pertemuan Anda. Peserta perlu memberikan {{lockRoomPassword}} sebelum mereka diizinkan bergabung dengan pertemuan.",
+        "aboutReadOnly": "Peserta moderator dapat menambahkan {{lockRoomPassword}} ke pertemuan. Peserta perlu memberikan {{lockRoomPassword}} sebelum mereka diizinkan bergabung dengan pertemuan.",
+        "insecureRoomNameWarningNative": "Nama ruangan tidak aman. Peserta yang tidak diinginkan dapat bergabung dengan pertemuan Anda. {{recommendAction}} Pelajari lebih lanjut tentang mengamankan pertemuan Anda",
+        "insecureRoomNameWarningWeb": "Nama ruangan tidak aman. Peserta yang tidak diinginkan dapat bergabung dengan pertemuan Anda. {{recommendAction}} Pelajari lebih lanjut tentang mengamankan pertemuan Anda <a href=\"{{securityUrl}}\" rel=\"security\" target=\"_blank\">di sini</a>.",
+        "title": "Opsi Keamanan",
+        "unsafeRoomActions": {
+            "meeting": "Pertimbangkan untuk mengamankan pertemuan Anda menggunakan tombol keamanan.",
+            "prejoin": "Pertimbangkan untuk menggunakan nama pertemuan yang lebih unik.",
+            "welcome": "Pertimbangkan untuk menggunakan nama pertemuan yang lebih unik, atau pilih salah satu dari saran tersebut."
+        }
+    },
+    "settings": {
+        "audio": "Audio",
+        "buttonLabel": "Pengaturan",
+        "calendar": {
+            "about": "Integrasi kalender {{appName}} digunakan untuk mengakses kalender Anda secara aman sehingga dapat membaca acara mendatang.",
+            "disconnect": "Putuskan",
+            "microsoftSignIn": "Masuk dengan Microsoft",
+            "signedIn": "Saat ini mengakses acara kalender untuk {{email}}. Klik tombol Putuskan di bawah ini untuk menghentikan akses acara kalender.",
+            "title": "Kalender"
+        },
+        "desktopShareFramerate": "Frame rate pembagian layar desktop",
+        "desktopShareHighFpsWarning": "Frame rate yang lebih tinggi untuk pembagian layar desktop mungkin memengaruhi bandwidth Anda. Anda perlu memulai ulang pembagian layar untuk pengaturan baru berlaku.",
+        "desktopShareWarning": "Anda perlu memulai ulang pembagian layar untuk pengaturan baru berlaku.",
+        "devices": "Perangkat",
+        "followMe": "Semua mengikuti saya",
+        "framesPerSecond": "frame per detik",
+        "incomingMessage": "Pesan masuk",
+        "language": "Bahasa",
+        "loggedIn": "Masuk sebagai {{name}}",
+        "maxStageParticipants": "Jumlah maksimum peserta yang dapat ditampilkan di panggung utama (PERCOBAAN)",
+        "microphones": "Mikrofon",
+        "moderator": "Moderator",
+        "moderatorOptions": "Opsi moderator",
+        "more": "Umum",
+        "name": "Nama",
+        "noDevice": "Tidak ada",
+        "notifications": "Notifikasi",
+        "participantJoined": "Peserta Bergabung",
+        "participantKnocking": "Peserta masuk ke lobi",
+        "participantLeft": "Peserta Meninggalkan",
+        "playSounds": "Mainkan suara pada",
+        "reactions": "Reaksi pertemuan",
+        "sameAsSystem": "Sama dengan sistem ({{label}})",
+        "selectAudioOutput": "Output audio",
+        "selectCamera": "Kamera",
+        "selectMic": "Mikrofon",
+        "selfView": "Tampilan diri",
+        "shortcuts": "Pintasan",
+        "speakers": "Pemutar suara",
+        "startAudioMuted": "Semua dimulai dalam keadaan dibisukan",
+        "startReactionsMuted": "Bisukan suara reaksi untuk semua orang",
+        "startVideoMuted": "Semua dimulai tersembunyi",
+        "talkWhileMuted": "Bicara saat dibisukan",
+        "title": "Pengaturan",
+        "video": "Video"
+    },
+    "settingsView": {
+        "advanced": "Lanjutan",
+        "alertCancel": "Batal",
+        "alertOk": "OK",
+        "alertTitle": "Peringatan",
+        "alertURLText": "URL server yang dimasukkan tidak valid",
+        "apply": "Terapkan",
+        "buildInfoSection": "Informasi Build",
+        "conferenceSection": "Konferensi",
+        "disableCallIntegration": "Nonaktifkan integrasi panggilan asli",
+        "disableCrashReporting": "Nonaktifkan pelaporan kegagalan",
+        "disableCrashReportingWarning": "Apakah Anda yakin ingin menonaktifkan pelaporan kegagalan? Pengaturan ini akan diterapkan setelah Anda me-restart aplikasi.",
+        "disableP2P": "Nonaktifkan mode Peer-To-Peer",
+        "displayName": "Nama Tampilan",
+        "displayNamePlaceholderText": "Contoh: John Doe",
+        "email": "Email",
+        "emailPlaceholderText": "email@example.com",
+        "gavatarMessage": "Jika email Anda terkait dengan akun Gravatar, kami akan menggunakannya untuk menampilkan gambar profil Anda.",
+        "goTo": "Buka",
+        "header": "Pengaturan",
+        "help": "Bantuan",
+        "links": "Tautan",
+        "privacy": "Privasi",
+        "profileSection": "Profil",
+        "sdkVersion": "Versi SDK",
+        "serverURL": "URL Server",
+        "showAdvanced": "Tampilkan pengaturan lanjutan",
+        "startCarModeInLowBandwidthMode": "Mulai mode mobil dalam mode bandwidth rendah",
+        "startWithAudioMuted": "Mulai dengan audio dibisukan",
+        "startWithVideoMuted": "Mulai dengan video dibisukan",
+        "terms": "Syarat",
+        "version": "Versi Aplikasi"
+    },
+    "share": {
+        "dialInfoText": "\n\n=====\n\nHanya ingin menelepon menggunakan telepon Anda?\n\n{{defaultDialInNumber}}Klik tautan ini untuk melihat nomor telepon untuk panggilan di pertemuan ini\n{{dialInfoPageUrl}}",
+        "mainText": "Klik tautan berikut untuk bergabung dengan pertemuan:\n{{roomUrl}}"
+    },
+    "speaker": "Pembicara",
+    "speakerStats": {
+        "angry": "Marah",
+        "disgusted": "Jijik",
+        "displayEmotions": "Tampilkan emosi",
+        "fearful": "Takut",
+        "happy": "Senang",
+        "hours": "{{count}}jam",
+        "minutes": "{{count}}menit",
+        "name": "Nama",
+        "neutral": "Netral",
+        "sad": "Sedih",
+        "search": "Cari",
+        "searchHint": "Cari peserta",
+        "seconds": "{{count}}detik",
+        "speakerStats": "Statistik Peserta",
+        "speakerTime": "Waktu Pembicara",
+        "surprised": "Terkejut"
+    },
+    "startupoverlay": {
+        "genericTitle": "Pertemuan perlu menggunakan mikrofon dan kamera Anda.",
+        "policyText": " ",
+        "title": "{{app}} perlu menggunakan mikrofon dan kamera Anda."
+    },
+    "suspendedoverlay": {
+        "rejoinKeyTitle": "Gabung Kembali",
+        "text": "Tekan tombol <i>Gabung Kembali</i> untuk menyambungkan kembali.",
+        "title": "Panggilan video Anda terputus karena komputer ini masuk ke mode tidur."
+    },
+    "termsView": {
+        "title": "Syarat"
+    },
+    "toggleTopPanelLabel": "Alihkan panel atas",
+    "toolbar": {
+        "Settings": "Pengaturan",
+        "accessibilityLabel": {
+            "Settings": "Buka pengaturan",
+            "audioOnly": "Alihkan ke audio saja",
+            "audioRoute": "Pilih perangkat suara",
+            "boo": "Ba",
+            "breakoutRooms": "Ruang breakout",
+            "callQuality": "Kelola kualitas video",
+            "carmode": "Mode Mobil",
+            "cc": "Alihkan subtitle",
+            "chat": "Buka / Tutup obrolan",
+            "clap": "Tepuk tangan",
+            "closeChat": "Tutup obrolan",
+            "closeMoreActions": "Tutup menu tindakan lebih lanjut",
+            "closeParticipantsPane": "Tutup panel peserta",
+            "collapse": "Lipat",
+            "document": "Alihkan dokumen bersama",
+            "documentClose": "Tutup dokumen bersama",
+            "documentOpen": "Buka dokumen bersama",
+            "download": "Unduh aplikasi kami",
+            "embedMeeting": "Sematkan pertemuan",
+            "endConference": "Akhiri pertemuan untuk semua",
+            "enterFullScreen": "Lihat layar penuh",
+            "enterTileView": "Masuk ke tampilan ubin",
+            "exitFullScreen": "Keluar dari layar penuh",
+            "exitTileView": "Keluar dari tampilan ubin",
+            "expand": "Perluas",
+            "feedback": "Tinggalkan umpan balik",
+            "fullScreen": "Alihkan layar penuh",
+            "giphy": "Alihkan menu GIPHY",
+            "grantModerator": "Berikan Hak Moderator",
+            "hangup": "Tinggalkan pertemuan",
+            "heading": "Toolbar",
+            "help": "Bantuan",
+            "hideWhiteboard": "Sembunyikan papan tulis",
+            "invite": "Undang orang",
+            "kick": "Keluarkan peserta",
+            "laugh": "Tertawa",
+            "leaveConference": "Tinggalkan pertemuan",
+            "like": "Tanda Suka",
+            "linkToSalesforce": "Tautkan ke Salesforce",
+            "lobbyButton": "Aktifkan/nonaktifkan mode lobi",
+            "localRecording": "Alihkan kontrol rekaman lokal",
+            "lockRoom": "Alihkan kata sandi pertemuan",
+            "lowerHand": "Turunkan tangan Anda",
+            "moreActions": "Tindakan lebih lanjut",
+            "moreActionsMenu": "Menu tindakan lebih lanjut",
+            "moreOptions": "Tampilkan lebih banyak opsi",
+            "mute": "Bisukan mikrofon",
+            "muteEveryone": "Bisukan semua orang",
+            "muteEveryoneElse": "Bisukan semua orang lain",
+            "muteEveryoneElsesVideoStream": "Hentikan video semua orang lain",
+            "muteEveryonesVideoStream": "Hentikan video semua orang",
+            "muteGUMPending": "Menghubungkan mikrofon Anda",
+            "noiseSuppression": "Pencegahan noise",
+            "openChat": "Buka obrolan",
+            "participants": "Buka panel peserta",
+            "pip": "Alihkan ke mode Picture-in-Picture",
+            "privateMessage": "Kirim pesan pribadi",
+            "profile": "Edit profil Anda",
+            "raiseHand": "Angkat tangan Anda",
+            "reactions": "Reaksi",
+            "reactionsMenu": "Menu reaksi",
+            "recording": "Alihkan rekaman",
+            "remoteMute": "Bisukan peserta",
+            "remoteVideoMute": "Nonaktifkan kamera peserta",
+            "security": "Opsi keamanan",
+            "selectBackground": "Pilih Latar Belakang",
+            "selfView": "Alihkan tampilan diri",
+            "shareRoom": "Undang seseorang",
+            "shareYourScreen": "Mulai membagikan layar Anda",
+            "shareaudio": "Bagikan audio",
+            "sharedvideo": "Bagikan video",
+            "shortcuts": "Alihkan pintasan",
+            "show": "Tampilkan di panggung",
+            "showWhiteboard": "Tampilkan papan tulis",
+            "silence": "Diam",
+            "speakerStats": "Statistik Peserta",
+            "stopScreenSharing": "Hentikan membagikan layar Anda",
+            "stopSharedVideo": "Hentikan video",
+            "surprised": "Terkejut",
+            "tileView": "Alihkan tampilan ubin",
+            "toggleCamera": "Alihkan kamera",
+            "toggleFilmstrip": "Alihkan filmstrip",
+            "unmute": "Hidupkan mikrofon",
+            "videoblur": "Alihkan blur video",
+            "videomute": "Hentikan kamera",
+            "videomuteGUMPending": "Menghubungkan kamera Anda",
+            "videounmute": "Hidupkan kamera"
+        },
+        "addPeople": "Tambahkan orang ke panggilan Anda",
+        "audioOnlyOff": "Nonaktifkan mode bandwidth rendah",
+        "audioOnlyOn": "Aktifkan mode bandwidth rendah",
+        "audioRoute": "Pilih perangkat suara",
+        "audioSettings": "Pengaturan Audio",
+        "authenticate": "Autentikasi",
+        "boo": "Ba",
+        "callQuality": "Kelola kualitas video",
+        "chat": "Buka / Tutup obrolan",
+        "clap": "Tepuk tangan",
+        "closeChat": "Tutup obrolan",
+        "closeParticipantsPane": "Tutup panel peserta",
+        "disableNoiseSuppression": "Nonaktifkan pencegahan noise",
+        "disableReactionSounds": "Anda dapat menonaktifkan suara reaksi untuk pertemuan ini",
+        "documentClose": "Tutup dokumen bersama",
+        "documentOpen": "Buka dokumen bersama",
+        "download": "Unduh aplikasi kami",
+        "e2ee": "Enkripsi End-to-End",
+        "embedMeeting": "Sematkan pertemuan",
+        "enableNoiseSuppression": "Aktifkan pencegahan noise",
+        "endConference": "Akhiri pertemuan untuk semua",
+        "enterFullScreen": "Lihat layar penuh",
+        "enterTileView": "Masuk ke tampilan ubin",
+        "exitFullScreen": "Keluar dari layar penuh",
+        "exitTileView": "Keluar dari tampilan ubin",
+        "feedback": "Tinggalkan umpan balik",
+        "giphy": "Alihkan menu GIPHY",
+        "hangup": "Tinggalkan pertemuan",
+        "help": "Bantuan",
+        "hideWhiteboard": "Sembunyikan papan tulis",
+        "invite": "Undang orang",
+        "joinBreakoutRoom": "Gabung dengan ruang pemisahan",
+        "laugh": "Tertawa",
+        "leaveBreakoutRoom": "Tinggalkan ruang pemisahan",
+        "leaveConference": "Tinggalkan pertemuan",
+        "like": "Tanda Suka",
+        "linkToSalesforce": "Tautkan ke Salesforce",
+        "lobbyButtonDisable": "Nonaktifkan mode lobi",
+        "lobbyButtonEnable": "Aktifkan mode lobi",
+        "login": "Masuk",
+        "logout": "Keluar",
+        "lowerYourHand": "Turunkan tangan Anda",
+        "moreActions": "Tindakan lebih lanjut",
+        "moreOptions": "Tampilkan lebih banyak opsi",
+        "mute": "Bisukan mikrofon",
+        "muteEveryone": "Bisukan semua orang",
+        "muteEveryonesVideo": "Nonaktifkan kamera semua orang",
+        "muteGUMPending": "Menghubungkan mikrofon Anda",
+        "noAudioSignalDesc": "Jika Anda tidak sengaja mematikannya dari pengaturan sistem atau perangkat keras, pertimbangkan untuk beralih perangkat.",
+        "noAudioSignalDescSuggestion": "Jika Anda tidak sengaja mematikannya dari pengaturan sistem atau perangkat keras, pertimbangkan untuk beralih ke perangkat yang disarankan.",
+        "noAudioSignalDialInDesc": "Anda juga dapat menelepon menggunakan:",
+        "noAudioSignalDialInLinkDesc": "Nomor telepon panggilan",
+        "noAudioSignalTitle": "Tidak ada masukan yang datang dari mikrofon Anda!",
+        "noiseSuppression": "Pencegahan noise",
+        "noisyAudioInputDesc": "Sepertinya mikrofon Anda membuat suara bising, pertimbangkan untuk mematikan atau mengganti perangkat.",
+        "noisyAudioInputTitle": "Mikrofon Anda tampaknya berisik!",
+        "openChat": "Buka obrolan",
+        "openReactionsMenu": "Buka menu reaksi",
+        "participants": "Peserta",
+        "pip": "Masuk ke mode Picture-in-Picture",
+        "privateMessage": "Kirim pesan pribadi",
+        "profile": "Edit profil Anda",
+        "raiseHand": "Angkat tangan Anda",
+        "raiseYourHand": "Angkat tangan Anda",
+        "reactionBoo": "Kirim reaksi ba",
+        "reactionClap": "Kirim reaksi tepuk tangan",
+        "reactionLaugh": "Kirim reaksi tertawa",
+        "reactionLike": "Kirim reaksi jempol ke atas",
+        "reactionSilence": "Kirim reaksi diam",
+        "reactionSurprised": "Kirim reaksi terkejut",
+        "reactions": "Reaksi",
+        "security": "Opsi keamanan",
+        "selectBackground": "Pilih latar belakang",
+        "shareRoom": "Undang seseorang",
+        "shareaudio": "Bagikan audio",
+        "sharedvideo": "Bagikan video",
+        "shortcuts": "Lihat pintasan",
+        "show": "Tampilkan di panggung",
+        "showWhiteboard": "Tampilkan papan tulis",
+        "silence": "Diam",
+        "speakerStats": "Statistik Peserta",
+        "startScreenSharing": "Mulai membagikan layar",
+        "startSubtitles": "Subtitle • {{language}}",
+        "stopAudioSharing": "Hentikan berbagi audio",
+        "stopScreenSharing": "Hentikan membagikan layar",
+        "stopSharedVideo": "Hentikan video",
+        "stopSubtitles": "Hentikan subtitle",
+        "surprised": "Terkejut",
+        "talkWhileMutedPopup": "Mencoba berbicara? Anda dibisukan.",
+        "tileViewToggle": "Alihkan tampilan ubin",
+        "toggleCamera": "Alihkan kamera",
+        "unmute": "Hidupkan mikrofon",
+        "videoSettings": "Pengaturan Video",
+        "videomute": "Hentikan kamera",
+        "videomuteGUMPending": "Menghubungkan kamera Anda",
+        "videounmute": "Hidupkan kamera"
+    },
+    "transcribing": {
+        "ccButtonTooltip": "Mulai / Berhenti menampilkan subtitle",
+        "expandedLabel": "Transkripsi sedang aktif",
+        "failedToStart": "Transkripsi gagal dimulai",
+        "labelToolTip": "Pertemuan sedang ditranskripsi",
+        "sourceLanguageDesc": "Saat ini bahasa pertemuan diatur ke <b>{{sourceLanguage}}</b>. <br/> Anda dapat mengubahnya dari ",
+        "sourceLanguageHere": "di sini",
+        "start": "Mulai menampilkan subtitle",
+        "stop": "Berhenti menampilkan subtitle",
+        "subtitles": "Subtitle",
+        "subtitlesOff": "Matikan",
+        "tr": "TR"
+    },
+    "unpinParticipant": "{{participantName}} - Lepas pin",
+    "userMedia": {
+        "androidGrantPermissions": "Pilih <b><i>Izinkan</i></b> ketika browser Anda meminta izin.",
+        "chromeGrantPermissions": "Pilih <b><i>Izinkan</i></b> ketika browser Anda meminta izin.",
+        "edgeGrantPermissions": "Pilih <b><i>Ya</i></b> ketika browser Anda meminta izin.",
+        "electronGrantPermissions": "Mencoba mengakses kamera dan mikrofon Anda",
+        "firefoxGrantPermissions": "Pilih <b><i>Bagikan Perangkat yang Dipilih</i></b> ketika browser Anda meminta izin.",
+        "iexplorerGrantPermissions": "Pilih <b><i>OK</i></b> ketika browser Anda meminta izin.",
+        "nwjsGrantPermissions": "Harap berikan izin untuk menggunakan kamera dan mikrofon Anda",
+        "operaGrantPermissions": "Pilih <b><i>Izinkan</i></b> ketika browser Anda meminta izin.",
+        "react-nativeGrantPermissions": "Pilih <b><i>Izinkan</i></b> ketika browser Anda meminta izin.",
+        "safariGrantPermissions": "Pilih <b><i>OK</i></b> ketika browser Anda meminta izin."
+    },
+    "videoSIPGW": {
+        "busy": "Kami sedang berupaya membebaskan sumber daya. Silakan coba lagi dalam beberapa menit.",
+        "busyTitle": "Layanan Ruang sedang sibuk",
+        "errorAlreadyInvited": "{{displayName}} sudah diundang",
+        "errorInvite": "Konferensi belum dibentuk. Silakan coba lagi nanti.",
+        "errorInviteFailed": "Kami sedang berupaya menyelesaikan masalah ini. Silakan coba lagi nanti.",
+        "errorInviteFailedTitle": "Undangan {{displayName}} gagal",
+        "errorInviteTitle": "Kesalahan mengundang ruang",
+        "pending": "{{displayName}} telah diundang"
+    },
+    "videoStatus": {
+        "adjustFor": "Sesuaikan untuk:",
+        "audioOnly": "AUD",
+        "audioOnlyExpanded": "Anda berada dalam mode bandwidth rendah. Dalam mode ini, Anda hanya akan menerima audio dan berbagi layar.",
+        "bestPerformance": "Kinerja terbaik",
+        "callQuality": "Kualitas Video (0 untuk kinerja terbaik, 3 untuk kualitas tertinggi)",
+        "hd": "HD",
+        "hdTooltip": "Menonton video definisi tinggi",
+        "highDefinition": "Definisi tinggi",
+        "highestQuality": "Kualitas tertinggi",
+        "labelTooiltipNoVideo": "Tidak ada video",
+        "labelTooltipAudioOnly": "Mode bandwidth rendah diaktifkan",
+        "ld": "LD",
+        "ldTooltip": "Menonton video definisi rendah",
+        "lowDefinition": "Definisi rendah",
+        "performanceSettings": "Pengaturan kinerja",
+        "recording": "Perekaman sedang berlangsung",
+        "sd": "SD",
+        "sdTooltip": "Menonton video definisi standar",
+        "standardDefinition": "Definisi standar",
+        "streaming": "Streaming sedang berlangsung"
+    },
+    "videothumbnail": {
+        "connectionInfo": "Info Koneksi",
+        "demote": "Pindah ke pengunjung",
+        "domute": "Bisukan",
+        "domuteOthers": "Bisukan semua orang lain",
+        "domuteVideo": "Nonaktifkan kamera",
+        "domuteVideoOfOthers": "Nonaktifkan kamera semua orang lain",
+        "flip": "Putar",
+        "grantModerator": "Berikan Hak Moderator",
+        "hideSelfView": "Sembunyikan tampilan diri",
+        "kick": "Keluarkan",
+        "mirrorVideo": "Cerminkan video saya",
+        "moderator": "Moderator",
+        "mute": "Peserta dibisukan",
+        "muted": "Dibisukan",
+        "pinToStage": "Pasang ke panggung",
+        "remoteControl": "Mulai / Berhenti kontrol jarak jauh",
+        "screenSharing": "Peserta sedang berbagi layar mereka",
+        "show": "Tampilkan di panggung",
+        "showSelfView": "Tampilkan tampilan diri",
+        "unpinFromStage": "Lepas penjepitan",
+        "verify": "Verifikasi peserta",
+        "videoMuted": "Kamera dinonaktifkan",
+        "videomute": "Peserta telah menghentikan kamera"
+    },
+    "virtualBackground": {
+        "accessibilityLabel": {
+            "currentBackground": "Latar belakang saat ini: {{background}}",
+            "selectBackground": "Pilih latar belakang"
+        },
+        "addBackground": "Tambahkan latar belakang",
+        "apply": "Terapkan",
+        "backgroundEffectError": "Gagal menerapkan efek latar belakang.",
+        "blur": "Buram",
+        "deleteImage": "Hapus gambar",
+        "desktopShare": "Berbagi desktop",
+        "desktopShareError": "Tidak dapat membuat berbagi desktop",
+        "image1": "Pantai",
+        "image2": "Dinding netral putih",
+        "image3": "Kamar kosong putih",
+        "image4": "Lampu lantai hitam",
+        "image5": "Gunung",
+        "image6": "Hutan",
+        "image7": "Matahari terbit",
+        "none": "Tidak ada",
+        "pleaseWait": "Silakan tunggu...",
+        "removeBackground": "Hapus latar belakang",
+        "slightBlur": "Setengah buram",
+        "title": "Latar belakang virtual",
+        "uploadedImage": "Gambar yang diunggah {{index}}",
+        "webAssemblyWarning": "WebAssembly tidak didukung",
+        "webAssemblyWarningDescription": "WebAssembly dinonaktifkan atau tidak didukung oleh browser ini"
+    },
+    "visitors": {
+        "chatIndicator": "(pengunjung)",
+        "labelTooltip": "Jumlah pengunjung: {{count}}",
+        "notification": {
+            "demoteDescription": "Dikirim ke sini oleh {{actor}}, angkat tangan Anda untuk berpartisipasi",
+            "description": "Untuk berpartisipasi angkat tangan Anda",
+            "noMainParticipantsDescription": "Seorang peserta perlu memulai pertemuan. Silakan coba lagi nanti.",
+            "noMainParticipantsTitle": "Pertemuan ini belum dimulai.",
+            "noVisitorLobby": "Anda tidak dapat bergabung saat ada lobi yang diaktifkan untuk pertemuan.",
+            "notAllowedPromotion": "Seorang peserta perlu mengizinkan permintaan Anda terlebih dahulu.",
+            "title": "Anda adalah pengunjung dalam pertemuan"
+        }
+    },
+    "volumeSlider": "Penggeser volume",
+    "welcomepage": {
+        "accessibilityLabel": {
+            "join": "Ketuk untuk bergabung",
+            "roomname": "Masukkan nama ruang"
+        },
+        "addMeetingName": "Tambahkan nama pertemuan",
+        "appDescription": "Lanjutkan, video chat dengan seluruh tim. Bahkan, undang semua orang yang Anda kenal. {{app}} adalah solusi konferensi video yang sepenuhnya terenkripsi, 100% open source yang dapat Anda gunakan sepanjang hari, setiap hari, secara gratis — tanpa perlu akun.",
+        "audioVideoSwitch": {
+            "audio": "Suara",
+            "video": "Video"
+        },
+        "calendar": "Kalender",
+        "connectCalendarButton": "Hubungkan kalender Anda",
+        "connectCalendarText": "Hubungkan kalender Anda untuk melihat semua pertemuan Anda di {{app}}. Plus, tambahkan pertemuan {{provider}} ke kalender Anda dan mulai mereka dengan satu klik.",
+        "enterRoomTitle": "Mulai pertemuan baru",
+        "getHelp": "Dapatkan bantuan",
+        "go": "LANJUT",
+        "goSmall": "LANJUT",
+        "headerSubtitle": "Pertemuan yang aman dan berkualitas tinggi",
+        "headerTitle": "Jitsi Meet",
+        "info": "Info panggilan",
+        "jitsiOnMobile": "Jitsi di ponsel - unduh aplikasi kami dan mulai pertemuan dari mana saja",
+        "join": "BUAT / BERGABUNG",
+        "logo": {
+            "calendar": "Logo kalender",
+            "desktopPreviewThumbnail": "Thumbnail pratinjau desktop",
+            "googleLogo": "Logo Google",
+            "logoDeepLinking": "Logo Jitsi meet",
+            "microsoftLogo": "Logo Microsoft",
+            "policyLogo": "Logo Kebijakan"
+        },
+        "meetingsAccessibilityLabel": "Pertemuan",
+        "mobileDownLoadLinkAndroid": "Unduh aplikasi mobile untuk Android",
+        "mobileDownLoadLinkFDroid": "Unduh aplikasi mobile untuk F-Droid",
+        "mobileDownLoadLinkIos": "Unduh aplikasi mobile untuk iOS",
+        "moderatedMessage": "Atau <a href=\"{{url}}\" rel=\"noopener noreferrer\" target=\"_blank\">pesan URL pertemuan</a> sebelumnya di mana Anda adalah satu-satunya moderator.",
+        "privacy": "Privasi",
+        "recentList": "Terbaru",
+        "recentListDelete": "Hapus entri",
+        "recentListEmpty": "Daftar terbaru Anda saat ini kosong. Berbicaralah dengan tim Anda dan Anda akan menemukan semua pertemuan terbaru Anda di sini.",
+        "recentMeetings": "Pertemuan terbaru Anda",
+        "reducedUIText": "Selamat datang di {{app}}!",
+        "roomNameAllowedChars": "Nama pertemuan tidak boleh mengandung salah satu dari karakter-karakter ini: ?, &, :, ', \", %, #.",
+        "roomname": "Masukkan nama ruang",
+        "roomnameHint": "Masukkan nama atau URL ruang yang ingin Anda ikuti. Anda dapat membuat nama, beri tahu orang-orang yang akan Anda temui sehingga mereka memasukkan nama yang sama.",
+        "sendFeedback": "Kirim umpan balik",
+        "settings": "Pengaturan",
+        "startMeeting": "Mulai pertemuan",
+        "terms": "Ketentuan",
+        "title": "Konferensi video yang aman, lengkap, dan benar-benar gratis",
+        "upcomingMeetings": "Pertemuan yang akan datang Anda"
+    },
+    "whiteboard": {
+        "accessibilityLabel": {
+            "heading": "Papan tulis"
+        },
+        "screenTitle": "Papan tulis"
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-lv.json b/node_modules/@jitsi/react-native-sdk/lang/main-lv.json
index c1a5835..f4384c4 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-lv.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-lv.json
@@ -128,6 +128,7 @@
         "privateNotice": "Privāta ziņa adresātam {{recipient}}",
         "sendButton": "Nosūtīt",
         "smileysPanel": "Emociju panelis",
+        "systemDisplayName": "Sistēma",
         "tabs": {
             "chat": "Tērzēšana",
             "polls": "Aptaujas"
@@ -262,7 +263,8 @@
         "Remove": "Noņemt",
         "Share": "Kopīgot",
         "Submit": "Iesniegt",
-        "WaitForHostMsg": "Sapulce vēl nav sākusies. Ja esat sapulces rīkotājs, lūdzu autorizējaties. Pretējā gadījumā, lūdzu, uzgaidiet.",
+        "WaitForHostMsg": "Sapulce vēl nav sākusies, jo vēl nav ieradies neviens moderators. Lūdzu, autorizējieties, lai kļūtu par moderatoru. Pretējā gadījumā, lūdzu, uzgaidiet.",
+        "WaitForHostNoAuthMsg": "Sapulce vēl nav sākusies, jo vēl nav ieradies neviens moderators. Lūdzu, uzgaidiet.",
         "WaitingForHostButton": "Gaidīt rīkotāju",
         "WaitingForHostTitle": "Gaida rīkotāju...",
         "Yes": "Jā",
@@ -318,6 +320,7 @@
         "embedMeeting": "Iegult sapulci",
         "enterDisplayName": "Ievadiet savu vārdu",
         "error": "Kļūda",
+        "errorRoomCreationRestriction": "Jūs mēģinājāt pievienoties pārāk ātri. Lūdzu, atgriezieties vēlāk.",
         "gracefulShutdown": "Mūsu serviss pašlaik nedarbojas apkopes dēļ. Lūdzu, pamēģiniet vēlreiz vēlāk.",
         "grantModeratorDialog": "Vai tiešām vēlaties piešķirt moderatora tiesības dalībniekam {{participantName}}?",
         "grantModeratorTitle": "Piešķirt moderatora tiesības",
@@ -353,28 +356,28 @@
         "micPermissionDeniedError": "Nav piekļuves mikrofonam. Jūs varat piedalīties sapulcē, bet citi jūs nedzirdēs. Lai to novērstu, izmantojiet kameras ikonu pārlūkprogrammas adrešu joslā.",
         "micTimeoutError": "Nevarēja palaist audio avotu. Iestājās noildze!",
         "micUnknownError": "Nevar izmantot mikrofonu nezināma iemesla dēļ.",
-        "moderationAudioLabel": "Ļaujiet dalībniekiem ieslēgt savu mikrofonu",
-        "moderationVideoLabel": "Ļaujiet dalībniekiem ieslēgt savu kameru",
-        "muteEveryoneDialog": "Dalībnieki jebkurā laikā var ieslēgt savu mikrofonu.",
-        "muteEveryoneDialogModerationOn": "Dalībnieki jebkurā laikā var nosūtīt pieprasījumu runāt.",
-        "muteEveryoneElseDialog": "Kad skaņa būs izslēgta, jūs nevarēsit to ieslēgt atpakaļ, taču dalībnieki jebkurā laikā to varēs izdarīt paši.",
+        "moderationAudioLabel": "Atļaut dalībniekiem ieslēgt savu mikrofonu",
+        "moderationVideoLabel": "Atļaut dalībniekiem ieslēgt savu kameru",
+        "muteEveryoneDialog": "Dalībnieki paši var ieslēgt savu mikrofonu.",
+        "muteEveryoneDialogModerationOn": "Dalībnieki var nosūtīt pieprasījumu ieslēgt savu mikrofonu.",
+        "muteEveryoneElseDialog": "Kad skaņa būs izslēgta, jūs nevarēsiet to ieslēgt atpakaļ, taču dalībnieki to varēs izdarīt paši.",
         "muteEveryoneElseTitle": "Vai izslēgt skaņu visiem, izņemot {{whom}}?",
-        "muteEveryoneElsesVideoDialog": "Kad video būs izslēgts, jūs nevarēsit to ieslēgt atpakaļ, taču dalībnieki jebkurā laikā to varēs izdarīt paši.",
+        "muteEveryoneElsesVideoDialog": "Kad video būs izslēgts, jūs nevarēsiet to ieslēgt atpakaļ, taču dalībnieki to varēs izdarīt paši.",
         "muteEveryoneElsesVideoTitle": "Vai izslēgt video visiem, izņemot {{whom}}?",
         "muteEveryoneSelf": "jūs",
         "muteEveryoneStartMuted": "No šī brīža visi jauni dalībnieki pieslēdzas ar izslēgt skaņu",
         "muteEveryoneTitle": "Vai izslēgt skaņu visiem?",
-        "muteEveryonesVideoDialog": "Dalībnieki var jebkurā laikā ieslēgt savu video.",
-        "muteEveryonesVideoDialogModerationOn": "Dalībnieki jebkurā laikā var nosūtīt pieprasījumu ieslēgt viņu video.",
+        "muteEveryonesVideoDialog": "Dalībnieki var ieslēgt savu video.",
+        "muteEveryonesVideoDialogModerationOn": "Dalībnieki var nosūtīt pieprasījumu ieslēgt viņu video.",
         "muteEveryonesVideoDialogOk": "Atspējot",
         "muteEveryonesVideoTitle": "Vai apturēt ikviena video?",
-        "muteParticipantBody": "Jūs nevarat viņiem ieslēgt skaņu, bet viņi paši to var izdarīt jebkurā laikā.",
+        "muteParticipantBody": "Jūs nevariet viņiem ieslēgt skaņu, bet viņi paši to var izdarīt jebkurā laikā.",
         "muteParticipantButton": "Izslēgt skaņu",
-        "muteParticipantsVideoBody": "Jūs nevarēsiet atkal ieslēgt kameru, taču viņi var to jebkurā laikā atkal ieslēgt.",
-        "muteParticipantsVideoBodyModerationOn": "Jūs nevarēsiet atkal ieslēgt kameru, un viņi arī nevarēs.",
+        "muteParticipantsVideoBody": "Jūs nevarēsiet kameru ieslēgt atpakaļ, taču viņi paši to varēs izdarīt jebkurā laikā.",
+        "muteParticipantsVideoBodyModerationOn": "Ne Jūs, ne dalībnieki nevarēsiet ieslēgt kameru atpakaļ.",
         "muteParticipantsVideoButton": "Pārtraukt video",
-        "muteParticipantsVideoDialog": "Vai tiešām vēlaties izslēgt šī dalībnieka kameru? Jūs nevarēsiet atkal ieslēgt kameru, taču viņi var to jebkurā laikā atkal ieslēgt.",
-        "muteParticipantsVideoDialogModerationOn": "Vai tiešām vēlaties izslēgt šī dalībnieka kameru? Jūs nevarēsiet atkal ieslēgt kameru, un viņi arī nevarēs.",
+        "muteParticipantsVideoDialog": "Vai tiešām vēlaties izslēgt šī dalībnieka kameru? Jūs nevarēsiet to ieslēgt atpakaļ, taču dalībnieks pats to varēs izdarīt jebkurā laikā.",
+        "muteParticipantsVideoDialogModerationOn": "Vai tiešām vēlaties izslēgt šī dalībnieka kameru? Ne Jūs, ne dalībnieks nevarēsiet to ieslēgt atpakaļ.",
         "muteParticipantsVideoTitle": "Vai izslēgt šī dalībnieka video?",
         "noDropboxToken": "Nav derīga Dropbox tokena",
         "password": "Parole",
@@ -733,8 +736,10 @@
         "connectedOneMember": "{{name}} ir pievienojies sapulcei",
         "connectedThreePlusMembers": "{{name}} un {{count}} citi ir pievienojušies sapulcei",
         "connectedTwoMembers": "{{first}} un {{second}} ir pievienojušies sapulcei",
-        "dataChannelClosed": "Video kvalitāte ir traucēta",
-        "dataChannelClosedDescription": "Savienojuma kanāls ir atvienots, un tādējādi video kvalitāte ir ierobežota līdz zemākajam iestatījumam.",
+        "dataChannelClosed": "Video kvalitāte var būt traucēta",
+        "dataChannelClosedDescription": "Savienojuma kanāls nedarbojas, tāpēc video kvalitāte var būt ierobežota līdz zemākajam iestatījumam.",
+        "dataChannelClosedDescriptionWithAudio": "Savienojuma kanāls nedarbojas, tāpēc var rasties audio un video traucējumi.",
+        "dataChannelClosedWithAudio": "Audio un video kvalitāte var būt traucēta",
         "disabledIframe": "Iegulšana ir paredzēta tikai demonstrācijas nolūkiem, tāpēc šis zvans tiks atvienots pēc {{timeout}} minūtēm.",
         "disabledIframeSecondary": "{{domain}} iegulšana ir paredzēta tikai demonstrācijas nolūkiem, tāpēc šis zvans tiks atvienots pēc {{timeout}} minūtēm. Lūdzu, izmantojiet <a href='{{jaasDomain}}' rel='noopener noreferrer' target='_blank'>Jitsi kā Pakalpojums</a> produkcijas iegulšanai!",
         "disconnected": "savienojums pārtraukts",
@@ -832,7 +837,7 @@
             "breakoutRooms": "Grupu istabas",
             "invite": "Uzaicināt",
             "moreModerationActions": "Vairāk moderēšanas iespēju",
-            "moreModerationControls": "Vairāk moderēšanas kontroļu",
+            "moreModerationControls": "Vairāk moderēšanas iespēju",
             "moreParticipantOptions": "Vairāk dalībnieku iespēju",
             "mute": "Apklusināt",
             "muteAll": "Apklusināt visus",
@@ -860,6 +865,8 @@
     "pinnedParticipant": "Dalībnieks ir piesprausts",
     "polls": {
         "answer": {
+            "edit": "Labot",
+            "send": "Nosūtīt",
             "skip": "Izlaist",
             "submit": "Iesniegt"
         },
@@ -873,6 +880,7 @@
             "pollQuestion": "Aptaujas Jautājums",
             "questionPlaceholder": "Uzdod jautājumu",
             "removeOption": "Noņemt opciju",
+            "save": "Saglabāt",
             "send": "Nosūtīt"
         },
         "errors": {
@@ -1482,6 +1490,10 @@
         "notification": {
             "demoteDescription": "{{actor}} pārveidoja par apmeklētāju, paceliet roku, lai piedalītos",
             "description": "Paceliet roku, lai piedalītos",
+            "noMainParticipantsDescription": "Dalībniekam ir jāsāk sapulce. Lūdzu, pēc brīža mēģiniet vēlreiz.",
+            "noMainParticipantsTitle": "Šī sapulce vēl nav sākusies.",
+            "noVisitorLobby": "Jūs nevarat pievienoties, kamēr sapulcei ir iespējots vestibils.",
+            "notAllowedPromotion": "Dalībniekam vispirms ir jāatļauj jūsu pieprasījums.",
             "title": "Jūs esat sapulces apmeklētājs"
         }
     },
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-ru.json b/node_modules/@jitsi/react-native-sdk/lang/main-ru.json
index 20ce790..c525f7f 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-ru.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-ru.json
@@ -822,8 +822,8 @@
     },
     "participantsPane": {
         "actions": {
-            "admit": "Признать",
-            "admitAll": "Признать все",
+            "admit": "Разрешить",
+            "admitAll": "Разрешить всем",
             "allow": "Разрешить",
             "allowVideo": "Разрешить видео",
             "askUnmute": "Попросить разрешение включить микрофон",
@@ -837,7 +837,7 @@
             "mute": "Выключить звук",
             "muteAll": "Выключить звук у всех",
             "muteEveryoneElse": "Выключить микрофон у остальных",
-            "reject": "Отказать",
+            "reject": "Отклонить",
             "stopEveryonesVideo": "Выключить у всех камеру",
             "stopVideo": "Остановить видео",
             "unblockEveryoneMicCamera": "Разблокировать у всех микрофон и камеру",
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-tr.json b/node_modules/@jitsi/react-native-sdk/lang/main-tr.json
index c1289c2..867a60f 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-tr.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-tr.json
@@ -128,6 +128,7 @@
         "privateNotice": "{{recipient}} için özel mesaj",
         "sendButton": "Gönder",
         "smileysPanel": "Emoji paneli",
+        "systemDisplayName": "Sistem",
         "tabs": {
             "chat": "Sohbet",
             "polls": "Anket"
@@ -262,7 +263,8 @@
         "Remove": "Kaldır",
         "Share": "Paylaş",
         "Submit": "Gönder",
-        "WaitForHostMsg": "Toplantısı henüz başlamadı. Toplantı sahibi sizseniz, lütfen kimlik doğrulaması yapın. Değilseniz lütfen toplantı sahibinin gelmesini bekleyin.",
+        "WaitForHostMsg": "Toplantı sahibi gelmediğinden toplantı henüz başlamadı. Toplantı sahibi sizseniz, lütfen kimlik doğrulaması yapın. Değilseniz lütfen toplantı sahibinin gelmesini bekleyin.",
+        "WaitForHostNoAuthMsg": "Toplantı sahibi gelmediğinden toplantı henüz başlamadı. Lütfen bekleyin.",
         "WaitingForHostButton": "Toplantı sahibini bekle",
         "WaitingForHostTitle": "Toplantı sahibi bekleniyor ...",
         "Yes": "Evet",
@@ -318,6 +320,7 @@
         "embedMeeting": "Toplantıyı yerleştir",
         "enterDisplayName": "Lütfen adınızı buraya girin...",
         "error": "Hata",
+        "errorRoomCreationRestriction": "Çok hızlı katılmaya çalıştınız, lütfen biraz sonra tekrar gelin.",
         "gracefulShutdown": "Hizmetimiz şu anda bakım için devre dışı. Lütfen daha sonra tekrar deneyiniz.",
         "grantModeratorDialog": "{{participantName}} için moderatör hakları vermek istediğinize emin misiniz?",
         "grantModeratorTitle": "Moderatör hakları ver",
@@ -735,6 +738,8 @@
         "connectedTwoMembers": "{{first}} ve {{second}} toplantıya katıldı",
         "dataChannelClosed": "Video kalitesi bozuldu",
         "dataChannelClosedDescription": "Köprü kanalının bağlantısı kesildi ve bu nedenle video kalitesi en düşük ayarla sınırlandı.",
+        "dataChannelClosedDescriptionWithAudio": "Köprü kanalı kapalı olduğu için ses ve video kesintileri yaşanabilir.",
+        "dataChannelClosedWithAudio": "Ses ve video kalitesi etkilenebilir.",
         "disabledIframe": "Yerleştirme yalnızca demo amaçlı olduğundan bu çağrının bağlantısı {{timeout}} dakika içinde kesilecek.",
         "disabledIframeSecondary": "{{domain}} alanının yerleştirilmesi yalnızca demo amaçlı olduğundan bu çağrının bağlantısı {{timeout}} dakika içinde kesilecektir. Üretim yerleştirme için lütfen <a href='{{jaasDomain}}' rel='noopener noreferrer' target='_blank'>Hizmet olarak Jitsi</a>'yi kullanın!",
         "disconnected": "bağlantı kesildi",
@@ -817,6 +822,8 @@
         "viewLobby": "Lobiyi göster",
         "viewVisitors": "Ziyaretçileri görüntüle",
         "waitingParticipants": "{{waitingParticipants}} kişi",
+        "waitingVisitors": "Sırada bekleyen ziyaretçiler: {{waitingVisitors}}",
+        "waitingVisitorsTitle": "Toplantı henüz canlı değil!",
         "whiteboardLimitDescription": "Kullanıcı sınırına yakında ulaşılacağından ve beyaz tahta kapanacağından lütfen ilerlemenizi kaydedin.",
         "whiteboardLimitTitle": "Beyaz tahta kullanımı"
     },
@@ -830,6 +837,7 @@
             "audioModeration": "Seslerini aç",
             "blockEveryoneMicCamera": "Herkesin mikrofonunu ve kamerasını blokla",
             "breakoutRooms": "Alt odalar",
+            "goLive": "Canlı yayına geç",
             "invite": "Birini davet et",
             "moreModerationActions": "Daha fazla denetleme seçeneği",
             "moreModerationControls": "Daha fazla denetleme kontrolü",
@@ -847,6 +855,7 @@
         "headings": {
             "lobby": "Lobi ({{count}})",
             "participantsList": "Toplantı Katılımcıları ({{count}})",
+            "visitorInQueue": "(waiting {{count}})",
             "visitorRequests": "(requests {{count}})",
             "visitors": "Ziyaretçiler {{count}}",
             "waitingLobby": "Lobide bekleyen ({{count}})"
@@ -860,6 +869,8 @@
     "pinnedParticipant": "Katılımcı sabitlendi",
     "polls": {
         "answer": {
+            "edit": "Düzenle",
+            "send": "Gönder",
             "skip": "Geç",
             "submit": "Gönder"
         },
@@ -873,6 +884,7 @@
             "pollQuestion": "Anket Sorusu",
             "questionPlaceholder": "Soru sor",
             "removeOption": "Seçeneği sil",
+            "save": "Kaydet",
             "send": "Gönder"
         },
         "errors": {
@@ -1482,8 +1494,13 @@
         "notification": {
             "demoteDescription": "Buraya {{actor}} tarafından gönderildi, katılmak için elinizi kaldırın",
             "description": "Katılmak için elinizi kaldırın",
+            "noMainParticipantsDescription": "Bir katılımcının toplantıyı başlatması gerekiyor. Lütfen biraz sonra tekrar deneyin.",
+            "noMainParticipantsTitle": "Bu toplantı henüz başlamadı.",
+            "noVisitorLobby": "Toplantı için etkinleştirilmiş bir lobi varken katılamazsınız.",
+            "notAllowedPromotion": "Bir katılımcının öncelikle isteğinize izin vermesi gerekiyor.",
             "title": "Toplantıda ziyaretçisiniz"
-        }
+        },
+        "waitingMessage": "Toplantı canlı yayınlanır yayınlanmaz katılacaksınız!"
     },
     "volumeSlider": "Ses kaydırıcısı",
     "welcomepage": {
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main-vi.json b/node_modules/@jitsi/react-native-sdk/lang/main-vi.json
index 0b39d49..d1d3047 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main-vi.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main-vi.json
@@ -263,6 +263,7 @@
         "Share": "Chia sẻ",
         "Submit": "Đăng ký",
         "WaitForHostMsg": "Cuộc họp chưa được bắt đầu. Nếu bạn là quản trị viên vui lòng xác thực. Nếu không, vui lòng đợi quản trị viên.",
+        "WaitingForHost": "Đang đợi quản trị viên...",
         "WaitingForHostButton": "Chờ người điều hành",
         "WaitingForHostTitle": "Chờ người điều hành ...",
         "Yes": "Có",
diff --git a/node_modules/@jitsi/react-native-sdk/lang/main.json b/node_modules/@jitsi/react-native-sdk/lang/main.json
index 6d8a3d1..b151649 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/main.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/main.json
@@ -264,6 +264,7 @@
         "Share": "Share",
         "Submit": "Submit",
         "WaitForHostMsg": "The conference has not yet started because no moderators have yet arrived. If you'd like to become a moderator please log-in. Otherwise, please wait.",
+        "WaitForHostNoAuthMsg": "The conference has not yet started because no moderators have yet arrived. Please wait.",
         "WaitingForHostButton": "Wait for moderator",
         "WaitingForHostTitle": "Waiting for a moderator...",
         "Yes": "Yes",
@@ -319,6 +320,7 @@
         "embedMeeting": "Embed meeting",
         "enterDisplayName": "Enter your name",
         "error": "Error",
+        "errorRoomCreationRestriction": "You tried to join too quickly, please come back in a bit.",
         "gracefulShutdown": "Our service is currently down for maintenance. Please try again later.",
         "grantModeratorDialog": "Are you sure you want to grant moderator rights to {{participantName}}?",
         "grantModeratorTitle": "Grant moderator rights",
@@ -734,8 +736,10 @@
         "connectedOneMember": "{{name}} joined the meeting",
         "connectedThreePlusMembers": "{{name}} and many others joined the meeting",
         "connectedTwoMembers": "{{first}} and {{second}} joined the meeting",
-        "dataChannelClosed": "Video quality impaired",
-        "dataChannelClosedDescription": "The bridge channel has been disconnected and thus video quality is limited to its lowest setting.",
+        "dataChannelClosed": "Video quality may be impaired",
+        "dataChannelClosedDescription": "The bridge channel is down and thus video quality may be limited to its lowest setting.",
+        "dataChannelClosedDescriptionWithAudio": "The bridge channel is down and thus disruptions to audio and video may occur.",
+        "dataChannelClosedWithAudio": "Audio and video quality may be impaired",
         "disabledIframe": "Embedding is only meant for demo purposes, so this call will disconnect in {{timeout}} minutes.",
         "disabledIframeSecondary": "Embedding {{domain}} is only meant for demo purposes, so this call will disconnect in {{timeout}} minutes. Please use <a href='{{jaasDomain}}' rel='noopener noreferrer' target='_blank'>Jitsi as a Service</a> for production embedding!",
         "disconnected": "disconnected",
@@ -782,6 +786,7 @@
         "newDeviceAction": "Use",
         "newDeviceAudioTitle": "New audio device detected",
         "newDeviceCameraTitle": "New camera detected",
+        "nextToSpeak": "You are the next in line to speak",
         "noiseSuppressionDesktopAudioDescription": "Noise suppression can't be enabled while sharing desktop audio, please disable it and try again.",
         "noiseSuppressionFailedTitle": "Failed to start noise suppression",
         "noiseSuppressionStereoDescription": "Stereo audio noise suppression is not currently supported.",
@@ -818,6 +823,8 @@
         "viewLobby": "View lobby",
         "viewVisitors": "View visitors",
         "waitingParticipants": "{{waitingParticipants}} people",
+        "waitingVisitors": "Visitors waiting in queue: {{waitingVisitors}}",
+        "waitingVisitorsTitle": "The meeting is not live yet!",
         "whiteboardLimitDescription": "Please save your progress, as the user limit will soon be reached and the whiteboard will close.",
         "whiteboardLimitTitle": "Whiteboard usage"
     },
@@ -831,7 +838,10 @@
             "audioModeration": "Unmute themselves",
             "blockEveryoneMicCamera": "Block everyone's mic and camera",
             "breakoutRooms": "Breakout rooms",
+            "goLive": "Go live",
             "invite": "Invite Someone",
+            "lowerAllHands": "Lower all hands",
+            "lowerHand": "Lower the hand",
             "moreModerationActions": "More moderation options",
             "moreModerationControls": "More moderation controls",
             "moreParticipantOptions": "More participant options",
@@ -848,6 +858,7 @@
         "headings": {
             "lobby": "Lobby ({{count}})",
             "participantsList": "Meeting participants ({{count}})",
+            "visitorInQueue": " (waiting {{count}})",
             "visitorRequests": " (requests {{count}})",
             "visitors": "Visitors {{count}}",
             "waitingLobby": "Waiting in lobby ({{count}})"
@@ -861,10 +872,13 @@
     "pinnedParticipant": "The participant is pinned",
     "polls": {
         "answer": {
+            "edit": "Edit",
+            "send": "Send",
             "skip": "Skip",
             "submit": "Submit"
         },
         "by": "By {{ name }}",
+        "closeButton": "Close poll",
         "create": {
             "addOption": "Add option",
             "answerPlaceholder": "Option {{index}}",
@@ -874,6 +888,7 @@
             "pollQuestion": "Poll Question",
             "questionPlaceholder": "Ask a question",
             "removeOption": "Remove option",
+            "save": "Save",
             "send": "Send"
         },
         "errors": {
@@ -1479,12 +1494,22 @@
     },
     "visitors": {
         "chatIndicator": "(visitor)",
+        "joinMeeting": {
+            "description": "You're currently an observer in this conference.",
+            "raiseHand": "Raise your hand",
+            "title": "Joining meeting",
+            "wishToSpeak": "If you wish to speak, please raise your hand below and wait for the moderator's approval."
+        },
         "labelTooltip": "Number of visitors: {{count}}",
         "notification": {
             "demoteDescription": "Sent here by {{actor}}, raise your hand to participate",
-            "description": "To participate raise your hand",
+            "noMainParticipantsDescription": "A participant needs to start the meeting. Please try again in a bit.",
+            "noMainParticipantsTitle": "This meeting hasn’t started yet.",
+            "noVisitorLobby": "You cannot join while there is a lobby enabled for the meeting.",
+            "notAllowedPromotion": "A participant needs to allow your request first.",
             "title": "You are a visitor in the meeting"
-        }
+        },
+        "waitingMessage": "You'll join the meeting as soon as it is live!"
     },
     "volumeSlider": "Volume slider",
     "welcomepage": {
diff --git a/node_modules/@jitsi/react-native-sdk/lang/translation-languages.json b/node_modules/@jitsi/react-native-sdk/lang/translation-languages.json
index f4a4a9f..e8e505e 100644
--- a/node_modules/@jitsi/react-native-sdk/lang/translation-languages.json
+++ b/node_modules/@jitsi/react-native-sdk/lang/translation-languages.json
@@ -34,6 +34,7 @@
     "hi": "Hindi",
     "hmn": "Hmong",
     "hr": "Croatian",
+    "hsb": "Upper Sorbian",
     "ht": "Haitian Creole",
     "hu": "Hungarian",
     "hy": "Armenian",
diff --git a/node_modules/@jitsi/react-native-sdk/modules/API/API.js b/node_modules/@jitsi/react-native-sdk/modules/API/API.js
index 6999e99..d4887e3 100644
--- a/node_modules/@jitsi/react-native-sdk/modules/API/API.js
+++ b/node_modules/@jitsi/react-native-sdk/modules/API/API.js
@@ -41,6 +41,7 @@ import {
 import { LOCAL_PARTICIPANT_DEFAULT_ID } from '../../react/features/base/participants/constants';
 import {
     getLocalParticipant,
+    getNormalizedDisplayName,
     getParticipantById,
     getScreenshareParticipantIds,
     getVirtualScreenshareParticipantByOwnerId,
@@ -76,6 +77,7 @@ import { setMediaEncryptionKey, toggleE2EE } from '../../react/features/e2ee/act
 import {
     addStageParticipant,
     resizeFilmStrip,
+    setFilmstripVisible,
     setVolume,
     togglePinStageParticipant
 } from '../../react/features/filmstrip/actions.web';
@@ -98,7 +100,7 @@ import {
 } from '../../react/features/participants-pane/actions';
 import { getParticipantsPaneOpen, isForceMuted } from '../../react/features/participants-pane/functions';
 import { startLocalVideoRecording, stopLocalVideoRecording } from '../../react/features/recording/actions.any';
-import { RECORDING_TYPES } from '../../react/features/recording/constants';
+import { RECORDING_METADATA_ID, RECORDING_TYPES } from '../../react/features/recording/constants';
 import { getActiveSession, supportsLocalRecording } from '../../react/features/recording/functions';
 import { startAudioScreenShareFlow, startScreenShareFlow } from '../../react/features/screen-share/actions';
 import { isScreenAudioSupported } from '../../react/features/screen-share/functions';
@@ -199,7 +201,7 @@ function initCommands() {
         },
         'display-name': displayName => {
             sendAnalytics(createApiEvent('display.name.changed'));
-            APP.conference.changeLocalDisplayName(displayName);
+            APP.store.dispatch(updateSettings({ displayName: getNormalizedDisplayName(displayName) }));
         },
         'local-subject': localSubject => {
             sendAnalytics(createApiEvent('local.subject.changed'));
@@ -376,7 +378,9 @@ function initCommands() {
         },
         'toggle-film-strip': () => {
             sendAnalytics(createApiEvent('film.strip.toggled'));
-            APP.UI.toggleFilmstrip();
+            const { visible } = APP.store.getState()['features/filmstrip'];
+
+            APP.store.dispatch(setFilmstripVisible(!visible));
         },
 
         /*
@@ -625,6 +629,7 @@ function initCommands() {
          * @param { string } arg.youtubeStreamKey - The youtube stream key.
          * @param { string } arg.youtubeBroadcastID - The youtube broadcast ID.
          * @param { Object } arg.extraMetadata - Any extra metadata params for file recording.
+         * @param { boolean } arg.transcription - Whether a transcription should be started or not.
          * @returns {void}
          */
         'start-recording': ({
@@ -636,7 +641,8 @@ function initCommands() {
             rtmpBroadcastID,
             youtubeStreamKey,
             youtubeBroadcastID,
-            extraMetadata = {}
+            extraMetadata = {},
+            transcription
         }) => {
             const state = APP.store.getState();
             const conference = getCurrentConference(state);
@@ -711,25 +717,33 @@ function initCommands() {
                     mode: JitsiRecordingConstants.mode.STREAM,
                     streamId: youtubeStreamKey || rtmpStreamKey
                 };
-            } else {
-                logger.error('Invalid recording mode provided');
-
-                return;
             }
 
             if (isScreenshotCaptureEnabled(state, true, false)) {
                 APP.store.dispatch(toggleScreenshotCaptureSummary(true));
             }
-            conference.startRecording(recordingConfig);
+
+            // Start audio / video recording, if requested.
+            if (typeof recordingConfig !== 'undefined') {
+                conference.startRecording(recordingConfig);
+            }
+
+            if (transcription) {
+                APP.store.dispatch(setRequestingSubtitles(true, false, null));
+                conference.getMetadataHandler().setMetadata(RECORDING_METADATA_ID, {
+                    isTranscribingEnabled: true
+                });
+            }
         },
 
         /**
          * Stops a recording or streaming in progress.
          *
          * @param {string} mode - `local`, `file` or `stream`.
+         * @param {boolean} transcription - Whether the transcription needs to be stopped.
          * @returns {void}
          */
-        'stop-recording': mode => {
+        'stop-recording': (mode, transcription) => {
             const state = APP.store.getState();
             const conference = getCurrentConference(state);
 
@@ -739,6 +753,13 @@ function initCommands() {
                 return;
             }
 
+            if (transcription) {
+                APP.store.dispatch(setRequestingSubtitles(false, false, null));
+                conference.getMetadataHandler().setMetadata(RECORDING_METADATA_ID, {
+                    isTranscribingEnabled: false
+                });
+            }
+
             if (mode === 'local') {
                 APP.store.dispatch(stopLocalVideoRecording());
 
@@ -1317,14 +1338,14 @@ class API {
      * @returns {void}
      */
     notifyReceivedChatMessage(
-            { body, id, nick, privateMessage, ts } = {}) {
-        if (APP.conference.isLocalId(id)) {
+            { body, from, nick, privateMessage, ts } = {}) {
+        if (APP.conference.isLocalId(from)) {
             return;
         }
 
         this._sendEvent({
             name: 'incoming-message',
-            from: id,
+            from,
             message: body,
             nick,
             privateMessage,
@@ -1793,9 +1814,9 @@ class API {
      * Notify external application of a participant, remote or local, being
      * removed from the conference by another participant.
      *
-     * @param {string} kicked - The ID of the participant removed from the
+     * @param {Object} kicked - The participant removed from the
      * conference.
-     * @param {string} kicker - The ID of the participant that removed the
+     * @param {Object} kicker - The participant that removed the
      * other participant.
      * @returns {void}
      */
@@ -1913,14 +1934,16 @@ class API {
      * @param {boolean} on - True if recording is on, false otherwise.
      * @param {string} mode - Stream or file or local.
      * @param {string} error - Error type or null if success.
+     * @param {boolean} transcription - True if a transcription is being recorded, false otherwise.
      * @returns {void}
      */
-    notifyRecordingStatusChanged(on, mode, error) {
+    notifyRecordingStatusChanged(on, mode, error, transcription) {
         this._sendEvent({
             name: 'recording-status-changed',
             on,
             mode,
-            error
+            error,
+            transcription
         });
     }
 
@@ -2134,6 +2157,21 @@ class API {
     }
 
 
+    /**
+     * Notify external application (if API is enabled) the conference
+     * start time.
+     *
+     * @param {number} timestamp - Timestamp conference was created.
+     * @returns {void}
+     */
+    notifyConferenceCreatedTimestamp(timestamp) {
+        this._sendEvent({
+            name: 'conference-created-timestamp',
+            timestamp
+        });
+    }
+
+
     /**
      * Notify the external application (if API is enabled) if the connection type changed.
      *
diff --git a/node_modules/@jitsi/react-native-sdk/modules/API/external/external_api.js b/node_modules/@jitsi/react-native-sdk/modules/API/external/external_api.js
index 0938cf9..01f4631 100644
--- a/node_modules/@jitsi/react-native-sdk/modules/API/external/external_api.js
+++ b/node_modules/@jitsi/react-native-sdk/modules/API/external/external_api.js
@@ -108,6 +108,7 @@ const events = {
     'camera-error': 'cameraError',
     'chat-updated': 'chatUpdated',
     'compute-pressure-changed': 'computePressureChanged',
+    'conference-created-timestamp': 'conferenceCreatedTimestamp',
     'content-sharing-participants-changed': 'contentSharingParticipantsChanged',
     'data-channel-closed': 'dataChannelClosed',
     'data-channel-opened': 'dataChannelOpened',
@@ -1445,6 +1446,7 @@ export default class JitsiMeetExternalAPI extends EventEmitter {
      * @param { string } options.youtubeStreamKey - The youtube stream key.
      * @param { string } options.youtubeBroadcastID - The youtube broadcast ID.
      * @param {Object } options.extraMetadata - Any extra metadata params for file recording.
+     * @param { boolean } arg.transcription - Whether a transcription should be started or not.
      * @returns {void}
      */
     startRecording(options) {
@@ -1455,10 +1457,11 @@ export default class JitsiMeetExternalAPI extends EventEmitter {
      * Stops a recording or streaming session that is in progress.
      *
      * @param {string} mode - `file` or `stream`.
+     * @param {boolean} transcription - Whether the transcription needs to be stopped.
      * @returns {void}
      */
-    stopRecording(mode) {
-        this.executeCommand('stopRecording', mode);
+    stopRecording(mode, transcription) {
+        this.executeCommand('stopRecording', mode, transcription);
     }
 
     /**
diff --git a/node_modules/@jitsi/react-native-sdk/modules/UI/UI.js b/node_modules/@jitsi/react-native-sdk/modules/UI/UI.js
index 35d5835..2962442 100644
--- a/node_modules/@jitsi/react-native-sdk/modules/UI/UI.js
+++ b/node_modules/@jitsi/react-native-sdk/modules/UI/UI.js
@@ -4,7 +4,6 @@
 const UI = {};
 
 import Logger from '@jitsi/logger';
-import EventEmitter from 'events';
 
 import {
     conferenceWillInit
@@ -13,7 +12,6 @@ import { isMobileBrowser } from '../../react/features/base/environment/utils';
 import { setColorAlpha } from '../../react/features/base/util/helpers';
 import { sanitizeUrl } from '../../react/features/base/util/uri';
 import { setDocumentUrl } from '../../react/features/etherpad/actions';
-import { setFilmstripVisible } from '../../react/features/filmstrip/actions.any';
 import {
     setNotificationsEnabled,
     showNotification
@@ -25,7 +23,6 @@ import {
     setToolboxEnabled,
     showToolbox
 } from '../../react/features/toolbox/actions.web';
-import UIEvents from '../../service/UI/UIEvents';
 
 import EtherpadManager from './etherpad/Etherpad';
 import UIUtil from './util/UIUtil';
@@ -33,22 +30,8 @@ import VideoLayout from './videolayout/VideoLayout';
 
 const logger = Logger.getLogger(__filename);
 
-const eventEmitter = new EventEmitter();
-
-UI.eventEmitter = eventEmitter;
-
 let etherpadManager;
 
-const UIListeners = new Map([
-    [
-        UIEvents.ETHERPAD_CLICKED,
-        () => etherpadManager && etherpadManager.toggleEtherpad()
-    ], [
-        UIEvents.TOGGLE_FILMSTRIP,
-        () => UI.toggleFilmstrip()
-    ]
-]);
-
 /**
  * Indicates if we're currently in full screen mode.
  *
@@ -96,10 +79,11 @@ UI.start = function() {
 };
 
 /**
- * Setup some UI event listeners.
+ * Handles etherpad click.
  */
-UI.registerListeners
-    = () => UIListeners.forEach((value, key) => UI.addListener(key, value));
+UI.onEtherpadClicked = function() {
+    etherpadManager && etherpadManager.toggleEtherpad();
+};
 
 /**
  *
@@ -143,7 +127,7 @@ UI.initEtherpad = name => {
     }
     logger.log('Etherpad is enabled');
 
-    etherpadManager = new EtherpadManager(eventEmitter);
+    etherpadManager = new EtherpadManager();
 
     const url = new URL(name, etherpadBaseUrl);
 
@@ -197,15 +181,6 @@ UI.updateUserStatus = (user, status) => {
     }, NOTIFICATION_TIMEOUT_TYPE.SHORT));
 };
 
-/**
- * Toggles filmstrip.
- */
-UI.toggleFilmstrip = function() {
-    const { visible } = APP.store.getState()['features/filmstrip'];
-
-    APP.store.dispatch(setFilmstripVisible(!visible));
-};
-
 /**
  * Sets muted video state for participant
  */
@@ -219,33 +194,6 @@ UI.setVideoMuted = function(id) {
 
 UI.updateLargeVideo = (id, forceUpdate) => VideoLayout.updateLargeVideo(id, forceUpdate);
 
-/**
- * Adds a listener that would be notified on the given type of event.
- *
- * @param type the type of the event we're listening for
- * @param listener a function that would be called when notified
- */
-UI.addListener = function(type, listener) {
-    eventEmitter.on(type, listener);
-};
-
-/**
- * Removes the all listeners for all events.
- *
- * @returns {void}
- */
-UI.removeAllListeners = function() {
-    eventEmitter.removeAllListeners();
-};
-
-/**
- * Emits the event of given type by specifying the parameters in options.
- *
- * @param type the type of the event we're emitting
- * @param options the parameters for the event
- */
-UI.emitEvent = (type, ...options) => eventEmitter.emit(type, ...options);
-
 // Used by torture.
 UI.showToolbar = timeout => APP.store.dispatch(showToolbox(timeout));
 
diff --git a/node_modules/@jitsi/react-native-sdk/modules/UI/etherpad/Etherpad.js b/node_modules/@jitsi/react-native-sdk/modules/UI/etherpad/Etherpad.js
index a11014d..9031bcd 100644
--- a/node_modules/@jitsi/react-native-sdk/modules/UI/etherpad/Etherpad.js
+++ b/node_modules/@jitsi/react-native-sdk/modules/UI/etherpad/Etherpad.js
@@ -138,8 +138,7 @@ export default class EtherpadManager {
     /**
      *
      */
-    constructor(eventEmitter) {
-        this.eventEmitter = eventEmitter;
+    constructor() {
         this.etherpad = null;
     }
 
diff --git a/node_modules/@jitsi/react-native-sdk/modules/UI/videolayout/LargeVideoManager.js b/node_modules/@jitsi/react-native-sdk/modules/UI/videolayout/LargeVideoManager.js
index e240088..3895e48 100644
--- a/node_modules/@jitsi/react-native-sdk/modules/UI/videolayout/LargeVideoManager.js
+++ b/node_modules/@jitsi/react-native-sdk/modules/UI/videolayout/LargeVideoManager.js
@@ -11,6 +11,7 @@ import { createScreenSharingIssueEvent } from '../../../react/features/analytics
 import { sendAnalytics } from '../../../react/features/analytics/functions';
 import Avatar from '../../../react/features/base/avatar/components/Avatar';
 import theme from '../../../react/features/base/components/themes/participantsPaneTheme.json';
+import { getSsrcRewritingFeatureFlag } from '../../../react/features/base/config/functions.any';
 import i18next from '../../../react/features/base/i18n/i18next';
 import { JitsiTrackEvents } from '../../../react/features/base/lib-jitsi-meet';
 import { VIDEO_TYPE } from '../../../react/features/base/media/constants';
@@ -221,10 +222,10 @@ export default class LargeVideoManager {
 
         this.updateInProcess = true;
 
-        // Include hide()/fadeOut only if we're switching between users
-        // eslint-disable-next-line eqeqeq
+        // Include hide()/fadeOut if we're switching between users or between different sources of the same user.
         const container = this.getCurrentContainer();
-        const isUserSwitch = this.newStreamData.id !== container.id;
+        const isUserSwitch = container.id !== this.newStreamData.id
+            || container.stream?.getSourceName() !== this.newStreamData.stream?.getSourceName();
         const preUpdate = isUserSwitch ? container.hide() : Promise.resolve();
 
         preUpdate.then(() => {
diff --git a/node_modules/@jitsi/react-native-sdk/modules/UI/videolayout/VideoContainer.js b/node_modules/@jitsi/react-native-sdk/modules/UI/videolayout/VideoContainer.js
index e526a3a..22e4be5 100644
--- a/node_modules/@jitsi/react-native-sdk/modules/UI/videolayout/VideoContainer.js
+++ b/node_modules/@jitsi/react-native-sdk/modules/UI/videolayout/VideoContainer.js
@@ -501,8 +501,7 @@ export class VideoContainer extends LargeContainer {
      * @param {string} videoType video type
      */
     setStream(userID, stream, videoType) {
-        this.userId = userID;
-        if (this.stream === stream && !stream?.forceStreamToReattach) {
+        if (this.userId === userID && this.stream === stream && !stream?.forceStreamToReattach) {
             logger.debug(`SetStream on the large video for user ${userID} ignored: the stream is not changed!`);
 
             // Handles the use case for the remote participants when the
@@ -516,6 +515,8 @@ export class VideoContainer extends LargeContainer {
             return;
         }
 
+        this.userId = userID;
+
         if (stream?.forceStreamToReattach) {
             delete stream.forceStreamToReattach;
         }
@@ -540,9 +541,8 @@ export class VideoContainer extends LargeContainer {
                 logger.error(`Attaching the remote track ${stream} to large video has failed with `, error);
             });
 
-            // Ensure large video gets play() called on it when a new stream is attached to it. This is necessary in the
-            // case of Safari as autoplay doesn't kick-in automatically on Safari 15 and newer versions.
-            browser.isWebKitBased() && this._play();
+            // Ensure large video gets play() called on it when a new stream is attached to it.
+            this._play();
 
             const flipX = stream.isLocal() && this.localFlipX && !this.isScreenSharing();
 
diff --git a/node_modules/@jitsi/react-native-sdk/prepare_sdk.js b/node_modules/@jitsi/react-native-sdk/prepare_sdk.js
index 4b5c4bc..4d4c153 100644
--- a/node_modules/@jitsi/react-native-sdk/prepare_sdk.js
+++ b/node_modules/@jitsi/react-native-sdk/prepare_sdk.js
@@ -114,10 +114,6 @@ copyFolderRecursiveSync(
     '../react',
     '.'
 );
-copyFolderRecursiveSync(
-    '../service',
-    '.'
-);
 copyFolderRecursiveSync(
     '../ios/sdk/sdk.xcodeproj',
     './ios'
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/HangupButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/HangupButton.tsx
index 5b97f60..664cf65 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/HangupButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/HangupButton.tsx
@@ -15,46 +15,47 @@ type Props = Partial<IProps>;
  * Stateless hangup button for the Always-on-Top windows.
  */
 export default class HangupButton extends Component<Props> {
-
-    accessibilityLabel = 'Hangup';
-    icon = DEFAULT_ICON.IconHangup;
-
-    /**
-     * Initializes a new {@code HangupButton} instance.
-     *
-     * @param {IProps} props - The React {@code Component} props to initialize
-     * the new {@code HangupButton} instance with.
-     */
-    constructor(props: Props) {
-        super(props);
-
-        // Bind event handlers so they are only bound once per instance.
-        this._onClick = this._onClick.bind(this);
-    }
-
-    /**
-     * Handles clicking / pressing the button, and disconnects the conference.
-     *
-     * @protected
-     * @returns {void}
-     */
-    _onClick() {
-        api.executeCommand('hangup');
-    }
-
-    /**
-     * Implements React's {@link Component#render()}.
-     *
-     * @inheritdoc
-     * @returns {ReactElement}
-     */
-    render() {
-        return (
-            <ToolbarButton
-                accessibilityLabel = { this.accessibilityLabel }
-                customClass = 'hangup-button'
-                icon = { this.icon }
-                onClick = { this._onClick } />
-        );
-    }
+	accessibilityLabel = 'Hangup';
+	icon = DEFAULT_ICON.IconHangup;
+
+	/**
+	 * Initializes a new {@code HangupButton} instance.
+	 *
+	 * @param {IProps} props - The React {@code Component} props to initialize
+	 * the new {@code HangupButton} instance with.
+	 */
+	constructor(props: Props) {
+		super(props);
+
+		// Bind event handlers so they are only bound once per instance.
+		this._onClick = this._onClick.bind(this);
+	}
+
+	/**
+	 * Handles clicking / pressing the button, and disconnects the conference.
+	 *
+	 * @protected
+	 * @returns {void}
+	 */
+	_onClick() {
+		console.log('hannnnnnnnnggggggggg');
+		api.executeCommand('hangup');
+	}
+
+	/**
+	 * Implements React's {@link Component#render()}.
+	 *
+	 * @inheritdoc
+	 * @returns {ReactElement}
+	 */
+	render() {
+		return (
+			<ToolbarButton
+				accessibilityLabel={this.accessibilityLabel}
+				customClass='hangup-button'
+				icon={this.icon}
+				onClick={this._onClick}
+			/>
+		);
+	}
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/Toolbar.tsx b/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/Toolbar.tsx
index 845e9fd..617f27a 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/Toolbar.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/Toolbar.tsx
@@ -8,21 +8,20 @@ import VideoMuteButton from './VideoMuteButton';
  * The type of the React {@code Component} props of {@link Toolbar}.
  */
 interface IProps {
+	/**
+	 * Additional CSS class names to add to the root of the toolbar.
+	 */
+	className: string;
 
-    /**
-     * Additional CSS class names to add to the root of the toolbar.
-     */
-    className: string;
+	/**
+	 * Callback invoked when no longer moused over the toolbar.
+	 */
+	onMouseOut: (e?: React.MouseEvent) => void;
 
-    /**
-     * Callback invoked when no longer moused over the toolbar.
-     */
-    onMouseOut: (e?: React.MouseEvent) => void;
-
-    /**
-     * Callback invoked when the mouse has moved over the toolbar.
-     */
-    onMouseOver: (e?: React.MouseEvent) => void;
+	/**
+	 * Callback invoked when the mouse has moved over the toolbar.
+	 */
+	onMouseOver: (e?: React.MouseEvent) => void;
 }
 
 /**
@@ -31,28 +30,24 @@ interface IProps {
  * @augments Component
  */
 export default class Toolbar extends Component<IProps> {
-    /**
-     * Implements React's {@link Component#render()}.
-     *
-     * @inheritdoc
-     * @returns {ReactElement}
-     */
-    render() {
-        const {
-            className = '',
-            onMouseOut,
-            onMouseOver
-        } = this.props;
+	/**
+	 * Implements React's {@link Component#render()}.
+	 *
+	 * @inheritdoc
+	 * @returns {ReactElement}
+	 */
+	render() {
+		const { className = '', onMouseOut, onMouseOver } = this.props;
 
-        return (
-            <div
-                className = { `toolbox-content-items always-on-top-toolbox ${className}` }
-                onMouseOut = { onMouseOut }
-                onMouseOver = { onMouseOver }>
-                <AudioMuteButton />
-                <VideoMuteButton />
-                <HangupButton customClass = 'hangup-button' />
-            </div>
-        );
-    }
+		return (
+			<div
+				className={`toolbox-content-items always-on-top-toolbox ${className}`}
+				onMouseOut={onMouseOut}
+				onMouseOver={onMouseOver}>
+				<AudioMuteButton />
+				<VideoMuteButton />
+				<HangupButton customClass='hangup-button' />
+			</div>
+		);
+	}
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/ToolbarButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/ToolbarButton.tsx
index 5bcafac..3489c3b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/ToolbarButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/ToolbarButton.tsx
@@ -3,67 +3,64 @@ import React, { useCallback } from 'react';
 import Icon from '../base/icons/components/Icon';
 
 interface IProps {
+	/**
+	 * Accessibility label for button.
+	 */
+	accessibilityLabel: string;
 
-    /**
-     * Accessibility label for button.
-     */
-    accessibilityLabel: string;
+	/**
+	 * An extra class name to be added at the end of the element's class name
+	 * in order to enable custom styling.
+	 */
+	customClass?: string;
 
-    /**
-     * An extra class name to be added at the end of the element's class name
-     * in order to enable custom styling.
-     */
-    customClass?: string;
+	/**
+	 * Whether or not the button is disabled.
+	 */
+	disabled?: boolean;
 
-    /**
-     * Whether or not the button is disabled.
-     */
-    disabled?: boolean;
+	/**
+	 * Button icon.
+	 */
+	icon: Function;
 
-    /**
-     * Button icon.
-     */
-    icon: Function;
+	/**
+	 * Click handler.
+	 */
+	onClick: (e?: React.MouseEvent) => void;
 
-    /**
-     * Click handler.
-     */
-    onClick: (e?: React.MouseEvent) => void;
-
-    /**
-     * Whether or not the button is toggled.
-     */
-    toggled?: boolean;
+	/**
+	 * Whether or not the button is toggled.
+	 */
+	toggled?: boolean;
 }
 
-const ToolbarButton = ({
-    accessibilityLabel,
-    customClass,
-    disabled = false,
-    onClick,
-    icon,
-    toggled = false
-}: IProps) => {
-    const onKeyPress = useCallback(event => {
-        if (event.key === 'Enter' || event.key === ' ') {
-            event.preventDefault();
-            onClick();
-        }
-    }, [ onClick ]);
+const ToolbarButton = ({ accessibilityLabel, customClass, disabled = false, onClick, icon, toggled = false }: IProps) => {
+	const onKeyPress = useCallback(
+		event => {
+			if (event.key === 'Enter' || event.key === ' ') {
+				event.preventDefault();
+				onClick();
+			}
+		},
+		[onClick]
+	);
 
-    return (<div
-        aria-disabled = { disabled }
-        aria-label = { accessibilityLabel }
-        aria-pressed = { toggled }
-        className = { `toolbox-button ${disabled ? ' disabled' : ''}` }
-        onClick = { disabled ? undefined : onClick }
-        onKeyPress = { disabled ? undefined : onKeyPress }
-        role = 'button'
-        tabIndex = { 0 }>
-        <div className = { `toolbox-icon ${disabled ? 'disabled' : ''} ${customClass ?? ''}` }>
-            <Icon src = { icon } />
-        </div>
-    </div>);
+	return (
+		<div
+			aria-disabled={disabled}
+			aria-label={accessibilityLabel}
+			aria-pressed={toggled}
+			className={`toolbox-button ${disabled ? ' disabled' : ''}`}
+			onClick={disabled ? undefined : onClick}
+			onKeyPress={disabled ? undefined : onKeyPress}
+			role='button'
+			tabIndex={0}>
+			<div className={`toolbox-icon ${disabled ? 'disabled' : ''} ${customClass ?? ''}`}>
+				<Icon src={icon} />
+			</div>
+		</div>
+	);
 };
 
 export default ToolbarButton;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/VideoMuteButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/VideoMuteButton.tsx
index f6522c0..d7cb582 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/VideoMuteButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/always-on-top/VideoMuteButton.tsx
@@ -15,166 +15,158 @@ type Props = Partial<IProps>;
  * The type of the React {@code Component} state of {@link VideoMuteButton}.
  */
 type State = {
-
-    /**
-     * Whether video is available is not.
-     */
-    videoAvailable: boolean;
-
-    /**
-     * Whether video is muted or not.
-     */
-    videoMuted: boolean;
+	/**
+	 * Whether video is available is not.
+	 */
+	videoAvailable: boolean;
+
+	/**
+	 * Whether video is muted or not.
+	 */
+	videoMuted: boolean;
 };
 
 /**
  * Stateless "mute/unmute video" button for the Always-on-Top windows.
  */
 export default class VideoMuteButton extends Component<Props, State> {
-
-    icon = DEFAULT_ICON.IconVideo;
-    toggledIcon = DEFAULT_ICON.IconVideoOff;
-    accessibilityLabel = 'Video mute';
-
-    /**
-     * Initializes a new {@code VideoMuteButton} instance.
-     *
-     * @param {Props} props - The React {@code Component} props to initialize
-     * the new {@code VideoMuteButton} instance with.
-     */
-    constructor(props: Props) {
-        super(props);
-
-        this.state = {
-            videoAvailable: false,
-            videoMuted: true
-        };
-
-        // Bind event handlers so they are only bound once per instance.
-        this._videoAvailabilityListener
-            = this._videoAvailabilityListener.bind(this);
-        this._videoMutedListener = this._videoMutedListener.bind(this);
-        this._onClick = this._onClick.bind(this);
-    }
-
-    /**
-     * Sets mouse move listener and initial toolbar timeout.
-     *
-     * @inheritdoc
-     * @returns {void}
-     */
-    componentDidMount() {
-        api.on('videoAvailabilityChanged', this._videoAvailabilityListener);
-        api.on('videoMuteStatusChanged', this._videoMutedListener);
-
-        Promise.all([
-            api.isVideoAvailable(),
-            api.isVideoMuted()
-        ])
-            .then(([ videoAvailable, videoMuted ]) =>
-                this.setState({
-                    videoAvailable,
-                    videoMuted
-                }))
-            .catch(console.error);
-    }
-
-    /**
-     * Removes all listeners.
-     *
-     * @inheritdoc
-     * @returns {void}
-     */
-    componentWillUnmount() {
-        api.removeListener(
-            'videoAvailabilityChanged',
-            this._videoAvailabilityListener);
-        api.removeListener(
-            'videoMuteStatusChanged',
-            this._videoMutedListener);
-    }
-
-    /**
-     * Indicates whether this button is disabled or not.
-     *
-     * @override
-     * @protected
-     * @returns {boolean}
-     */
-    _isDisabled() {
-        return !this.state.videoAvailable;
-    }
-
-    /**
-     * Indicates if video is currently muted or not.
-     *
-     * @override
-     * @protected
-     * @returns {boolean}
-     */
-    _isVideoMuted() {
-        return this.state.videoMuted;
-    }
-
-    /**
-     * Changes the muted state.
-     *
-     * @override
-     * @param {boolean} _videoMuted - Whether video should be muted or not.
-     * @protected
-     * @returns {void}
-     */
-    _setVideoMuted(_videoMuted: boolean) {
-        this.state.videoAvailable && api.executeCommand('toggleVideo', false, true);
-    }
-
-    /**
-     * Handles video available api events.
-     *
-     * @param {{ available: boolean }} status - The new available status.
-     * @returns {void}
-     */
-    _videoAvailabilityListener({ available }: { available: boolean; }) {
-        this.setState({ videoAvailable: available });
-    }
-
-    /**
-     * Handles video muted api events.
-     *
-     * @param {{ muted: boolean }} status - The new muted status.
-     * @returns {void}
-     */
-    _videoMutedListener({ muted }: { muted: boolean; }) {
-        this.setState({ videoMuted: muted });
-    }
-
-    /**
-     * Handles clicking / pressing the button, and toggles the video mute state
-     * accordingly.
-     *
-     * @protected
-     * @returns {void}
-     */
-    _onClick() {
-        this._setVideoMuted(!this._isVideoMuted());
-    }
-
-    /**
-     * Implements React's {@link Component#render()}.
-     *
-     * @inheritdoc
-     * @returns {ReactElement}
-     */
-    render() {
-        const toggled = this._isVideoMuted();
-
-        return (
-            <ToolbarButton
-                accessibilityLabel = { this.accessibilityLabel }
-                disabled = { this._isDisabled() }
-                icon = { toggled ? this.toggledIcon : this.icon }
-                onClick = { this._onClick }
-                toggled = { toggled } />
-        );
-    }
+	icon = DEFAULT_ICON.IconVideo;
+	toggledIcon = DEFAULT_ICON.IconVideoOff;
+	accessibilityLabel = 'Video mute';
+
+	/**
+	 * Initializes a new {@code VideoMuteButton} instance.
+	 *
+	 * @param {Props} props - The React {@code Component} props to initialize
+	 * the new {@code VideoMuteButton} instance with.
+	 */
+	constructor(props: Props) {
+		super(props);
+
+		this.state = {
+			videoAvailable: false,
+			videoMuted: true
+		};
+
+		// Bind event handlers so they are only bound once per instance.
+		this._videoAvailabilityListener = this._videoAvailabilityListener.bind(this);
+		this._videoMutedListener = this._videoMutedListener.bind(this);
+		this._onClick = this._onClick.bind(this);
+	}
+
+	/**
+	 * Sets mouse move listener and initial toolbar timeout.
+	 *
+	 * @inheritdoc
+	 * @returns {void}
+	 */
+	componentDidMount() {
+		api.on('videoAvailabilityChanged', this._videoAvailabilityListener);
+		api.on('videoMuteStatusChanged', this._videoMutedListener);
+
+		Promise.all([api.isVideoAvailable(), api.isVideoMuted()])
+			.then(([videoAvailable, videoMuted]) =>
+				this.setState({
+					videoAvailable,
+					videoMuted
+				})
+			)
+			.catch(console.error);
+	}
+
+	/**
+	 * Removes all listeners.
+	 *
+	 * @inheritdoc
+	 * @returns {void}
+	 */
+	componentWillUnmount() {
+		api.removeListener('videoAvailabilityChanged', this._videoAvailabilityListener);
+		api.removeListener('videoMuteStatusChanged', this._videoMutedListener);
+	}
+
+	/**
+	 * Indicates whether this button is disabled or not.
+	 *
+	 * @override
+	 * @protected
+	 * @returns {boolean}
+	 */
+	_isDisabled() {
+		return !this.state.videoAvailable;
+	}
+
+	/**
+	 * Indicates if video is currently muted or not.
+	 *
+	 * @override
+	 * @protected
+	 * @returns {boolean}
+	 */
+	_isVideoMuted() {
+		return this.state.videoMuted;
+	}
+
+	/**
+	 * Changes the muted state.
+	 *
+	 * @override
+	 * @param {boolean} _videoMuted - Whether video should be muted or not.
+	 * @protected
+	 * @returns {void}
+	 */
+	_setVideoMuted(_videoMuted: boolean) {
+		this.state.videoAvailable && api.executeCommand('toggleVideo', false, true);
+	}
+
+	/**
+	 * Handles video available api events.
+	 *
+	 * @param {{ available: boolean }} status - The new available status.
+	 * @returns {void}
+	 */
+	_videoAvailabilityListener({ available }: { available: boolean }) {
+		this.setState({ videoAvailable: available });
+	}
+
+	/**
+	 * Handles video muted api events.
+	 *
+	 * @param {{ muted: boolean }} status - The new muted status.
+	 * @returns {void}
+	 */
+	_videoMutedListener({ muted }: { muted: boolean }) {
+		this.setState({ videoMuted: muted });
+	}
+
+	/**
+	 * Handles clicking / pressing the button, and toggles the video mute state
+	 * accordingly.
+	 *
+	 * @protected
+	 * @returns {void}
+	 */
+	_onClick() {
+		this._setVideoMuted(!this._isVideoMuted());
+	}
+
+	/**
+	 * Implements React's {@link Component#render()}.
+	 *
+	 * @inheritdoc
+	 * @returns {ReactElement}
+	 */
+	render() {
+		const toggled = this._isVideoMuted();
+
+		return (
+			<ToolbarButton
+				accessibilityLabel={this.accessibilityLabel}
+				disabled={this._isDisabled()}
+				icon={toggled ? this.toggledIcon : this.icon}
+				onClick={this._onClick}
+				toggled={toggled}
+			/>
+		);
+	}
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/analytics/AnalyticsEvents.ts b/node_modules/@jitsi/react-native-sdk/react/features/analytics/AnalyticsEvents.ts
index 61f5ebd..7a61771 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/analytics/AnalyticsEvents.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/analytics/AnalyticsEvents.ts
@@ -331,15 +331,17 @@ export function createNetworkInfoEvent({ isOnline, networkType, details }:
 /**
  * Creates a "not allowed error" event.
  *
+ * @param {string} type - The type of the error.
  * @param {string} reason - The reason for the error.
  * @returns {Object} The event in a format suitable for sending via
  * sendAnalytics.
  */
-export function createNotAllowedErrorEvent(reason: string) {
+export function createNotAllowedErrorEvent(type: string, reason: string) {
     return {
         action: 'not.allowed.error',
         attributes: {
-            reason
+            reason,
+            type
         }
     };
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/app/actions.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/app/actions.native.ts
index 1af9a36..23ef235 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/app/actions.native.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/app/actions.native.ts
@@ -151,7 +151,7 @@ export function appNavigate(uri?: string, options: IReloadNowOptions = {}) {
         }
 
         dispatch(setLocationURL(locationURL));
-        dispatch(setConfig(config, locationURL));
+        dispatch(setConfig(config));
         dispatch(setRoom(room));
 
         if (!room) {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/app/actions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/app/actions.web.ts
index 9c482a3..476b414 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/app/actions.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/app/actions.web.ts
@@ -74,7 +74,7 @@ export function appNavigate(uri?: string) {
         const config = await loadConfig();
 
         dispatch(setLocationURL(locationURL));
-        dispatch(setConfig(config, locationURL));
+        dispatch(setConfig(config));
         dispatch(setRoom(room));
     };
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/app/components/App.native.tsx b/node_modules/@jitsi/react-native-sdk/react/features/app/components/App.native.tsx
index d018e72..5cf8538 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/app/components/App.native.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/app/components/App.native.tsx
@@ -2,7 +2,7 @@ import React, { ComponentType } from 'react';
 import { NativeModules, Platform, StyleSheet, View } from 'react-native';
 import DeviceInfo from 'react-native-device-info';
 import { SafeAreaProvider } from 'react-native-safe-area-context';
-import SplashScreen from 'react-native-splash-screen';
+import SplashScreen from 'react-native-lottie-splash-screen';
 
 import BottomSheetContainer from '../../base/dialog/components/native/BottomSheetContainer';
 import DialogContainer from '../../base/dialog/components/native/DialogContainer';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/app/middlewares.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/app/middlewares.any.ts
index a750e31..34ce7c0 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/app/middlewares.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/app/middlewares.any.ts
@@ -39,6 +39,7 @@ import '../notifications/middleware';
 import '../overlay/middleware';
 import '../participants-pane/middleware';
 import '../polls/middleware';
+import '../polls-history/middleware';
 import '../reactions/middleware';
 import '../recent-list/middleware';
 import '../recording/middleware';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/app/reducer.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/app/reducer.native.ts
index 6451dbb..89623fa 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/app/reducer.native.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/app/reducer.native.ts
@@ -10,13 +10,13 @@ import { _ROOT_NAVIGATION_READY } from '../mobile/navigation/actionTypes';
  * @returns {Object}
  */
 ReducerRegistry.register('features/app', (state: Object = {}, action) => {
-    switch (action.type) {
-    case _ROOT_NAVIGATION_READY:
-        return {
-            ...state,
-            ready: action.ready
-        };
-    default:
-        return state;
-    }
+	switch (action.type) {
+		case _ROOT_NAVIGATION_READY:
+			return {
+				...state,
+				ready: action.ready
+			};
+		default:
+			return state;
+	}
 });
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/app/reducers.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/app/reducers.any.ts
index 3af1e69..e2526a0 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/app/reducers.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/app/reducers.any.ts
@@ -41,6 +41,7 @@ import '../notifications/reducer';
 import '../overlay/reducer';
 import '../participants-pane/reducer';
 import '../polls/reducer';
+import '../polls-history/reducer';
 import '../reactions/reducer';
 import '../recent-list/reducer';
 import '../recording/reducer';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/app/types.ts b/node_modules/@jitsi/react-native-sdk/react/features/app/types.ts
index 9293206..272d5bd 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/app/types.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/app/types.ts
@@ -60,6 +60,7 @@ import { INotificationsState } from '../notifications/reducer';
 import { IOverlayState } from '../overlay/reducer';
 import { IParticipantsPaneState } from '../participants-pane/reducer';
 import { IPollsState } from '../polls/reducer';
+import { IPollsHistoryState } from '../polls-history/reducer';
 import { IPowerMonitorState } from '../power-monitor/reducer';
 import { IPrejoinState } from '../prejoin/reducer';
 import { IReactionsState } from '../reactions/reducer';
@@ -149,6 +150,7 @@ export interface IReduxState {
     'features/overlay': IOverlayState;
     'features/participants-pane': IParticipantsPaneState;
     'features/polls': IPollsState;
+    'features/polls-history': IPollsHistoryState;
     'features/power-monitor': IPowerMonitorState;
     'features/prejoin': IPrejoinState;
     'features/reactions': IReactionsState;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/authentication/components/web/LoginDialog.tsx b/node_modules/@jitsi/react-native-sdk/react/features/authentication/components/web/LoginDialog.tsx
index a6bc342..00ff3de 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/authentication/components/web/LoginDialog.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/authentication/components/web/LoginDialog.tsx
@@ -5,12 +5,12 @@ import { connect as reduxConnect } from 'react-redux';
 import { IReduxState, IStore } from '../../../app/types';
 import { IJitsiConference } from '../../../base/conference/reducer';
 import { IConfig } from '../../../base/config/configType';
+import { connect } from '../../../base/connection/actions.web';
 import { toJid } from '../../../base/connection/functions';
 import { translate, translateToHTML } from '../../../base/i18n/functions';
 import { JitsiConnectionErrors } from '../../../base/lib-jitsi-meet';
 import Dialog from '../../../base/ui/components/web/Dialog';
 import Input from '../../../base/ui/components/web/Input';
-import { joinConference } from '../../../prejoin/actions.web';
 import {
     authenticateAndUpgradeRole,
     cancelLogin
@@ -134,9 +134,7 @@ class LoginDialog extends Component<IProps, IState> {
         if (conference) {
             dispatch(authenticateAndUpgradeRole(jid, password, conference));
         } else {
-            // dispatch(connect(jid, password));
-            // FIXME: Workaround for the web version. To be removed once we get rid of conference.js
-            dispatch(joinConference(undefined, false, jid, password));
+            dispatch(connect(jid, password));
         }
     }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/authentication/components/web/WaitForOwnerDialog.tsx b/node_modules/@jitsi/react-native-sdk/react/features/authentication/components/web/WaitForOwnerDialog.tsx
index c47a7fb..9247293 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/authentication/components/web/WaitForOwnerDialog.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/authentication/components/web/WaitForOwnerDialog.tsx
@@ -17,6 +17,11 @@ interface IProps extends WithTranslation {
      */
     _alternativeCancelText?: boolean;
 
+    /**
+     * Whether to hide the login button.
+     */
+    _hideLoginButton?: boolean;
+
     /**
      * Redux store dispatch method.
      */
@@ -80,12 +85,13 @@ class WaitForOwnerDialog extends PureComponent<IProps> {
                         this.props._alternativeCancelText ? 'dialog.WaitingForHostButton' : 'dialog.Cancel' }}
                 disableBackdropClose = { true }
                 hideCloseButton = { true }
-                ok = {{ translationKey: 'dialog.IamHost' }}
+                ok = { this.props._hideLoginButton ? { hidden: true,
+                    disabled: true } : { translationKey: 'dialog.IamHost' } }
                 onCancel = { this._onCancelWaitForOwner }
                 onSubmit = { this._onIAmHost }
                 titleKey = { t('dialog.WaitingForHostTitle') }>
                 <span>
-                    { t('dialog.WaitForHostMsg') }
+                    { this.props._hideLoginButton ? t('dialog.WaitForHostNoAuthMsg') : t('dialog.WaitForHostMsg') }
                 </span>
             </Dialog>
         );
@@ -102,9 +108,11 @@ class WaitForOwnerDialog extends PureComponent<IProps> {
  */
 function mapStateToProps(state: IReduxState) {
     const { membersOnly, lobbyWaitingForHost } = state['features/base/conference'];
+    const { hideLoginButton } = state['features/base/config'];
 
     return {
-        _alternativeCancelText: membersOnly && lobbyWaitingForHost
+        _alternativeCancelText: membersOnly && lobbyWaitingForHost,
+        _hideLoginButton: hideLoginButton
     };
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/authentication/functions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/authentication/functions.any.ts
index f47713e..9890857 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/authentication/functions.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/authentication/functions.any.ts
@@ -72,8 +72,7 @@ export const _getTokenAuthState = (
         // @ts-ignore
         state['config.startWithVideoMuted'] = true;
     }
-
-    const params = parseURLParams(locationURL, true);
+    const params = parseURLParams(locationURL);
 
     for (const key of Object.keys(params)) {
         // we allow only config and interfaceConfig overrides in the state
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/authentication/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/authentication/middleware.ts
index 75a4597..0ecd6e8 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/authentication/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/authentication/middleware.ts
@@ -143,7 +143,8 @@ MiddlewareRegistry.register(store => next => action => {
 
     case CONNECTION_FAILED: {
         const { error } = action;
-        const state = store.getState();
+        const { getState } = store;
+        const state = getState();
         const { jwt } = state['features/base/jwt'];
 
         if (error
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/app/middleware.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/app/middleware.web.ts
index 902b08e..ece05d1 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/app/middleware.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/app/middleware.web.ts
@@ -18,7 +18,7 @@ let pressureObserver: typeof window.PressureObserver;
  * @param {Store} store - The redux store.
  * @returns {Function}
  */
-MiddlewareRegistry.register(() => (next: Function) => async (action: AnyAction) => {
+MiddlewareRegistry.register(() => (next: Function) => (action: AnyAction) => {
 
     switch (action.type) {
     case APP_WILL_MOUNT: {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/app/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/app/reducer.ts
index acf046f..724f3d1 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/app/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/app/reducer.ts
@@ -1,34 +1,37 @@
+import { leaveConference } from '@jitsi/react-native-sdk/react/features/base/conference/actions.any';
 import ReducerRegistry from '../redux/ReducerRegistry';
 
 import { APP_WILL_MOUNT, APP_WILL_UNMOUNT } from './actionTypes';
 
 export interface IAppState {
-    app?: any;
+	app?: any;
 }
 
 ReducerRegistry.register<IAppState>('features/base/app', (state = {}, action): IAppState => {
-    switch (action.type) {
-    case APP_WILL_MOUNT: {
-        const { app } = action;
+	switch (action.type) {
+		case APP_WILL_MOUNT: {
+			const { app } = action;
 
-        if (state.app !== app) {
-            return {
-                ...state,
-                app
-            };
-        }
-        break;
-    }
+			if (state.app !== app) {
+				return {
+					...state,
+					app
+				};
+			}
+			break;
+		}
 
-    case APP_WILL_UNMOUNT:
-        if (state.app === action.app) {
-            return {
-                ...state,
-                app: undefined
-            };
-        }
-        break;
-    }
+		case APP_WILL_UNMOUNT:
+			console.log('APP_WILL_UNMOUNT');
+			leaveConference();
+			if (state.app === action.app) {
+				return {
+					...state,
+					app: undefined
+				};
+			}
+			break;
+	}
 
-    return state;
+	return state;
 });
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/audio-only/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/audio-only/actions.ts
index 3560daf..04e5e7f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/audio-only/actions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/audio-only/actions.ts
@@ -1,5 +1,3 @@
-// @ts-expect-error
-import UIEvents from '../../../../service/UI/UIEvents';
 import { createAudioOnlyChangedEvent } from '../../analytics/AnalyticsEvents';
 import { sendAnalytics } from '../../analytics/functions';
 import { IStore } from '../../app/types';
@@ -33,7 +31,7 @@ export function setAudioOnly(audioOnly: boolean) {
             if (typeof APP !== 'undefined') {
                 // TODO This should be a temporary solution that lasts only until video
                 // tracks and all ui is moved into react/redux on the web.
-                APP.UI.emitEvent(UIEvents.TOGGLE_AUDIO_ONLY, audioOnly);
+                APP.conference.onToggleAudioOnly();
             }
         }
     };
@@ -48,6 +46,6 @@ export function toggleAudioOnly() {
     return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         const { enabled } = getState()['features/base/audio-only'];
 
-        return dispatch(setAudioOnly(!enabled));
+        dispatch(setAudioOnly(!enabled));
     };
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/color-scheme/defaultScheme.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/color-scheme/defaultScheme.ts
index 537d258..494269d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/color-scheme/defaultScheme.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/color-scheme/defaultScheme.ts
@@ -5,26 +5,26 @@ import { getRGBAFormat } from '../styles/functions.any';
  * The default color scheme of the application.
  */
 export default {
-    '_defaultTheme': {
-        // Generic app theme colors that are used across the entire app.
-        // All scheme definitions below inherit these values.
-        background: 'rgb(255, 255, 255)',
-        errorText: ColorPalette.red,
-        icon: 'rgb(28, 32, 37)',
-        text: 'rgb(28, 32, 37)'
-    },
-    'Dialog': {},
-    'Header': {
-        background: ColorPalette.blue,
-        icon: ColorPalette.white,
-        statusBar: ColorPalette.blueHighlight,
-        statusBarContent: ColorPalette.white,
-        text: ColorPalette.white
-    },
-    'Toolbox': {
-        button: 'rgb(255, 255, 255)',
-        buttonToggled: 'rgb(38, 58, 76)',
-        buttonToggledBorder: getRGBAFormat('#a4b8d1', 0.6),
-        hangup: 'rgb(227,79,86)'
-    }
+	_defaultTheme: {
+		// Generic app theme colors that are used across the entire app.
+		// All scheme definitions below inherit these values.
+		background: 'rgb(255, 255, 255)',
+		errorText: ColorPalette.red,
+		icon: 'rgb(28, 32, 37)',
+		text: 'rgb(28, 32, 37)'
+	},
+	Dialog: {},
+	Header: {
+		background: ColorPalette.blue,
+		icon: ColorPalette.white,
+		statusBar: ColorPalette.blueHighlight,
+		statusBarContent: ColorPalette.white,
+		text: ColorPalette.white
+	},
+	Toolbox: {
+		button: 'rgb(255, 255, 255)',
+		buttonToggled: 'rgb(38, 58, 76)',
+		buttonToggledBorder: getRGBAFormat('#a4b8d1', 0.6),
+		hangup: 'rgb(227,79,86)'
+	}
 };
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/actions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/actions.any.ts
new file mode 100644
index 0000000..b3afa4a
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/actions.any.ts
@@ -0,0 +1,1080 @@
+import { createStartMutedConfigurationEvent } from '../../analytics/AnalyticsEvents';
+import { sendAnalytics } from '../../analytics/functions';
+import { IReduxState, IStore } from '../../app/types';
+import { setIAmVisitor } from '../../visitors/actions';
+import { iAmVisitor } from '../../visitors/functions';
+import { overwriteConfig } from '../config/actions';
+import { getReplaceParticipant } from '../config/functions';
+import { connect, disconnect, hangup } from '../connection/actions.native';
+import { JITSI_CONNECTION_CONFERENCE_KEY } from '../connection/constants';
+import { hasAvailableDevices } from '../devices/functions.any';
+import { JitsiConferenceEvents, JitsiE2ePingEvents } from '../lib-jitsi-meet';
+import { setAudioMuted, setAudioUnmutePermissions, setVideoMuted, setVideoUnmutePermissions } from '../media/actions';
+import { MEDIA_TYPE, MediaType } from '../media/constants';
+import {
+	dominantSpeakerChanged,
+	participantKicked,
+	participantMutedUs,
+	participantPresenceChanged,
+	participantRoleChanged,
+	participantSourcesUpdated,
+	participantUpdated
+} from '../participants/actions';
+import { getNormalizedDisplayName } from '../participants/functions';
+import { IJitsiParticipant } from '../participants/types';
+import { toState } from '../redux/functions';
+import { destroyLocalTracks, replaceLocalTrack, trackAdded, trackRemoved } from '../tracks/actions.any';
+import { getLocalTracks } from '../tracks/functions';
+import { getBackendSafeRoomName } from '../util/uri';
+
+import {
+	AUTH_STATUS_CHANGED,
+	CONFERENCE_FAILED,
+	CONFERENCE_JOINED,
+	CONFERENCE_JOIN_IN_PROGRESS,
+	CONFERENCE_LEFT,
+	CONFERENCE_LOCAL_SUBJECT_CHANGED,
+	CONFERENCE_SUBJECT_CHANGED,
+	CONFERENCE_TIMESTAMP_CHANGED,
+	CONFERENCE_UNIQUE_ID_SET,
+	CONFERENCE_WILL_INIT,
+	CONFERENCE_WILL_JOIN,
+	CONFERENCE_WILL_LEAVE,
+	DATA_CHANNEL_CLOSED,
+	DATA_CHANNEL_OPENED,
+	E2E_RTT_CHANGED,
+	ENDPOINT_MESSAGE_RECEIVED,
+	KICKED_OUT,
+	LOCK_STATE_CHANGED,
+	NON_PARTICIPANT_MESSAGE_RECEIVED,
+	P2P_STATUS_CHANGED,
+	SEND_TONES,
+	SET_ASSUMED_BANDWIDTH_BPS,
+	SET_FOLLOW_ME,
+	SET_OBFUSCATED_ROOM,
+	SET_PASSWORD,
+	SET_PASSWORD_FAILED,
+	SET_PENDING_SUBJECT_CHANGE,
+	SET_ROOM,
+	SET_START_MUTED_POLICY,
+	SET_START_REACTIONS_MUTED,
+	UPDATE_CONFERENCE_METADATA
+} from './actionTypes';
+import { setupVisitorStartupMedia } from './actions';
+import { AVATAR_URL_COMMAND, EMAIL_COMMAND, JITSI_CONFERENCE_URL_KEY } from './constants';
+import {
+	_addLocalTracksToConference,
+	commonUserJoinedHandling,
+	commonUserLeftHandling,
+	getConferenceOptions,
+	getConferenceState,
+	getCurrentConference,
+	getVisitorOptions,
+	sendLocalParticipant
+} from './functions';
+import logger from './logger';
+import { IConferenceMetadata, IJitsiConference } from './reducer';
+
+/**
+ * Adds conference (event) listeners.
+ *
+ * @param {JitsiConference} conference - The JitsiConference instance.
+ * @param {Dispatch} dispatch - The Redux dispatch function.
+ * @param {Object} state - The Redux state.
+ * @private
+ * @returns {void}
+ */
+function _addConferenceListeners(conference: IJitsiConference, dispatch: IStore['dispatch'], state: IReduxState) {
+	// A simple logger for conference errors received through
+	// the listener. These errors are not handled now, but logged.
+	conference.on(JitsiConferenceEvents.CONFERENCE_ERROR, (error: Error) => logger.error('Conference error.', error));
+
+	// Dispatches into features/base/conference follow:
+
+	// we want to ignore this event in case of tokenAuthUrl config
+	// we are deprecating this and at some point will get rid of it
+	if (!state['features/base/config'].tokenAuthUrl) {
+		conference.on(JitsiConferenceEvents.AUTH_STATUS_CHANGED, (authEnabled: boolean, authLogin: string) =>
+			dispatch(authStatusChanged(authEnabled, authLogin))
+		);
+	}
+
+	conference.on(JitsiConferenceEvents.CONFERENCE_FAILED, (err: string, ...args: any[]) =>
+		dispatch(conferenceFailed(conference, err, ...args))
+	);
+	conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, (..._args: any[]) => dispatch(conferenceJoined(conference)));
+	conference.on(JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET, (..._args: any[]) => dispatch(conferenceUniqueIdSet(conference)));
+	conference.on(JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS, (..._args: any[]) =>
+		dispatch(conferenceJoinInProgress(conference))
+	);
+	conference.on(JitsiConferenceEvents.CONFERENCE_LEFT, (..._args: any[]) => {
+		dispatch(conferenceTimestampChanged(0));
+		dispatch(conferenceLeft(conference));
+	});
+	conference.on(JitsiConferenceEvents.SUBJECT_CHANGED, (subject: string) => dispatch(conferenceSubjectChanged(subject)));
+
+	conference.on(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, (timestamp: number) =>
+		dispatch(conferenceTimestampChanged(timestamp))
+	);
+
+	conference.on(JitsiConferenceEvents.KICKED, (participant: any) => dispatch(kickedOut(conference, participant)));
+
+	conference.on(JitsiConferenceEvents.PARTICIPANT_KICKED, (kicker: any, kicked: any) =>
+		dispatch(participantKicked(kicker, kicked))
+	);
+
+	conference.on(JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED, (jitsiParticipant: IJitsiParticipant) =>
+		dispatch(participantSourcesUpdated(jitsiParticipant))
+	);
+
+	conference.on(JitsiConferenceEvents.LOCK_STATE_CHANGED, (locked: boolean) => dispatch(lockStateChanged(conference, locked)));
+
+	// Dispatches into features/base/media follow:
+
+	conference.on(JitsiConferenceEvents.STARTED_MUTED, () => {
+		const audioMuted = Boolean(conference.isStartAudioMuted());
+		const videoMuted = Boolean(conference.isStartVideoMuted());
+		const localTracks = getLocalTracks(state['features/base/tracks']);
+
+		sendAnalytics(createStartMutedConfigurationEvent('remote', audioMuted, videoMuted));
+		logger.log(`Start muted: ${audioMuted ? 'audio, ' : ''}${videoMuted ? 'video' : ''}`);
+
+		// XXX Jicofo tells lib-jitsi-meet to start with audio and/or video
+		// muted i.e. Jicofo expresses an intent. Lib-jitsi-meet has turned
+		// Jicofo's intent into reality by actually muting the respective
+		// tracks. The reality is expressed in base/tracks already so what
+		// is left is to express Jicofo's intent in base/media.
+		// TODO Maybe the app needs to learn about Jicofo's intent and
+		// transfer that intent to lib-jitsi-meet instead of lib-jitsi-meet
+		// acting on Jicofo's intent without the app's knowledge.
+		dispatch(setAudioMuted(audioMuted));
+		dispatch(setVideoMuted(videoMuted));
+
+		// Remove the tracks from peerconnection as well.
+		for (const track of localTracks) {
+			const trackType = track.jitsiTrack.getType();
+
+			// Do not remove the audio track on RN. Starting with iOS 15 it will fail to unmute otherwise.
+			if (
+				(audioMuted && trackType === MEDIA_TYPE.AUDIO && navigator.product !== 'ReactNative') ||
+				(videoMuted && trackType === MEDIA_TYPE.VIDEO)
+			) {
+				dispatch(replaceLocalTrack(track.jitsiTrack, null, conference));
+			}
+		}
+	});
+
+	conference.on(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, (disableAudioMuteChange: boolean) => {
+		dispatch(setAudioUnmutePermissions(disableAudioMuteChange));
+	});
+	conference.on(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, (disableVideoMuteChange: boolean) => {
+		dispatch(setVideoUnmutePermissions(disableVideoMuteChange));
+	});
+
+	// Dispatches into features/base/tracks follow:
+
+	conference.on(JitsiConferenceEvents.TRACK_ADDED, (t: any) => t && !t.isLocal() && dispatch(trackAdded(t)));
+	conference.on(JitsiConferenceEvents.TRACK_REMOVED, (t: any) => t && !t.isLocal() && dispatch(trackRemoved(t)));
+
+	conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, (track: any, participantThatMutedUs: any) => {
+		if (participantThatMutedUs) {
+			dispatch(participantMutedUs(participantThatMutedUs, track));
+		}
+	});
+
+	conference.on(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, (track: any) => dispatch(destroyLocalTracks(track)));
+
+	// Dispatches into features/base/participants follow:
+	conference.on(JitsiConferenceEvents.DISPLAY_NAME_CHANGED, (id: string, displayName: string) =>
+		dispatch(
+			participantUpdated({
+				conference,
+				id,
+				name: getNormalizedDisplayName(displayName)
+			})
+		)
+	);
+
+	conference.on(JitsiConferenceEvents.SILENT_STATUS_CHANGED, (id: string, isSilent: boolean) =>
+		dispatch(
+			participantUpdated({
+				conference,
+				id,
+				isSilent
+			})
+		)
+	);
+
+	conference.on(
+		JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,
+		(dominant: string, previous: string[], silence: boolean | string) => {
+			dispatch(dominantSpeakerChanged(dominant, previous, Boolean(silence), conference));
+		}
+	);
+
+	conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, (participant: Object, json: Object) =>
+		dispatch(endpointMessageReceived(participant, json))
+	);
+
+	conference.on(JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED, (id: string, json: Object) =>
+		dispatch(nonParticipantMessageReceived(id, json))
+	);
+
+	conference.on(JitsiConferenceEvents.USER_JOINED, (_id: string, user: any) =>
+		commonUserJoinedHandling({ dispatch }, conference, user)
+	);
+	conference.on(JitsiConferenceEvents.USER_LEFT, (_id: string, user: any) =>
+		commonUserLeftHandling({ dispatch }, conference, user)
+	);
+	conference.on(JitsiConferenceEvents.USER_ROLE_CHANGED, (id: string, role: string) =>
+		dispatch(participantRoleChanged(id, role))
+	);
+	conference.on(JitsiConferenceEvents.USER_STATUS_CHANGED, (id: string, presence: string) =>
+		dispatch(participantPresenceChanged(id, presence))
+	);
+
+	conference.on(JitsiE2ePingEvents.E2E_RTT_CHANGED, (participant: Object, rtt: number) =>
+		dispatch(e2eRttChanged(participant, rtt))
+	);
+
+	conference.on(JitsiConferenceEvents.BOT_TYPE_CHANGED, (id: string, botType: string) =>
+		dispatch(
+			participantUpdated({
+				conference,
+				id,
+				botType
+			})
+		)
+	);
+
+	conference.addCommandListener(AVATAR_URL_COMMAND, (data: { value: string }, id: string) =>
+		dispatch(
+			participantUpdated({
+				conference,
+				id,
+				avatarURL: data.value
+			})
+		)
+	);
+	conference.addCommandListener(EMAIL_COMMAND, (data: { value: string }, id: string) =>
+		dispatch(
+			participantUpdated({
+				conference,
+				id,
+				email: data.value
+			})
+		)
+	);
+}
+
+/**
+ * Action for updating the conference metadata.
+ *
+ * @param {IConferenceMetadata} metadata - The metadata object.
+ * @returns {{
+ *    type: UPDATE_CONFERENCE_METADATA,
+ *    metadata: IConferenceMetadata
+ * }}
+ */
+export function updateConferenceMetadata(metadata: IConferenceMetadata | null) {
+	return {
+		type: UPDATE_CONFERENCE_METADATA,
+		metadata
+	};
+}
+
+/**
+ * Create an action for when the end-to-end RTT against a specific remote participant has changed.
+ *
+ * @param {Object} participant - The participant against which the rtt is measured.
+ * @param {number} rtt - The rtt.
+ * @returns {{
+ *     type: E2E_RTT_CHANGED,
+ *     e2eRtt: {
+ *         participant: Object,
+ *         rtt: number
+ *     }
+ * }}
+ */
+export function e2eRttChanged(participant: Object, rtt: number) {
+	return {
+		type: E2E_RTT_CHANGED,
+		e2eRtt: {
+			rtt,
+			participant
+		}
+	};
+}
+
+/**
+ * Updates the current known state of server-side authentication.
+ *
+ * @param {boolean} authEnabled - Whether or not server authentication is
+ * enabled.
+ * @param {string} authLogin - The current name of the logged in user, if any.
+ * @returns {{
+ *     type: AUTH_STATUS_CHANGED,
+ *     authEnabled: boolean,
+ *     authLogin: string
+ * }}
+ */
+export function authStatusChanged(authEnabled: boolean, authLogin: string) {
+	return {
+		type: AUTH_STATUS_CHANGED,
+		authEnabled,
+		authLogin
+	};
+}
+
+/**
+ * Signals that a specific conference has failed.
+ *
+ * @param {JitsiConference} conference - The JitsiConference that has failed.
+ * @param {string} error - The error describing/detailing the cause of the
+ * failure.
+ * @param {any} params - Rest of the params that we receive together with the event.
+ * @returns {{
+ *     type: CONFERENCE_FAILED,
+ *     conference: JitsiConference,
+ *     error: Error
+ * }}
+ * @public
+ */
+export function conferenceFailed(conference: IJitsiConference, error: string, ...params: any) {
+	return {
+		type: CONFERENCE_FAILED,
+		conference,
+
+		// Make the error resemble an Error instance (to the extent that
+		// jitsi-meet needs it).
+		error: {
+			name: error,
+			params,
+			recoverable: undefined
+		}
+	};
+}
+
+/**
+ * Signals that a specific conference has been joined.
+ *
+ * @param {JitsiConference} conference - The JitsiConference instance which was
+ * joined by the local participant.
+ * @returns {{
+ *     type: CONFERENCE_JOINED,
+ *     conference: JitsiConference
+ * }}
+ */
+export function conferenceJoined(conference: IJitsiConference) {
+	return {
+		type: CONFERENCE_JOINED,
+		conference
+	};
+}
+
+/**
+ * Signals that a specific conference join is in progress.
+ *
+ * @param {JitsiConference} conference - The JitsiConference instance for which join by the local participant
+ * is in progress.
+ * @returns {{
+ *     type: CONFERENCE_JOIN_IN_PROGRESS,
+ *     conference: JitsiConference
+ * }}
+ */
+export function conferenceJoinInProgress(conference: IJitsiConference) {
+	return {
+		type: CONFERENCE_JOIN_IN_PROGRESS,
+		conference
+	};
+}
+
+/**
+ * Signals that a specific conference has been left.
+ *
+ * @param {JitsiConference} conference - The JitsiConference instance which was
+ * left by the local participant.
+ * @returns {{
+ *     type: CONFERENCE_LEFT,
+ *     conference: JitsiConference
+ * }}
+ */
+export function conferenceLeft(conference?: IJitsiConference) {
+	return {
+		type: CONFERENCE_LEFT,
+		conference
+	};
+}
+
+/**
+ * Signals that the conference subject has been changed.
+ *
+ * @param {string} subject - The new subject.
+ * @returns {{
+ *     type: CONFERENCE_SUBJECT_CHANGED,
+ *     subject: string
+ * }}
+ */
+export function conferenceSubjectChanged(subject: string) {
+	return {
+		type: CONFERENCE_SUBJECT_CHANGED,
+		subject
+	};
+}
+
+/**
+ * Signals that the conference timestamp has been changed.
+ *
+ * @param {number} conferenceTimestamp - The UTC timestamp.
+ * @returns {{
+ *       type: CONFERENCE_TIMESTAMP_CHANGED,
+ *       conferenceTimestamp
+ * }}
+ */
+export function conferenceTimestampChanged(conferenceTimestamp: number) {
+	return {
+		type: CONFERENCE_TIMESTAMP_CHANGED,
+		conferenceTimestamp
+	};
+}
+
+/**
+ * Signals that the unique identifier for conference has been set.
+ *
+ * @param {JitsiConference} conference - The JitsiConference instance, where the uuid has been set.
+ * @returns {{
+ *   type: CONFERENCE_UNIQUE_ID_SET,
+ *   conference: JitsiConference,
+ * }}
+ */
+export function conferenceUniqueIdSet(conference: IJitsiConference) {
+	return {
+		type: CONFERENCE_UNIQUE_ID_SET,
+		conference
+	};
+}
+
+/**
+ * Adds any existing local tracks to a specific conference before the conference
+ * is joined. Then signals the intention of the application to have the local
+ * participant join the specified conference.
+ *
+ * @param {JitsiConference} conference - The {@code JitsiConference} instance
+ * the local participant will (try to) join.
+ * @returns {Function}
+ */
+export function _conferenceWillJoin(conference: IJitsiConference) {
+	return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+		const state = getState();
+		const localTracks = getLocalTracks(state['features/base/tracks']).map(t => t.jitsiTrack);
+
+		if (localTracks.length && !iAmVisitor(state)) {
+			_addLocalTracksToConference(conference, localTracks);
+		}
+
+		dispatch(conferenceWillJoin(conference));
+	};
+}
+
+/**
+ * Signals the intention of the application to have a conference initialized.
+ *
+ * @returns {{
+ *     type: CONFERENCE_WILL_INIT
+ * }}
+ */
+export function conferenceWillInit() {
+	return {
+		type: CONFERENCE_WILL_INIT
+	};
+}
+
+/**
+ * Signals the intention of the application to have the local participant
+ * join the specified conference.
+ *
+ * @param {JitsiConference} conference - The {@code JitsiConference} instance
+ * the local participant will (try to) join.
+ * @returns {{
+ *     type: CONFERENCE_WILL_JOIN,
+ *     conference: JitsiConference
+ * }}
+ */
+export function conferenceWillJoin(conference?: IJitsiConference) {
+	return {
+		type: CONFERENCE_WILL_JOIN,
+		conference
+	};
+}
+
+/**
+ * Signals the intention of the application to have the local participant leave
+ * a specific conference. Similar in fashion to CONFERENCE_LEFT. Contrary to it
+ * though, it's not guaranteed because CONFERENCE_LEFT may be triggered by
+ * lib-jitsi-meet and not the application.
+ *
+ * @param {JitsiConference} conference - The JitsiConference instance which will
+ * be left by the local participant.
+ * @param {boolean} isRedirect - Indicates if the action has been dispatched as part of visitor promotion.
+ * @returns {{
+ *     type: CONFERENCE_LEFT,
+ *     conference: JitsiConference,
+ *     isRedirect: boolean
+ * }}
+ */
+export function conferenceWillLeave(conference?: IJitsiConference, isRedirect?: boolean) {
+	return {
+		type: CONFERENCE_WILL_LEAVE,
+		conference,
+		isRedirect
+	};
+}
+
+/**
+ * Initializes a new conference.
+ *
+ * @param {string} overrideRoom - Override the room to join, instead of taking it
+ * from Redux.
+ * @returns {Function}
+ */
+export function createConference(overrideRoom?: string | String) {
+	return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+		const state = getState();
+		const { connection, locationURL } = state['features/base/connection'];
+
+		if (!connection) {
+			throw new Error('Cannot create a conference without a connection!');
+		}
+
+		const { password, room } = state['features/base/conference'];
+
+		if (!room) {
+			throw new Error('Cannot join a conference without a room name!');
+		}
+
+		// XXX: revisit this.
+		// Hide the custom domain in the room name.
+		const tmp: any = overrideRoom || room;
+		let _room: any = getBackendSafeRoomName(tmp);
+
+		if (tmp.domain) {
+			// eslint-disable-next-line no-new-wrappers
+			_room = new String(tmp);
+			_room.domain = tmp.domain;
+		}
+
+		const conference = connection.initJitsiConference(_room, getConferenceOptions(state));
+
+		// @ts-ignore
+		connection[JITSI_CONNECTION_CONFERENCE_KEY] = conference;
+
+		conference[JITSI_CONFERENCE_URL_KEY] = locationURL;
+
+		dispatch(_conferenceWillJoin(conference));
+
+		_addConferenceListeners(conference, dispatch, state);
+
+		sendLocalParticipant(state, conference);
+
+		const replaceParticipant = getReplaceParticipant(state);
+
+		conference.join(password, replaceParticipant);
+	};
+}
+
+/**
+ * Will try to join the conference again in case it failed earlier with
+ * {@link JitsiConferenceErrors.AUTHENTICATION_REQUIRED}. It means that Jicofo
+ * did not allow to create new room from anonymous domain, but it can be tried
+ * again later in case authenticated user created it in the meantime.
+ *
+ * @returns {Function}
+ */
+export function checkIfCanJoin() {
+	return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+		const { authRequired, password } = getState()['features/base/conference'];
+
+		const replaceParticipant = getReplaceParticipant(getState());
+
+		authRequired && dispatch(_conferenceWillJoin(authRequired));
+		authRequired?.join(password, replaceParticipant);
+	};
+}
+
+/**
+ * Signals the data channel with the bridge has successfully opened.
+ *
+ * @returns {{
+ *     type: DATA_CHANNEL_OPENED
+ * }}
+ */
+export function dataChannelOpened() {
+	return {
+		type: DATA_CHANNEL_OPENED
+	};
+}
+
+/**
+ * Signals the data channel with the bridge was abruptly closed.
+ *
+ * @param {number} code - Close code.
+ * @param {string} reason - Close reason.
+ *
+ * @returns {{
+ *     type: DATA_CHANNEL_CLOSED,
+ *     code: number,
+ *     reason: string
+ * }}
+ */
+export function dataChannelClosed(code: number, reason: string) {
+	return {
+		type: DATA_CHANNEL_CLOSED,
+		code,
+		reason
+	};
+}
+
+/**
+ * Signals that a participant sent an endpoint message on the data channel.
+ *
+ * @param {Object} participant - The participant details sending the message.
+ * @param {Object} data - The data carried by the endpoint message.
+ * @returns {{
+ *      type: ENDPOINT_MESSAGE_RECEIVED,
+ *      participant: Object,
+ *      data: Object
+ * }}
+ */
+export function endpointMessageReceived(participant: Object, data: Object) {
+	return {
+		type: ENDPOINT_MESSAGE_RECEIVED,
+		participant,
+		data
+	};
+}
+
+/**
+ * Action to end a conference for all participants.
+ *
+ * @returns {Function}
+ */
+export function endConference() {
+	return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+		const { conference } = getConferenceState(toState(getState));
+
+		conference?.end();
+	};
+}
+
+/**
+ * Signals that we've been kicked out of the conference.
+ *
+ * @param {JitsiConference} conference - The {@link JitsiConference} instance
+ * for which the event is being signaled.
+ * @param {JitsiParticipant} participant - The {@link JitsiParticipant}
+ * instance which initiated the kick event.
+ * @returns {{
+ *     type: KICKED_OUT,
+ *     conference: JitsiConference,
+ *     participant: JitsiParticipant
+ * }}
+ */
+export function kickedOut(conference: IJitsiConference, participant: Object) {
+	return {
+		type: KICKED_OUT,
+		conference,
+		participant
+	};
+}
+
+/**
+ * Action to leave a conference.
+ *
+ * @returns {Function}
+ */
+export function leaveConference() {
+	return async (dispatch: IStore['dispatch']) => {
+		dispatch(disconnect(true));
+		dispatch(hangup(true));
+	};
+}
+
+/**
+ * Signals that the lock state of a specific JitsiConference changed.
+ *
+ * @param {JitsiConference} conference - The JitsiConference which had its lock
+ * state changed.
+ * @param {boolean} locked - If the specified conference became locked, true;
+ * otherwise, false.
+ * @returns {{
+ *     type: LOCK_STATE_CHANGED,
+ *     conference: JitsiConference,
+ *     locked: boolean
+ * }}
+ */
+export function lockStateChanged(conference: IJitsiConference, locked: boolean) {
+	return {
+		type: LOCK_STATE_CHANGED,
+		conference,
+		locked
+	};
+}
+
+/**
+ * Signals that a non participant endpoint message has been received.
+ *
+ * @param {string} id - The resource id of the sender.
+ * @param {Object} json - The json carried by the endpoint message.
+ * @returns {{
+ *      type: NON_PARTICIPANT_MESSAGE_RECEIVED,
+ *      id: Object,
+ *      json: Object
+ * }}
+ */
+export function nonParticipantMessageReceived(id: string, json: Object) {
+	return {
+		type: NON_PARTICIPANT_MESSAGE_RECEIVED,
+		id,
+		json
+	};
+}
+
+/**
+ * Updates the known state of start muted policies.
+ *
+ * @param {boolean} audioMuted - Whether or not members will join the conference
+ * as audio muted.
+ * @param {boolean} videoMuted - Whether or not members will join the conference
+ * as video muted.
+ * @returns {{
+ *     type: SET_START_MUTED_POLICY,
+ *     startAudioMutedPolicy: boolean,
+ *     startVideoMutedPolicy: boolean
+ * }}
+ */
+export function onStartMutedPolicyChanged(audioMuted: boolean, videoMuted: boolean) {
+	return {
+		type: SET_START_MUTED_POLICY,
+		startAudioMutedPolicy: audioMuted,
+		startVideoMutedPolicy: videoMuted
+	};
+}
+
+/**
+ * Sets whether or not peer2peer is currently enabled.
+ *
+ * @param {boolean} p2p - Whether or not peer2peer is currently active.
+ * @returns {{
+ *     type: P2P_STATUS_CHANGED,
+ *     p2p: boolean
+ * }}
+ */
+export function p2pStatusChanged(p2p: boolean) {
+	return {
+		type: P2P_STATUS_CHANGED,
+		p2p
+	};
+}
+
+/**
+ * Signals to play touch tones.
+ *
+ * @param {string} tones - The tones to play.
+ * @param {number} [duration] - How long to play each tone.
+ * @param {number} [pause] - How long to pause between each tone.
+ * @returns {{
+ *     type: SEND_TONES,
+ *     tones: string,
+ *     duration: number,
+ *     pause: number
+ * }}
+ */
+export function sendTones(tones: string, duration: number, pause: number) {
+	return {
+		type: SEND_TONES,
+		tones,
+		duration,
+		pause
+	};
+}
+
+/**
+ * Enables or disables the Follow Me feature.
+ *
+ * @param {boolean} enabled - Whether or not Follow Me should be enabled.
+ * @returns {{
+ *     type: SET_FOLLOW_ME,
+ *     enabled: boolean
+ * }}
+ */
+export function setFollowMe(enabled: boolean) {
+	return {
+		type: SET_FOLLOW_ME,
+		enabled
+	};
+}
+
+/**
+ * Enables or disables the Mute reaction sounds feature.
+ *
+ * @param {boolean} muted - Whether or not reaction sounds should be muted for all participants.
+ * @param {boolean} updateBackend - Whether or not the moderator should notify all participants for the new setting.
+ * @returns {{
+ *     type: SET_START_REACTIONS_MUTED,
+ *     muted: boolean
+ * }}
+ */
+export function setStartReactionsMuted(muted: boolean, updateBackend = false) {
+	return {
+		type: SET_START_REACTIONS_MUTED,
+		muted,
+		updateBackend
+	};
+}
+
+/**
+ * Sets the password to join or lock a specific JitsiConference.
+ *
+ * @param {JitsiConference} conference - The JitsiConference which requires a
+ * password to join or is to be locked with the specified password.
+ * @param {Function} method - The JitsiConference method of password protection
+ * such as join or lock.
+ * @param {string} password - The password with which the specified conference
+ * is to be joined or locked.
+ * @returns {Function}
+ */
+export function setPassword(conference: IJitsiConference | undefined, method: Function | undefined, password?: string) {
+	return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+		if (!conference) {
+			return Promise.reject();
+		}
+		switch (method) {
+			case conference.join: {
+				let state = getState()['features/base/conference'];
+
+				dispatch({
+					type: SET_PASSWORD,
+					conference,
+					method,
+					password
+				});
+
+				// Join the conference with the newly-set password.
+
+				// Make sure that the action did set the password.
+				state = getState()['features/base/conference'];
+				if (
+					state.password === password &&
+					// Make sure that the application still wants the
+					// conference joined.
+					!state.conference
+				) {
+					method.call(conference, password);
+				}
+				break;
+			}
+
+			case conference.lock: {
+				const state = getState()['features/base/conference'];
+
+				if (state.conference === conference) {
+					return method
+						.call(conference, password)
+						.then(() =>
+							dispatch({
+								type: SET_PASSWORD,
+								conference,
+								method,
+								password
+							})
+						)
+						.catch((error: Error) =>
+							dispatch({
+								type: SET_PASSWORD_FAILED,
+								error
+							})
+						);
+				}
+
+				return Promise.reject();
+			}
+		}
+	};
+}
+
+/**
+ * Sets the obfuscated room name of the conference to be joined.
+ *
+ * @param {(string)} obfuscatedRoom - Obfuscated room name.
+ * @param {(string)} obfuscatedRoomSource - The room name that was obfuscated.
+ * @returns {{
+ *     type: SET_OBFUSCATED_ROOM,
+ *     room: string
+ * }}
+ */
+export function setObfuscatedRoom(obfuscatedRoom: string, obfuscatedRoomSource: string) {
+	return {
+		type: SET_OBFUSCATED_ROOM,
+		obfuscatedRoom,
+		obfuscatedRoomSource
+	};
+}
+
+/**
+ * Sets (the name of) the room of the conference to be joined.
+ *
+ * @param {(string|undefined)} room - The name of the room of the conference to
+ * be joined.
+ * @returns {{
+ *     type: SET_ROOM,
+ *     room: string
+ * }}
+ */
+export function setRoom(room?: string) {
+	return {
+		type: SET_ROOM,
+		room
+	};
+}
+
+/**
+ * Sets whether or not members should join audio and/or video muted.
+ *
+ * @param {boolean} startAudioMuted - Whether or not members will join the
+ * conference as audio muted.
+ * @param {boolean} startVideoMuted - Whether or not members will join the
+ * conference as video muted.
+ * @returns {Function}
+ */
+export function setStartMutedPolicy(startAudioMuted: boolean, startVideoMuted: boolean) {
+	return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+		const conference = getCurrentConference(getState());
+
+		conference?.setStartMutedPolicy({
+			audio: startAudioMuted,
+			video: startVideoMuted
+		});
+
+		dispatch(onStartMutedPolicyChanged(startAudioMuted, startVideoMuted));
+	};
+}
+
+/**
+ * Sets the conference subject.
+ *
+ * @param {string} subject - The new subject.
+ * @returns {void}
+ */
+export function setSubject(subject: string) {
+	return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+		const { conference } = getState()['features/base/conference'];
+
+		if (conference) {
+			conference.setSubject(subject);
+		} else {
+			dispatch({
+				type: SET_PENDING_SUBJECT_CHANGE,
+				subject
+			});
+		}
+	};
+}
+
+/**
+ * Sets the conference local subject.
+ *
+ * @param {string} localSubject - The new local subject.
+ * @returns {{
+ *     type: CONFERENCE_LOCAL_SUBJECT_CHANGED,
+ *     localSubject: string
+ * }}
+ */
+export function setLocalSubject(localSubject: string) {
+	return {
+		type: CONFERENCE_LOCAL_SUBJECT_CHANGED,
+		localSubject
+	};
+}
+
+/**
+ * Sets the assumed bandwidth bps.
+ *
+ * @param {number} assumedBandwidthBps - The new assumed bandwidth.
+ * @returns {{
+ *     type: SET_ASSUMED_BANDWIDTH_BPS,
+ *     assumedBandwidthBps: number
+ * }}
+ */
+export function setAssumedBandwidthBps(assumedBandwidthBps: number) {
+	return {
+		type: SET_ASSUMED_BANDWIDTH_BPS,
+		assumedBandwidthBps
+	};
+}
+
+/**
+ * Redirects to a new visitor node.
+ *
+ * @param {string | undefined} vnode - The vnode to use or undefined if moving back to the main room.
+ * @param {string} focusJid - The focus jid to use.
+ * @param {string} username - The username to use.
+ * @returns {void}
+ */
+export function redirect(vnode: string, focusJid: string, username: string) {
+	return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+		const newConfig = getVisitorOptions(getState, vnode, focusJid, username);
+
+		if (!newConfig) {
+			logger.warn('Not redirected missing params');
+
+			return;
+		}
+
+		dispatch(overwriteConfig(newConfig));
+
+		dispatch(disconnect(true))
+			.then(() => {
+				dispatch(setIAmVisitor(Boolean(vnode)));
+
+				// we do not clear local tracks on error, so we need to manually clear them
+				return dispatch(destroyLocalTracks());
+			})
+			.then(() => {
+				dispatch(conferenceWillInit());
+
+				return dispatch(connect());
+			})
+			.then(() => {
+				const media: Array<MediaType> = [];
+
+				if (!vnode) {
+					const state = getState();
+					const { enableMediaOnPromote = {} } = state['features/base/config'].visitors ?? {};
+					const { audio = false, video = false } = enableMediaOnPromote;
+
+					if (audio) {
+						const { available, muted, unmuteBlocked } = state['features/base/media'].audio;
+						const { startSilent } = state['features/base/config'];
+
+						// do not unmute the user if he was muted before (on the prejoin, the config
+						// or URL param, etc.)
+						if (!unmuteBlocked && !muted && !startSilent && available) {
+							media.push(MEDIA_TYPE.AUDIO);
+						}
+					}
+
+					if (video) {
+						const { muted, unmuteBlocked } = state['features/base/media'].video;
+
+						// do not unmute the user if he was muted before (on the prejoin, the config, URL param or
+						// audo only, etc)
+						if (!unmuteBlocked && !muted && hasAvailableDevices(state, 'videoInput')) {
+							media.push(MEDIA_TYPE.VIDEO);
+						}
+					}
+				}
+
+				dispatch(setupVisitorStartupMedia(media));
+			});
+	};
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/actions.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/actions.native.ts
new file mode 100644
index 0000000..2000f05
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/actions.native.ts
@@ -0,0 +1,29 @@
+import { IStore } from '../../app/types';
+import { setAudioMuted, setVideoMuted } from '../media/actions';
+import { MEDIA_TYPE, MediaType, VIDEO_MUTISM_AUTHORITY } from '../media/constants';
+
+export * from './actions.any';
+
+/**
+ * Starts audio and/or video for the visitor.
+ *
+ * @param {Array<MediaType>} mediaTypes - The media types that need to be started.
+ * @returns {Function}
+ */
+export function setupVisitorStartupMedia(mediaTypes: Array<MediaType>) {
+    return (dispatch: IStore['dispatch']) => {
+        if (!mediaTypes || !Array.isArray(mediaTypes)) {
+            return;
+        }
+
+        mediaTypes.forEach(mediaType => {
+            switch (mediaType) {
+            case MEDIA_TYPE.AUDIO:
+                dispatch(setAudioMuted(false, true));
+                break;
+            case MEDIA_TYPE.VIDEO:
+                dispatch(setVideoMuted(false, VIDEO_MUTISM_AUTHORITY.USER, true));
+            }
+        });
+    };
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/actions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/actions.web.ts
new file mode 100644
index 0000000..c0e3064
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/actions.web.ts
@@ -0,0 +1,25 @@
+import { IStore } from '../../app/types';
+import { gumPending } from '../media/actions';
+import { MEDIA_TYPE, MediaType } from '../media/constants';
+import { IGUMPendingState } from '../media/types';
+import { createAndAddInitialAVTracks } from '../tracks/actions.web';
+
+export * from './actions.any';
+
+/**
+ * Starts audio and/or video for the visitor.
+ *
+ * @param {Array<MediaType>} media - The media types that need to be started.
+ * @returns {Function}
+ */
+export function setupVisitorStartupMedia(media: Array<MediaType>) {
+    return (dispatch: IStore['dispatch']) => {
+        // Clear the gum pending state in case we have set it to pending since we are starting the
+        // conference without tracks.
+        dispatch(gumPending([ MEDIA_TYPE.AUDIO, MEDIA_TYPE.VIDEO ], IGUMPendingState.NONE));
+
+        if (media && Array.isArray(media) && media.length > 0) {
+            dispatch(createAndAddInitialAVTracks(media));
+        }
+    };
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/functions.ts
index 37801e2..6ebe335 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/functions.ts
@@ -37,14 +37,6 @@ import { IJitsiConference } from './reducer';
  */
 export const getConferenceState = (state: IReduxState) => state['features/base/conference'];
 
-/**
- * Is the conference joined or not.
- *
- * @param {IReduxState} state - Global state.
- * @returns {boolean}
- */
-export const getIsConferenceJoined = (state: IReduxState) => Boolean(getConferenceState(state).conference);
-
 /**
  * Attach a set of local tracks to a conference.
  *
@@ -185,18 +177,12 @@ export function forEachConference(
 export function getConferenceName(stateful: IStateful): string {
     const state = toState(stateful);
     const { callee } = state['features/base/jwt'];
-    const {
-        callDisplayName,
-        localSubject: configLocalSubject,
-        subject: configSubject
-    } = state['features/base/config'];
+    const { callDisplayName } = state['features/base/config'];
     const { localSubject, pendingSubjectChange, room, subject } = getConferenceState(state);
 
-    return (pendingSubjectChange
-        || configSubject
+    return (localSubject
+        || pendingSubjectChange
         || subject
-        || configLocalSubject
-        || localSubject
         || callDisplayName
         || callee?.name
         || (room && safeStartCase(safeDecodeURIComponent(room)))) ?? '';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/middleware.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/middleware.any.ts
index 9665a39..2ba3c44 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/middleware.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/middleware.any.ts
@@ -24,7 +24,7 @@ import LocalRecordingManager from '../../recording/components/Recording/LocalRec
 import { iAmVisitor } from '../../visitors/functions';
 import { overwriteConfig } from '../config/actions';
 import { CONNECTION_ESTABLISHED, CONNECTION_FAILED } from '../connection/actionTypes';
-import { connect, connectionDisconnected, disconnect } from '../connection/actions';
+import { connectionDisconnected, disconnect } from '../connection/actions';
 import { validateJwt } from '../jwt/functions';
 import { JitsiConferenceErrors, JitsiConferenceEvents, JitsiConnectionErrors } from '../lib-jitsi-meet';
 import { PARTICIPANT_UPDATED, PIN_PARTICIPANT } from '../participants/actionTypes';
@@ -37,7 +37,6 @@ import {
 import MiddlewareRegistry from '../redux/MiddlewareRegistry';
 import StateListenerRegistry from '../redux/StateListenerRegistry';
 import { TRACK_ADDED, TRACK_REMOVED } from '../tracks/actionTypes';
-import { getLocalTracks } from '../tracks/functions.any';
 
 import {
     CONFERENCE_FAILED,
@@ -165,6 +164,10 @@ function _conferenceFailed({ dispatch, getState }: IStore, next: Function, actio
     const result = next(action);
     const { enableForcedReload } = getState()['features/base/config'];
 
+    if (LocalRecordingManager.isRecordingLocally()) {
+        dispatch(stopLocalVideoRecording());
+    }
+
     // Handle specific failure reasons.
     switch (error.name) {
     case JitsiConferenceErrors.CONFERENCE_RESTARTED: {
@@ -201,28 +204,40 @@ function _conferenceFailed({ dispatch, getState }: IStore, next: Function, actio
         const newConfig = restoreConferenceOptions(getState);
 
         if (newConfig) {
-            dispatch(overwriteConfig(newConfig)) // @ts-ignore
-                .then(() => dispatch(conferenceWillLeave(conference)))
-                .then(() => conference.leave())
-                .then(() => dispatch(disconnect()))
-                .then(() => dispatch(connect()))
-                .then(() => {
-                    // FIXME: Workaround for the web version. To be removed once we get rid of conference.js
-                    if (typeof APP !== 'undefined') {
-                        const localTracks = getLocalTracks(getState()['features/base/tracks']);
-                        const jitsiTracks = localTracks.map((t: any) => t.jitsiTrack);
-
-                        APP.conference.startConference(jitsiTracks).catch(logger.error);
-                    }
-                });
+            dispatch(overwriteConfig(newConfig));
+            dispatch(conferenceWillLeave(conference));
+
+            conference.leave()
+                .then(() => dispatch(disconnect()));
         }
 
         break;
     }
     case JitsiConferenceErrors.NOT_ALLOWED_ERROR: {
-        const [ msg ] = error.params;
+        const [ type, msg ] = error.params;
+
+        let descriptionKey;
+        let titleKey = 'dialog.tokenAuthFailed';
+
+        if (type === JitsiConferenceErrors.AUTH_ERROR_TYPES.NO_MAIN_PARTICIPANTS) {
+            descriptionKey = 'visitors.notification.noMainParticipantsDescription';
+            titleKey = 'visitors.notification.noMainParticipantsTitle';
+        } else if (type === JitsiConferenceErrors.AUTH_ERROR_TYPES.NO_VISITORS_LOBBY) {
+            descriptionKey = 'visitors.notification.noVisitorLobby';
+        } else if (type === JitsiConferenceErrors.AUTH_ERROR_TYPES.PROMOTION_NOT_ALLOWED) {
+            descriptionKey = 'visitors.notification.notAllowedPromotion';
+        } else if (type === JitsiConferenceErrors.AUTH_ERROR_TYPES.ROOM_CREATION_RESTRICTION) {
+            descriptionKey = 'dialog.errorRoomCreationRestriction';
+        }
+
+        dispatch(showErrorNotification({
+            descriptionKey,
+            hideErrorSupportLink: true,
+            titleKey
+        }, NOTIFICATION_TIMEOUT_TYPE.STICKY));
+
+        sendAnalytics(createNotAllowedErrorEvent(type, msg));
 
-        sendAnalytics(createNotAllowedErrorEvent(msg));
         break;
     }
     case JitsiConferenceErrors.OFFER_ANSWER_FAILED:
@@ -681,6 +696,10 @@ function _updateLocalParticipantInConference({ dispatch, getState }: IStore, nex
             conference.setDisplayName(participant.name);
         }
 
+        if ('isSilent' in participant) {
+            conference.setIsSilent(participant.isSilent);
+        }
+
         if ('role' in participant && participant.role === PARTICIPANT_ROLE.MODERATOR) {
             const { pendingSubjectChange, subject } = getState()['features/base/conference'];
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/middleware.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/middleware.web.ts
index f3686c7..bb3572d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/middleware.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/middleware.web.ts
@@ -4,9 +4,17 @@ import {
     setPrejoinPageVisibility,
     setSkipPrejoinOnReload
 } from '../../prejoin/actions.web';
+import { isPrejoinPageVisible } from '../../prejoin/functions';
+import { iAmVisitor } from '../../visitors/functions';
+import { CONNECTION_DISCONNECTED, CONNECTION_ESTABLISHED } from '../connection/actionTypes';
 import { hangup } from '../connection/actions.web';
-import { JitsiConferenceErrors } from '../lib-jitsi-meet';
+import { JitsiConferenceErrors, browser } from '../lib-jitsi-meet';
+import { gumPending, setInitialGUMPromise } from '../media/actions';
+import { MEDIA_TYPE } from '../media/constants';
+import { IGUMPendingState } from '../media/types';
 import MiddlewareRegistry from '../redux/MiddlewareRegistry';
+import { replaceLocalTrack } from '../tracks/actions.any';
+import { getLocalTracks } from '../tracks/functions.any';
 
 import {
     CONFERENCE_FAILED,
@@ -131,6 +139,75 @@ MiddlewareRegistry.register(store => next => action => {
         releaseScreenLock();
 
         break;
+    case CONNECTION_DISCONNECTED: {
+        const { initialGUMPromise } = getState()['features/base/media'];
+
+        if (initialGUMPromise) {
+            store.dispatch(setInitialGUMPromise());
+        }
+
+        break;
+    }
+    case CONNECTION_ESTABLISHED: {
+        if (isPrejoinPageVisible(getState())) {
+            let { initialGUMPromise } = getState()['features/base/media'];
+
+            initialGUMPromise = initialGUMPromise || Promise.resolve({ tracks: [] });
+
+            initialGUMPromise.then(() => {
+                const state = getState();
+                let localTracks = getLocalTracks(state['features/base/tracks']);
+                const trackReplacePromises = [];
+
+                // Do not signal audio/video tracks if the user joins muted.
+                for (const track of localTracks) {
+                    // Always add the audio track on Safari because of a known issue where audio playout doesn't happen
+                    // if the user joins audio and video muted.
+                    if ((track.muted && !(browser.isWebKitBased() && track.jitsiTrack
+                            && track.jitsiTrack.getType() === MEDIA_TYPE.AUDIO)) || iAmVisitor(state)) {
+                        trackReplacePromises.push(dispatch(replaceLocalTrack(track.jitsiTrack, null))
+                            .catch((error: any) => {
+                                logger.error(`Failed to replace local track (${track.jitsiTrack}) with null: ${error}`);
+                            }));
+                    }
+                }
+
+                Promise.allSettled(trackReplacePromises).then(() => {
+
+                    // Re-fetch the local tracks after muted tracks have been removed above.
+                    // This is needed, because the tracks are effectively disposed by the replaceLocalTrack and should
+                    // not be used anymore.
+                    localTracks = getLocalTracks(getState()['features/base/tracks']);
+
+                    const jitsiTracks = localTracks.map((t: any) => t.jitsiTrack);
+
+
+                    return APP.conference.startConference(jitsiTracks);
+                });
+            });
+        } else {
+            let { initialGUMPromise } = getState()['features/base/media'];
+
+            initialGUMPromise = initialGUMPromise || Promise.resolve({ tracks: [] });
+
+            initialGUMPromise.then(({ tracks }) => {
+                let tracksToUse = tracks ?? [];
+
+                if (iAmVisitor(getState())) {
+                    tracksToUse = [];
+                    tracks.forEach(track => track.dispose().catch(logger.error));
+                    dispatch(gumPending([ MEDIA_TYPE.AUDIO, MEDIA_TYPE.VIDEO ], IGUMPendingState.NONE));
+                }
+
+                dispatch(setInitialGUMPromise());
+
+                return APP.conference.startConference(tracksToUse);
+            })
+            .catch(logger.error);
+        }
+
+        break;
+    }
     }
 
     return next(action);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/reducer.ts
index c2ca536..e0ece7b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/conference/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/conference/reducer.ts
@@ -3,6 +3,8 @@ import { AnyAction } from 'redux';
 import { FaceLandmarks } from '../../face-landmarks/types';
 import { LOCKED_LOCALLY, LOCKED_REMOTELY } from '../../room-lock/constants';
 import { ISpeakerStats } from '../../speaker-stats/reducer';
+import { SET_CONFIG } from '../config/actionTypes';
+import { IConfig } from '../config/configType';
 import { CONNECTION_WILL_CONNECT, SET_LOCATION_URL } from '../connection/actionTypes';
 import { JitsiConferenceErrors } from '../lib-jitsi-meet';
 import ReducerRegistry from '../redux/ReducerRegistry';
@@ -18,6 +20,8 @@ import {
     CONFERENCE_TIMESTAMP_CHANGED,
     CONFERENCE_WILL_JOIN,
     CONFERENCE_WILL_LEAVE,
+    DATA_CHANNEL_CLOSED,
+    DATA_CHANNEL_OPENED,
     LOCK_STATE_CHANGED,
     P2P_STATUS_CHANGED,
     SET_ASSUMED_BANDWIDTH_BPS,
@@ -35,6 +39,7 @@ import { isRoomValid } from './functions';
 const DEFAULT_STATE = {
     assumedBandwidthBps: undefined,
     conference: undefined,
+    dataChannelOpen: undefined,
     e2eeSupported: undefined,
     joining: undefined,
     leaving: undefined,
@@ -49,6 +54,9 @@ export interface IConferenceMetadata {
     recording?: {
         isTranscribingEnabled: boolean;
     };
+    visitors?: {
+        live: boolean;
+    };
     whiteboard?: {
         collabDetails: {
             roomId: string;
@@ -127,6 +135,7 @@ export interface IJitsiConference {
     setAssumedBandwidthBps: (value: number) => void;
     setDesktopSharingFrameRate: Function;
     setDisplayName: Function;
+    setIsSilent: Function;
     setLocalParticipantProperty: Function;
     setMediaEncryptionKey: Function;
     setReceiverConstraints: Function;
@@ -146,6 +155,7 @@ export interface IConferenceState {
     authRequired?: IJitsiConference;
     conference?: IJitsiConference;
     conferenceTimestamp?: number;
+    dataChannelOpen?: boolean;
     e2eeSupported?: boolean;
     error?: Error;
     followMeEnabled?: boolean;
@@ -219,6 +229,12 @@ ReducerRegistry.register<IConferenceState>('features/base/conference',
         case CONNECTION_WILL_CONNECT:
             return set(state, 'authRequired', undefined);
 
+        case DATA_CHANNEL_CLOSED:
+            return set(state, 'dataChannelOpen', false);
+
+        case DATA_CHANNEL_OPENED:
+            return set(state, 'dataChannelOpen', true);
+
         case LOCK_STATE_CHANGED:
             return _lockStateChanged(state, action);
 
@@ -268,11 +284,33 @@ ReducerRegistry.register<IConferenceState>('features/base/conference',
                 ...state,
                 metadata: action.metadata
             };
+
+        case SET_CONFIG:
+            return _setConfig(state, action);
         }
 
         return state;
     });
 
+/**
+ * Processes subject and local subject of the conference based on the new config.
+ *
+ * @param {Object} state - The Redux state of feature base/conference.
+ * @param {Action} action - The Redux action SET_CONFIG to reduce.
+ * @private
+ * @returns {Object} The new state after the reduction of the specified action.
+ */
+function _setConfig(state: IConferenceState, { config }: { config: IConfig; }) {
+    const { localSubject, subject } = config;
+
+    return {
+        ...state,
+        localSubject,
+        pendingSubjectChange: subject,
+        subject: undefined
+    };
+}
+
 /**
  * Reduces a specific Redux action AUTH_STATUS_CHANGED of the feature
  * base/conference.
@@ -596,10 +634,7 @@ function _setRoom(state: IConferenceState, action: AnyAction) {
      */
     return assign(state, {
         error: undefined,
-        localSubject: undefined,
-        pendingSubjectChange: undefined,
-        room,
-        subject: undefined
+        room
     });
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/config/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/config/actions.ts
index 643fe96..59020bb 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/config/actions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/config/actions.ts
@@ -96,51 +96,53 @@ export function overwriteConfig(config: Object) {
  *
  * @param {Object} config - The configuration to be represented by the feature
  * base/config.
- * @param {URL} locationURL - The URL of the location which necessitated the
- * loading of a configuration.
  * @returns {Function}
  */
-export function setConfig(config: IConfig = {}, locationURL: URL | undefined) {
-    // Now that the loading of the config was successful override the values
-    // with the parameters passed in the hash part of the location URI.
-    // TODO We're still in the middle ground between old Web with config,
-    // and interfaceConfig used via global variables and new
-    // Web and mobile reading the respective values from the redux store.
-    // Only the config will be overridden on React Native, as the other
-    // globals will be undefined here. It's intentional - we do not care to
-    // override those configs yet.
-    locationURL
-        && setConfigFromURLParams(
-
-            // On Web the config also comes from the window.config global,
-            // but it is resolved in the loadConfig procedure.
-            config,
-            window.interfaceConfig,
-            locationURL);
-
-    let { bosh } = config;
-
-    if (bosh) {
-        // Normalize the BOSH URL.
-        if (bosh.startsWith('//')) {
-            // By default our config.js doesn't include the protocol.
-            bosh = `${locationURL?.protocol}${bosh}`;
-        } else if (bosh.startsWith('/')) {
-            // Handle relative URLs, which won't work on mobile.
-            const {
-                protocol,
-                host,
-                contextRoot
-            } = parseURIString(locationURL?.href);
-
-            bosh = `${protocol}//${host}${contextRoot || '/'}${bosh.substr(1)}`;
+export function setConfig(config: IConfig = {}) {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+        const { locationURL } = getState()['features/base/connection'];
+
+        // Now that the loading of the config was successful override the values
+        // with the parameters passed in the hash part of the location URI.
+        // TODO We're still in the middle ground between old Web with config,
+        // and interfaceConfig used via global variables and new
+        // Web and mobile reading the respective values from the redux store.
+        // Only the config will be overridden on React Native, as the other
+        // globals will be undefined here. It's intentional - we do not care to
+        // override those configs yet.
+        locationURL
+            && setConfigFromURLParams(
+
+                // On Web the config also comes from the window.config global,
+                // but it is resolved in the loadConfig procedure.
+                config,
+                window.interfaceConfig,
+                locationURL);
+
+        let { bosh } = config;
+
+        if (bosh) {
+            // Normalize the BOSH URL.
+            if (bosh.startsWith('//')) {
+                // By default our config.js doesn't include the protocol.
+                bosh = `${locationURL?.protocol}${bosh}`;
+            } else if (bosh.startsWith('/')) {
+                // Handle relative URLs, which won't work on mobile.
+                const {
+                    protocol,
+                    host,
+                    contextRoot
+                } = parseURIString(locationURL?.href);
+
+                bosh = `${protocol}//${host}${contextRoot || '/'}${bosh.substr(1)}`;
+            }
+            config.bosh = bosh;
         }
-        config.bosh = bosh;
-    }
 
-    return {
-        type: SET_CONFIG,
-        config
+        dispatch({
+            type: SET_CONFIG,
+            config
+        });
     };
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/config/configType.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/config/configType.ts
index 63e64fe..94523f9 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/config/configType.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/config/configType.ts
@@ -287,6 +287,7 @@ export interface IConfig {
     disableRemoveRaisedHandOnFocus?: boolean;
     disableResponsiveTiles?: boolean;
     disableRtx?: boolean;
+    disableSelfDemote?: boolean;
     disableSelfView?: boolean;
     disableSelfViewSettings?: boolean;
     disableShortcuts?: boolean;
@@ -396,6 +397,7 @@ export interface IConfig {
     hideDominantSpeakerBadge?: boolean;
     hideEmailInSettings?: boolean;
     hideLobbyButton?: boolean;
+    hideLoginButton?: boolean;
     hideParticipantsStats?: boolean;
     hideRecordingLabel?: boolean;
     hosts?: {
@@ -440,6 +442,7 @@ export interface IConfig {
     };
     localSubject?: string;
     locationURL?: URL;
+    mainToolbarButtons?: Array<Array<string>>;
     maxFullResolutionParticipants?: number;
     microsoftApiApplicationClientID?: string;
     moderatedRoomServiceUrl?: string;
@@ -476,6 +479,7 @@ export interface IConfig {
     peopleSearchQueryTypes?: string[];
     peopleSearchUrl?: string;
     preferBosh?: boolean;
+    preferVisitor?: boolean;
     preferredTranscribeLanguage?: string;
     prejoinConfig?: {
         enabled?: boolean;
@@ -542,7 +546,6 @@ export interface IConfig {
         assumeBandwidth?: boolean;
         disableE2EE?: boolean;
         dumpTranscript?: boolean;
-        mobileXmppWsThreshold?: number;
         noAutoPlayVideo?: boolean;
         p2pTestMode?: boolean;
         skipInterimTranscriptions?: boolean;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/config/configWhitelist.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/config/configWhitelist.ts
index b7f0f74..1caa2d3 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/config/configWhitelist.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/config/configWhitelist.ts
@@ -81,6 +81,7 @@ export default [
     'debug',
     'debugAudioLevels',
     'deeplinking.disabled',
+    'deeplinking.desktop.enabled',
     'defaultLocalDisplayName',
     'defaultRemoteDisplayName',
     'deploymentUrls',
@@ -115,6 +116,7 @@ export default [
     'disableRemoteMute',
     'disableResponsiveTiles',
     'disableRtx',
+    'disableSelfDemote',
     'disableSelfView',
     'disableSelfViewSettings',
     'disableShortcuts',
@@ -184,6 +186,7 @@ export default [
     'localRecording',
     'localSubject',
     'logging',
+    'mainToolbarButtons',
     'maxFullResolutionParticipants',
     'mouseMoveCallbackInterval',
     'notifications',
@@ -195,6 +198,7 @@ export default [
     'participantsPane',
     'pcStatsInterval',
     'preferBosh',
+    'preferVisitor',
     'prejoinConfig',
     'prejoinPageEnabled',
     'recordingService',
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/config/functions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/config/functions.any.ts
index d86f069..8393a2d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/config/functions.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/config/functions.any.ts
@@ -6,6 +6,7 @@ import { safeJsonParse } from '@jitsi/js-utils/json';
 import _ from 'lodash';
 
 import { IReduxState } from '../../app/types';
+import { getLocalParticipant } from '../participants/functions';
 import { parseURLParams } from '../util/parseURLParams';
 
 import { IConfig } from './configType';
@@ -184,6 +185,31 @@ export function isNameReadOnly(state: IReduxState): boolean {
         || state['features/base/config'].readOnlyName);
 }
 
+/**
+ * Selector for determining if the participant is the next one in the queue to speak.
+ *
+ * @param {Object} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isNextToSpeak(state: IReduxState): boolean {
+    const raisedHandsQueue = state['features/base/participants'].raisedHandsQueue || [];
+    const participantId = getLocalParticipant(state)?.id;
+
+    return participantId === raisedHandsQueue[0]?.id;
+}
+
+/**
+ * Selector for determining if the next to speak participant in the queue has been notified.
+ *
+ * @param {Object} state - The state of the app.
+ * @returns {boolean}
+ */
+export function hasBeenNotified(state: IReduxState): boolean {
+    const raisedHandsQueue = state['features/base/participants'].raisedHandsQueue;
+
+    return Boolean(raisedHandsQueue[0]?.hasBeenNotified);
+}
+
 /**
  * Selector for determining if the display name is visible.
  *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/config/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/config/reducer.ts
index 55fd34f..0081228 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/config/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/config/reducer.ts
@@ -80,6 +80,7 @@ export interface IConfigState extends IConfig {
             audio?: boolean;
             video?: boolean;
         };
+        queueService: string;
     };
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.any.ts
index 4b17512..6abd593 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.any.ts
@@ -126,13 +126,6 @@ export function constructOptions(state: IReduxState) {
     const { bosh, preferBosh, flags } = options;
     let { websocket } = options;
 
-    // TESTING: Only enable WebSocket for some percentage of users.
-    if (websocket && navigator.product === 'ReactNative') {
-        if ((Math.random() * 100) >= (options?.testing?.mobileXmppWsThreshold ?? 0)) {
-            websocket = undefined;
-        }
-    }
-
     if (preferBosh) {
         websocket = undefined;
     }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.native.ts
index e11a3a4..1996d0f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.native.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.native.ts
@@ -1,5 +1,8 @@
 import { appNavigate } from '../../app/actions.native';
 import { IStore } from '../../app/types';
+import { navigateRoot } from '../../mobile/navigation/rootNavigationContainerRef';
+import { screen } from '../../mobile/navigation/routes';
+import { JitsiConnectionErrors } from '../lib-jitsi-meet';
 
 import { _connectInternal } from './actions.any';
 
@@ -13,7 +16,13 @@ export * from './actions.any';
  * @returns {Function}
  */
 export function connect(id?: string, password?: string) {
-    return (dispatch: IStore['dispatch']) => dispatch(_connectInternal(id, password));
+	return (dispatch: IStore['dispatch']) =>
+		dispatch(_connectInternal(id, password)).catch(error => {
+			if (error === JitsiConnectionErrors.NOT_LIVE_ERROR) {
+				console.log('JitsiErr', error);
+				navigateRoot(screen.conference.root);
+			}
+		});
 }
 
 /**
@@ -24,5 +33,5 @@ export function connect(id?: string, password?: string) {
  * @returns {Function}
  */
 export function hangup(_requestFeedback = false) {
-    return (dispatch: IStore['dispatch']) => dispatch(appNavigate(undefined));
+	return (dispatch: IStore['dispatch']) => dispatch(appNavigate(screen.conference.breakoutRooms));
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.web.ts
index 1e614c9..acf9af4 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/connection/actions.web.ts
@@ -34,8 +34,11 @@ export function connect(id?: string, password?: string) {
                         return getJaasJWT(state);
                     }
                 })
-                .then(j => j && dispatch(setJWT(j)))
-                .then(() => dispatch(_connectInternal(id, password)));
+                .then(j => {
+                    j && dispatch(setJWT(j));
+
+                    return dispatch(_connectInternal(id, password));
+                });
         }
 
         // used by jibri
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/connection/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/connection/reducer.ts
index 2ebe4e2..bae27ce 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/connection/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/connection/reducer.ts
@@ -147,6 +147,13 @@ function _connectionFailed(
         return state;
     }
 
+    let preferVisitor;
+
+    if (error.name === JitsiConnectionErrors.NOT_LIVE_ERROR) {
+        // we want to keep the state for the moment when the meeting is live
+        preferVisitor = state.preferVisitor;
+    }
+
     return assign(state, {
         connecting: undefined,
         connection: undefined,
@@ -154,7 +161,7 @@ function _connectionFailed(
         passwordRequired:
             error.name === JitsiConnectionErrors.PASSWORD_REQUIRED
                 ? connection : undefined,
-        preferVisitor: undefined
+        preferVisitor
     });
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/devices/middleware.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/devices/middleware.web.ts
index dce6c44..4bea9e3 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/devices/middleware.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/devices/middleware.web.ts
@@ -1,7 +1,5 @@
 import { AnyAction } from 'redux';
 
-// @ts-expect-error
-import UIEvents from '../../../../service/UI/UIEvents';
 import { IStore } from '../../app/types';
 import { processExternalDeviceRequest } from '../../device-selection/functions';
 import { showNotification, showWarningNotification } from '../../notifications/actions';
@@ -17,43 +15,33 @@ import { updateSettings } from '../settings/actions';
 import { getLocalTrack } from '../tracks/functions';
 
 import {
-    CHECK_AND_NOTIFY_FOR_NEW_DEVICE,
-    NOTIFY_CAMERA_ERROR,
-    NOTIFY_MIC_ERROR,
-    SET_AUDIO_INPUT_DEVICE,
-    SET_VIDEO_INPUT_DEVICE,
-    UPDATE_DEVICE_LIST
+	CHECK_AND_NOTIFY_FOR_NEW_DEVICE,
+	NOTIFY_CAMERA_ERROR,
+	NOTIFY_MIC_ERROR,
+	SET_AUDIO_INPUT_DEVICE,
+	SET_VIDEO_INPUT_DEVICE,
+	UPDATE_DEVICE_LIST
 } from './actionTypes';
-import {
-    devicePermissionsChanged,
-    removePendingDeviceRequests,
-    setAudioInputDevice,
-    setVideoInputDevice
-} from './actions';
-import {
-    areDeviceLabelsInitialized,
-    formatDeviceLabel,
-    logDevices,
-    setAudioOutputDeviceId
-} from './functions';
+import { devicePermissionsChanged, removePendingDeviceRequests, setAudioInputDevice, setVideoInputDevice } from './actions';
+import { areDeviceLabelsInitialized, formatDeviceLabel, logDevices, setAudioOutputDeviceId } from './functions';
 import logger from './logger';
 
 const JITSI_TRACK_ERROR_TO_MESSAGE_KEY_MAP = {
-    microphone: {
-        [JitsiTrackErrors.CONSTRAINT_FAILED]: 'dialog.micConstraintFailedError',
-        [JitsiTrackErrors.GENERAL]: 'dialog.micUnknownError',
-        [JitsiTrackErrors.NOT_FOUND]: 'dialog.micNotFoundError',
-        [JitsiTrackErrors.PERMISSION_DENIED]: 'dialog.micPermissionDeniedError',
-        [JitsiTrackErrors.TIMEOUT]: 'dialog.micTimeoutError'
-    },
-    camera: {
-        [JitsiTrackErrors.CONSTRAINT_FAILED]: 'dialog.cameraConstraintFailedError',
-        [JitsiTrackErrors.GENERAL]: 'dialog.cameraUnknownError',
-        [JitsiTrackErrors.NOT_FOUND]: 'dialog.cameraNotFoundError',
-        [JitsiTrackErrors.PERMISSION_DENIED]: 'dialog.cameraPermissionDeniedError',
-        [JitsiTrackErrors.UNSUPPORTED_RESOLUTION]: 'dialog.cameraUnsupportedResolutionError',
-        [JitsiTrackErrors.TIMEOUT]: 'dialog.cameraTimeoutError'
-    }
+	microphone: {
+		[JitsiTrackErrors.CONSTRAINT_FAILED]: 'dialog.micConstraintFailedError',
+		[JitsiTrackErrors.GENERAL]: 'dialog.micUnknownError',
+		[JitsiTrackErrors.NOT_FOUND]: 'dialog.micNotFoundError',
+		[JitsiTrackErrors.PERMISSION_DENIED]: 'dialog.micPermissionDeniedError',
+		[JitsiTrackErrors.TIMEOUT]: 'dialog.micTimeoutError'
+	},
+	camera: {
+		[JitsiTrackErrors.CONSTRAINT_FAILED]: 'dialog.cameraConstraintFailedError',
+		[JitsiTrackErrors.GENERAL]: 'dialog.cameraUnknownError',
+		[JitsiTrackErrors.NOT_FOUND]: 'dialog.cameraNotFoundError',
+		[JitsiTrackErrors.PERMISSION_DENIED]: 'dialog.cameraPermissionDeniedError',
+		[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]: 'dialog.cameraUnsupportedResolutionError',
+		[JitsiTrackErrors.TIMEOUT]: 'dialog.cameraTimeoutError'
+	}
 };
 
 /**
@@ -69,127 +57,125 @@ let permissionsListener: Function | undefined;
  */
 // eslint-disable-next-line no-unused-vars
 MiddlewareRegistry.register(store => next => action => {
-    switch (action.type) {
-    case APP_WILL_MOUNT: {
-        const _permissionsListener = (permissions: Object) => {
-            store.dispatch(devicePermissionsChanged(permissions));
-        };
-        const { mediaDevices } = JitsiMeetJS;
-
-        permissionsListener = _permissionsListener;
-        mediaDevices.addEventListener(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, permissionsListener);
-        Promise.all([
-            mediaDevices.isDevicePermissionGranted('audio'),
-            mediaDevices.isDevicePermissionGranted('video')
-        ])
-        .then(results => {
-            _permissionsListener({
-                audio: results[0],
-                video: results[1]
-            });
-        })
-        .catch(() => {
-            // Ignore errors.
-        });
-        break;
-    }
-    case APP_WILL_UNMOUNT:
-        if (typeof permissionsListener === 'function') {
-            JitsiMeetJS.mediaDevices.removeEventListener(
-                JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, permissionsListener);
-            permissionsListener = undefined;
-        }
-        break;
-    case NOTIFY_CAMERA_ERROR: {
-        if (!action.error) {
-            break;
-        }
-
-        const { message, name } = action.error;
-
-        const cameraJitsiTrackErrorMsg
-            = JITSI_TRACK_ERROR_TO_MESSAGE_KEY_MAP.camera[name];
-        const cameraErrorMsg = cameraJitsiTrackErrorMsg
-            || JITSI_TRACK_ERROR_TO_MESSAGE_KEY_MAP
-                .camera[JitsiTrackErrors.GENERAL];
-        const additionalCameraErrorMsg = cameraJitsiTrackErrorMsg ? null : message;
-        const titleKey = name === JitsiTrackErrors.PERMISSION_DENIED
-            ? 'deviceError.cameraPermission' : 'deviceError.cameraError';
-
-        store.dispatch(showWarningNotification({
-            description: additionalCameraErrorMsg,
-            descriptionKey: cameraErrorMsg,
-            titleKey
-        }, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
-
-        if (isPrejoinPageVisible(store.getState())) {
-            store.dispatch(setDeviceStatusWarning(titleKey));
-        }
-
-        break;
-    }
-    case NOTIFY_MIC_ERROR: {
-        if (!action.error) {
-            break;
-        }
-
-        const { message, name } = action.error;
-
-        const micJitsiTrackErrorMsg
-            = JITSI_TRACK_ERROR_TO_MESSAGE_KEY_MAP.microphone[name];
-        const micErrorMsg = micJitsiTrackErrorMsg
-            || JITSI_TRACK_ERROR_TO_MESSAGE_KEY_MAP
-                .microphone[JitsiTrackErrors.GENERAL];
-        const additionalMicErrorMsg = micJitsiTrackErrorMsg ? null : message;
-        const titleKey = name === JitsiTrackErrors.PERMISSION_DENIED
-            ? 'deviceError.microphonePermission'
-            : 'deviceError.microphoneError';
-
-        store.dispatch(showWarningNotification({
-            description: additionalMicErrorMsg,
-            descriptionKey: micErrorMsg,
-            titleKey
-        }, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
-
-        if (isPrejoinPageVisible(store.getState())) {
-            store.dispatch(setDeviceStatusWarning(titleKey));
-        }
-
-        break;
-    }
-    case SET_AUDIO_INPUT_DEVICE:
-        if (isPrejoinPageVisible(store.getState())) {
-            store.dispatch(replaceAudioTrackById(action.deviceId));
-        } else {
-            APP.UI.emitEvent(UIEvents.AUDIO_DEVICE_CHANGED, action.deviceId);
-        }
-        break;
-    case SET_VIDEO_INPUT_DEVICE: {
-        const localTrack = getLocalTrack(store.getState()['features/base/tracks'], MEDIA_TYPE.VIDEO);
-
-        // on mobile devices the video stream has to be stopped before replacing it
-        if (isMobileBrowser() && localTrack && !localTrack.muted) {
-            localTrack.jitsiTrack.stopStream();
-        }
-        if (isPrejoinPageVisible(store.getState())) {
-            store.dispatch(replaceVideoTrackById(action.deviceId));
-        } else {
-            APP.UI.emitEvent(UIEvents.VIDEO_DEVICE_CHANGED, action.deviceId);
-        }
-        break;
-    }
-    case UPDATE_DEVICE_LIST:
-        logDevices(action.devices, 'Device list updated');
-        if (areDeviceLabelsInitialized(store.getState())) {
-            return _processPendingRequests(store, next, action);
-        }
-        break;
-    case CHECK_AND_NOTIFY_FOR_NEW_DEVICE:
-        _checkAndNotifyForNewDevice(store, action.newDevices, action.oldDevices);
-        break;
-    }
-
-    return next(action);
+	switch (action.type) {
+		case APP_WILL_MOUNT: {
+			const _permissionsListener = (permissions: Object) => {
+				store.dispatch(devicePermissionsChanged(permissions));
+			};
+			const { mediaDevices } = JitsiMeetJS;
+
+			permissionsListener = _permissionsListener;
+			mediaDevices.addEventListener(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, permissionsListener);
+			Promise.all([mediaDevices.isDevicePermissionGranted('audio'), mediaDevices.isDevicePermissionGranted('video')])
+				.then(results => {
+					_permissionsListener({
+						audio: results[0],
+						video: results[1]
+					});
+				})
+				.catch(() => {
+					// Ignore errors.
+				});
+			break;
+		}
+		case APP_WILL_UNMOUNT:
+			if (typeof permissionsListener === 'function') {
+				JitsiMeetJS.mediaDevices.removeEventListener(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, permissionsListener);
+				permissionsListener = undefined;
+			}
+			break;
+		case NOTIFY_CAMERA_ERROR: {
+			if (!action.error) {
+				break;
+			}
+
+			const { message, name } = action.error;
+
+			const cameraJitsiTrackErrorMsg = JITSI_TRACK_ERROR_TO_MESSAGE_KEY_MAP.camera[name];
+			const cameraErrorMsg = cameraJitsiTrackErrorMsg || JITSI_TRACK_ERROR_TO_MESSAGE_KEY_MAP.camera[JitsiTrackErrors.GENERAL];
+			const additionalCameraErrorMsg = cameraJitsiTrackErrorMsg ? null : message;
+			const titleKey = name === JitsiTrackErrors.PERMISSION_DENIED ? 'deviceError.cameraPermission' : 'deviceError.cameraError';
+
+			store.dispatch(
+				showWarningNotification(
+					{
+						description: additionalCameraErrorMsg,
+						descriptionKey: cameraErrorMsg,
+						titleKey
+					},
+					NOTIFICATION_TIMEOUT_TYPE.MEDIUM
+				)
+			);
+
+			if (isPrejoinPageVisible(store.getState())) {
+				store.dispatch(setDeviceStatusWarning(titleKey));
+			}
+
+			break;
+		}
+		case NOTIFY_MIC_ERROR: {
+			if (!action.error) {
+				break;
+			}
+
+			const { message, name } = action.error;
+
+			const micJitsiTrackErrorMsg = JITSI_TRACK_ERROR_TO_MESSAGE_KEY_MAP.microphone[name];
+			const micErrorMsg = micJitsiTrackErrorMsg || JITSI_TRACK_ERROR_TO_MESSAGE_KEY_MAP.microphone[JitsiTrackErrors.GENERAL];
+			const additionalMicErrorMsg = micJitsiTrackErrorMsg ? null : message;
+			const titleKey =
+				name === JitsiTrackErrors.PERMISSION_DENIED ? 'deviceError.microphonePermission' : 'deviceError.microphoneError';
+
+			store.dispatch(
+				showWarningNotification(
+					{
+						description: additionalMicErrorMsg,
+						descriptionKey: micErrorMsg,
+						titleKey
+					},
+					NOTIFICATION_TIMEOUT_TYPE.MEDIUM
+				)
+			);
+
+			if (isPrejoinPageVisible(store.getState())) {
+				store.dispatch(setDeviceStatusWarning(titleKey));
+			}
+
+			break;
+		}
+		case SET_AUDIO_INPUT_DEVICE:
+			if (isPrejoinPageVisible(store.getState())) {
+				store.dispatch(replaceAudioTrackById(action.deviceId));
+			} else {
+				APP.conference.onAudioDeviceChanged(action.deviceId);
+			}
+			break;
+		case SET_VIDEO_INPUT_DEVICE: {
+			const localTrack = getLocalTrack(store.getState()['features/base/tracks'], MEDIA_TYPE.VIDEO);
+
+			// on mobile devices the video stream has to be stopped before replacing it
+			if (isMobileBrowser() && localTrack && !localTrack.muted) {
+				localTrack.jitsiTrack.stopStream();
+			}
+			if (isPrejoinPageVisible(store.getState())) {
+				store.dispatch(replaceVideoTrackById(action.deviceId));
+			} else {
+				APP.conference.onVideoDeviceChanged(action.deviceId);
+			}
+			break;
+		}
+		case UPDATE_DEVICE_LIST:
+			logDevices(action.devices, 'Device list updated');
+			if (areDeviceLabelsInitialized(store.getState())) {
+				return _processPendingRequests(store, next, action);
+			}
+			break;
+		case CHECK_AND_NOTIFY_FOR_NEW_DEVICE:
+			_checkAndNotifyForNewDevice(store, action.newDevices, action.oldDevices);
+			break;
+	}
+
+	return next(action);
 });
 
 /**
@@ -206,24 +192,20 @@ MiddlewareRegistry.register(store => next => action => {
  * @returns {Object} The value returned by {@code next(action)}.
  */
 function _processPendingRequests({ dispatch, getState }: IStore, next: Function, action: AnyAction) {
-    const result = next(action);
-    const state = getState();
-    const { pendingRequests } = state['features/base/devices'];
-
-    if (!pendingRequests || pendingRequests.length === 0) {
-        return result;
-    }
-
-    pendingRequests.forEach((request: any) => {
-        processExternalDeviceRequest(
-            dispatch,
-            getState,
-            request,
-            request.responseCallback);
-    });
-    dispatch(removePendingDeviceRequests());
-
-    return result;
+	const result = next(action);
+	const state = getState();
+	const { pendingRequests } = state['features/base/devices'];
+
+	if (!pendingRequests || pendingRequests.length === 0) {
+		return result;
+	}
+
+	pendingRequests.forEach((request: any) => {
+		processExternalDeviceRequest(dispatch, getState, request, request.responseCallback);
+	});
+	dispatch(removePendingDeviceRequests());
+
+	return result;
 }
 
 /**
@@ -240,62 +222,64 @@ function _processPendingRequests({ dispatch, getState }: IStore, next: Function,
  * @returns {void}
  */
 function _checkAndNotifyForNewDevice(store: IStore, newDevices: MediaDeviceInfo[], oldDevices: MediaDeviceInfo[]) {
-    const { dispatch } = store;
-
-    // let's intersect both newDevices and oldDevices and handle thew newly
-    // added devices
-    const onlyNewDevices = newDevices.filter(
-        nDevice => !oldDevices.find(
-            device => device.deviceId === nDevice.deviceId));
-
-    // we group devices by groupID which normally is the grouping by physical device
-    // plugging in headset we provide normally two device, one input and one output
-    // and we want to show only one notification for this physical audio device
-    const devicesGroupBy: {
-        [key: string]: MediaDeviceInfo[];
-    } = onlyNewDevices.reduce((accumulated: any, value) => {
-        accumulated[value.groupId] = accumulated[value.groupId] || [];
-        accumulated[value.groupId].push(value);
-
-        return accumulated;
-    }, {});
-
-    Object.values(devicesGroupBy).forEach(devicesArray => {
-
-        if (devicesArray.length < 1) {
-            return;
-        }
-
-        // let's get the first device as a reference, we will use it for
-        // label and type
-        const newDevice = devicesArray[0];
-
-        // we want to strip any device details that are not very
-        // user friendly, like usb ids put in brackets at the end
-        const description = formatDeviceLabel(newDevice.label);
-
-        let titleKey;
-
-        switch (newDevice.kind) {
-        case 'videoinput': {
-            titleKey = 'notify.newDeviceCameraTitle';
-            break;
-        }
-        case 'audioinput' :
-        case 'audiooutput': {
-            titleKey = 'notify.newDeviceAudioTitle';
-            break;
-        }
-        }
-        if (!isPrejoinPageVisible(store.getState())) {
-            dispatch(showNotification({
-                description,
-                titleKey,
-                customActionNameKey: [ 'notify.newDeviceAction' ],
-                customActionHandler: [ _useDevice.bind(undefined, store, devicesArray) ]
-            }, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
-        }
-    });
+	const { dispatch } = store;
+
+	// let's intersect both newDevices and oldDevices and handle thew newly
+	// added devices
+	const onlyNewDevices = newDevices.filter(nDevice => !oldDevices.find(device => device.deviceId === nDevice.deviceId));
+
+	// we group devices by groupID which normally is the grouping by physical device
+	// plugging in headset we provide normally two device, one input and one output
+	// and we want to show only one notification for this physical audio device
+	const devicesGroupBy: {
+		[key: string]: MediaDeviceInfo[];
+	} = onlyNewDevices.reduce((accumulated: any, value) => {
+		accumulated[value.groupId] = accumulated[value.groupId] || [];
+		accumulated[value.groupId].push(value);
+
+		return accumulated;
+	}, {});
+
+	Object.values(devicesGroupBy).forEach(devicesArray => {
+		if (devicesArray.length < 1) {
+			return;
+		}
+
+		// let's get the first device as a reference, we will use it for
+		// label and type
+		const newDevice = devicesArray[0];
+
+		// we want to strip any device details that are not very
+		// user friendly, like usb ids put in brackets at the end
+		const description = formatDeviceLabel(newDevice.label);
+
+		let titleKey;
+
+		switch (newDevice.kind) {
+			case 'videoinput': {
+				titleKey = 'notify.newDeviceCameraTitle';
+				break;
+			}
+			case 'audioinput':
+			case 'audiooutput': {
+				titleKey = 'notify.newDeviceAudioTitle';
+				break;
+			}
+		}
+		if (!isPrejoinPageVisible(store.getState())) {
+			dispatch(
+				showNotification(
+					{
+						description,
+						titleKey,
+						customActionNameKey: ['notify.newDeviceAction'],
+						customActionHandler: [_useDevice.bind(undefined, store, devicesArray)]
+					},
+					NOTIFICATION_TIMEOUT_TYPE.MEDIUM
+				)
+			);
+		}
+	});
 }
 
 /**
@@ -308,44 +292,45 @@ function _checkAndNotifyForNewDevice(store: IStore, newDevices: MediaDeviceInfo[
  * @private
  */
 function _useDevice({ dispatch }: IStore, devices: MediaDeviceInfo[]) {
-    devices.forEach(device => {
-        switch (device.kind) {
-        case 'videoinput': {
-            dispatch(updateSettings({
-                userSelectedCameraDeviceId: device.deviceId,
-                userSelectedCameraDeviceLabel: device.label
-            }));
-
-            dispatch(setVideoInputDevice(device.deviceId));
-            break;
-        }
-        case 'audioinput': {
-            dispatch(updateSettings({
-                userSelectedMicDeviceId: device.deviceId,
-                userSelectedMicDeviceLabel: device.label
-            }));
-
-            dispatch(setAudioInputDevice(device.deviceId));
-            break;
-        }
-        case 'audiooutput': {
-            setAudioOutputDeviceId(
-                device.deviceId,
-                dispatch,
-                true,
-                device.label)
-                .then(() => logger.log('changed audio output device'))
-                .catch(err => {
-                    logger.warn(
-                        'Failed to change audio output device.',
-                        'Default or previously set audio output device will',
-                        ' be used instead.',
-                        err);
-                });
-            break;
-        }
-        }
-    });
-
-    return true;
+	devices.forEach(device => {
+		switch (device.kind) {
+			case 'videoinput': {
+				dispatch(
+					updateSettings({
+						userSelectedCameraDeviceId: device.deviceId,
+						userSelectedCameraDeviceLabel: device.label
+					})
+				);
+
+				dispatch(setVideoInputDevice(device.deviceId));
+				break;
+			}
+			case 'audioinput': {
+				dispatch(
+					updateSettings({
+						userSelectedMicDeviceId: device.deviceId,
+						userSelectedMicDeviceLabel: device.label
+					})
+				);
+
+				dispatch(setAudioInputDevice(device.deviceId));
+				break;
+			}
+			case 'audiooutput': {
+				setAudioOutputDeviceId(device.deviceId, dispatch, true, device.label)
+					.then(() => logger.log('changed audio output device'))
+					.catch(err => {
+						logger.warn(
+							'Failed to change audio output device.',
+							'Default or previously set audio output device will',
+							' be used instead.',
+							err
+						);
+					});
+				break;
+			}
+		}
+	});
+
+	return true;
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/environment/utils.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/environment/utils.ts
index b3dec92..6314180 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/environment/utils.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/environment/utils.ts
@@ -19,3 +19,14 @@ export function isIosMobileBrowser() {
     return Platform.OS === 'ios';
 }
 
+/**
+ * Returns whether or not the current environment is an ipad device.
+ *
+ * @returns {boolean}
+ */
+export function isIpadMobileBrowser() {
+
+    // @ts-ignore
+    return isIosMobileBrowser() && Platform.isPad;
+}
+
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/i18n/customNavigatorDetector.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/i18n/customNavigatorDetector.ts
index 2643390..b512faf 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/i18n/customNavigatorDetector.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/i18n/customNavigatorDetector.ts
@@ -59,7 +59,7 @@ export default {
 function normalizeLanguage(language: string) {
     const [ lang, variant ] = language.replace('_', '-').split('-');
 
-    if (!variant || lang === variant) {
+    if (!variant || lang.toUpperCase() === variant.toUpperCase()) {
         return lang;
     }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/i18n/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/i18n/middleware.ts
index 4626971..1b06e75 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/i18n/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/i18n/middleware.ts
@@ -12,7 +12,7 @@ import logger from './logger';
  * @param {Store} store - The redux store.
  * @returns {Function}
  */
-MiddlewareRegistry.register(store => next => async action => {
+MiddlewareRegistry.register(store => next => action => {
     switch (action.type) {
     case I18NEXT_INITIALIZED:
     case LANGUAGE_CHANGED:
@@ -23,11 +23,10 @@ MiddlewareRegistry.register(store => next => async action => {
             : store.getState()['features/dynamic-branding'];
 
         if (language && labels && labels[language]) {
-            try {
-                await changeLanguageBundle(language, labels[language]);
-            } catch (err) {
+            changeLanguageBundle(language, labels[language])
+            .catch(err => {
                 logger.log('Error setting dynamic language bundle', err);
-            }
+            });
         }
         break;
     }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/jwt/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/jwt/functions.ts
index a500103..f492158 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/jwt/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/jwt/functions.ts
@@ -3,6 +3,7 @@ import jwtDecode from 'jwt-decode';
 
 import { IReduxState } from '../../app/types';
 import { getLocalParticipant } from '../participants/functions';
+import { IParticipantFeatures } from '../participants/types';
 import { parseURLParams } from '../util/parseURLParams';
 
 import { JWT_VALIDATION_ERRORS, MEET_FEATURES } from './constants';
@@ -19,7 +20,11 @@ import logger from './logger';
  */
 export function parseJWTFromURLParams(url: URL | typeof window.location = window.location) {
     // @ts-ignore
-    return parseURLParams(url, true, 'search').jwt;
+    const jwt = parseURLParams(url, false, 'hash').jwt;
+
+    // TODO: eventually remove the search param and only pull from the hash
+    // @ts-ignore
+    return jwt ? jwt : parseURLParams(url, true, 'search').jwt;
 }
 
 /**
@@ -45,13 +50,46 @@ export function getJwtName(state: IReduxState) {
  */
 export function isJwtFeatureEnabled(state: IReduxState, feature: string, ifNoToken = false, ifNotInFeatures = false) {
     const { jwt } = state['features/base/jwt'];
+    const { features } = getLocalParticipant(state) || {};
+
+    return isJwtFeatureEnabledStateless({
+        jwt,
+        localParticipantFeatures: features,
+        feature,
+        ifNoToken,
+        ifNotInFeatures
+    });
+}
 
+interface IIsJwtFeatureEnabledStatelessParams {
+    feature: string;
+    ifNoToken?: boolean;
+    ifNotInFeatures?: boolean;
+    jwt?: string;
+    localParticipantFeatures?: IParticipantFeatures;
+}
+
+/**
+ * Check if the given JWT feature is enabled.
+ *
+ * @param {string | undefined} jwt - The jwt token.
+ * @param {ILocalParticipant} localParticipantFeatures - The features of the local participant.
+ * @param {string} feature - The feature we want to check.
+ * @param {boolean} ifNoToken - Default value if there is no token.
+ * @param {boolean} ifNotInFeatures - Default value if features prop exists but does not have the {@code feature}.
+ * @returns {bolean}
+ */
+export function isJwtFeatureEnabledStateless({
+    jwt,
+    localParticipantFeatures: features,
+    feature,
+    ifNoToken = false,
+    ifNotInFeatures = false
+}: IIsJwtFeatureEnabledStatelessParams) {
     if (!jwt) {
         return ifNoToken;
     }
 
-    const { features } = getLocalParticipant(state) || {};
-
     // If `features` is undefined, act as if everything is enabled.
     if (typeof features === 'undefined') {
         return true;
@@ -138,10 +176,12 @@ export function validateJwt(jwt: string) {
             }
         }
 
-        if (!isValidUnixTimestamp(nbf)) {
-            errors.push({ key: JWT_VALIDATION_ERRORS.NBF_INVALID });
-        } else if (currentTimestamp < nbf * 1000) {
-            errors.push({ key: JWT_VALIDATION_ERRORS.NBF_FUTURE });
+        if (nbf) { // nbf value is optional
+            if (!isValidUnixTimestamp(nbf)) {
+                errors.push({ key: JWT_VALIDATION_ERRORS.NBF_INVALID });
+            } else if (currentTimestamp < nbf * 1000) {
+                errors.push({ key: JWT_VALIDATION_ERRORS.NBF_FUTURE });
+            }
         }
 
         if (!isValidUnixTimestamp(exp)) {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/lib-jitsi-meet/index.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/lib-jitsi-meet/index.ts
index b83f6b8..5fc2161 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/lib-jitsi-meet/index.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/lib-jitsi-meet/index.ts
@@ -12,8 +12,7 @@ export const JitsiConferenceErrors = JitsiMeetJS.errors.conference;
 export const JitsiConferenceEvents = JitsiMeetJS.events.conference;
 export const JitsiConnectionErrors = JitsiMeetJS.errors.connection;
 export const JitsiConnectionEvents = JitsiMeetJS.events.connection;
-export const JitsiConnectionQualityEvents
-    = JitsiMeetJS.events.connectionQuality;
+export const JitsiConnectionQualityEvents = JitsiMeetJS.events.connectionQuality;
 export const JitsiDetectionEvents = JitsiMeetJS.events.detection;
 export const JitsiE2ePingEvents = JitsiMeetJS.events.e2eping;
 export const JitsiMediaDevicesEvents = JitsiMeetJS.events.mediaDevices;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/logging/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/logging/middleware.ts
index 40807a8..1c199d5 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/logging/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/logging/middleware.ts
@@ -7,9 +7,7 @@ import { APP_WILL_MOUNT } from '../app/actionTypes';
 import { CONFERENCE_JOINED } from '../conference/actionTypes';
 import { getCurrentConference } from '../conference/functions';
 import { SET_CONFIG } from '../config/actionTypes';
-import JitsiMeetJS, {
-    JitsiConferenceEvents
-} from '../lib-jitsi-meet';
+import JitsiMeetJS, { JitsiConferenceEvents } from '../lib-jitsi-meet';
 import { LIB_WILL_INIT } from '../lib-jitsi-meet/actionTypes';
 import MiddlewareRegistry from '../redux/MiddlewareRegistry';
 import { isTestModeEnabled } from '../testing/functions';
@@ -28,24 +26,24 @@ import { setLogCollector, setLoggingConfig } from './actions';
  * @private
  */
 MiddlewareRegistry.register(store => next => action => {
-    switch (action.type) {
-    case APP_WILL_MOUNT:
-        return _appWillMount(store, next, action);
+	switch (action.type) {
+		case APP_WILL_MOUNT:
+			return _appWillMount(store, next, action);
 
-    case CONFERENCE_JOINED:
-        return _conferenceJoined(store, next, action);
+		case CONFERENCE_JOINED:
+			return _conferenceJoined(store, next, action);
 
-    case LIB_WILL_INIT:
-        return _libWillInit(store, next, action);
+		case LIB_WILL_INIT:
+			return _libWillInit(store, next, action);
 
-    case SET_CONFIG:
-        return _setConfig(store, next, action);
+		case SET_CONFIG:
+			return _setConfig(store, next, action);
 
-    case SET_LOGGING_CONFIG:
-        return _setLoggingConfig(store, next, action);
-    }
+		case SET_LOGGING_CONFIG:
+			return _setLoggingConfig(store, next, action);
+	}
 
-    return next(action);
+	return next(action);
 });
 
 /**
@@ -63,17 +61,17 @@ MiddlewareRegistry.register(store => next => action => {
  * specified {@code action}.
  */
 function _appWillMount({ getState }: IStore, next: Function, action: AnyAction) {
-    const { config } = getState()['features/base/logging'];
+	const { config } = getState()['features/base/logging'];
 
-    _setLogLevels(Logger, config);
+	_setLogLevels(Logger, config);
 
-    // FIXME Until the logic of conference.js is rewritten into the React
-    // app we, JitsiMeetJS.init is to not be used for the React app.
-    // Consequently, LIB_WILL_INIT will not be dispatched. In the meantime, do
-    // the following:
-    typeof APP === 'undefined' || _setLogLevels(JitsiMeetJS, config);
+	// FIXME Until the logic of conference.js is rewritten into the React
+	// app we, JitsiMeetJS.init is to not be used for the React app.
+	// Consequently, LIB_WILL_INIT will not be dispatched. In the meantime, do
+	// the following:
+	typeof APP === 'undefined' || _setLogLevels(JitsiMeetJS, config);
 
-    return next(action);
+	return next(action);
 }
 
 /**
@@ -89,39 +87,35 @@ function _appWillMount({ getState }: IStore, next: Function, action: AnyAction)
  * @returns {*}
  */
 function _conferenceJoined({ getState }: IStore, next: Function, action: AnyAction) {
-
-    // Wait until the joined event is processed, so that the JitsiMeetLogStorage
-    // will be ready.
-    const result = next(action);
-
-    const { conference } = action;
-    const { logCollector } = getState()['features/base/logging'];
-
-    if (logCollector && conference === getCurrentConference(getState())) {
-        // Start the LogCollector's periodic "store logs" task
-        logCollector.start();
-
-        // Make an attempt to flush in case a lot of logs have been cached,
-        // before the collector was started.
-        logCollector.flush();
-
-        // This event listener will flush the logs, before the statistics module
-        // is stopped.
-        //
-        // NOTE The LogCollector is not stopped, because this event can be
-        // triggered multiple times during single conference (whenever
-        // statistics module is stopped). That includes the case when Jicofo
-        // terminates a single person conference (one person left in the room
-        // waiting for someone to join). It will then restart the media session
-        // when someone eventually joins the room which will start the stats
-        // again.
-        conference.on(
-            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED,
-            () => logCollector.flush()
-        );
-    }
-
-    return result;
+	// Wait until the joined event is processed, so that the JitsiMeetLogStorage
+	// will be ready.
+	const result = next(action);
+
+	const { conference } = action;
+	const { logCollector } = getState()['features/base/logging'];
+
+	if (logCollector && conference === getCurrentConference(getState())) {
+		// Start the LogCollector's periodic "store logs" task
+		logCollector.start();
+
+		// Make an attempt to flush in case a lot of logs have been cached,
+		// before the collector was started.
+		logCollector.flush();
+
+		// This event listener will flush the logs, before the statistics module
+		// is stopped.
+		//
+		// NOTE The LogCollector is not stopped, because this event can be
+		// triggered multiple times during single conference (whenever
+		// statistics module is stopped). That includes the case when Jicofo
+		// terminates a single person conference (one person left in the room
+		// waiting for someone to join). It will then restart the media session
+		// when someone eventually joins the room which will start the stats
+		// again.
+		conference.on(JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED, () => logCollector.flush());
+	}
+
+	return result;
 }
 
 /**
@@ -135,47 +129,45 @@ function _conferenceJoined({ getState }: IStore, next: Function, action: AnyActi
  * @private
  * @returns {void}
  */
-function _initLogging({ dispatch, getState }: IStore,
-        loggingConfig: any, isTestingEnabled: boolean) {
-    const { logCollector } = getState()['features/base/logging'];
-
-    // Create the LogCollector and register it as the global log transport. It
-    // is done early to capture as much logs as possible. Captured logs will be
-    // cached, before the JitsiMeetLogStorage gets ready (statistics module is
-    // initialized).
-    if (!logCollector && !loggingConfig.disableLogCollector) {
-        const _logCollector = new Logger.LogCollector(new JitsiMeetLogStorage(getState));
-
-        const { apiLogLevels } = getState()['features/base/config'];
-
-        if (apiLogLevels && Array.isArray(apiLogLevels) && typeof APP === 'object') {
-            const transport = buildExternalApiLogTransport(apiLogLevels);
-
-            Logger.addGlobalTransport(transport);
-            JitsiMeetJS.addGlobalLogTransport(transport);
-        }
-
-        Logger.addGlobalTransport(_logCollector);
-        JitsiMeetJS.addGlobalLogTransport(_logCollector);
-        dispatch(setLogCollector(_logCollector));
-
-        // The JitsiMeetInMemoryLogStorage can not be accessed on mobile through
-        // the 'executeScript' method like it's done in torture tests for WEB.
-        if (isTestingEnabled && typeof APP === 'object') {
-            APP.debugLogs = new JitsiMeetInMemoryLogStorage();
-            const debugLogCollector = new Logger.LogCollector(
-                APP.debugLogs, { storeInterval: 1000 });
-
-            Logger.addGlobalTransport(debugLogCollector);
-            JitsiMeetJS.addGlobalLogTransport(debugLogCollector);
-            debugLogCollector.start();
-        }
-    } else if (logCollector && loggingConfig.disableLogCollector) {
-        Logger.removeGlobalTransport(logCollector);
-        JitsiMeetJS.removeGlobalLogTransport(logCollector);
-        logCollector.stop();
-        dispatch(setLogCollector(undefined));
-    }
+function _initLogging({ dispatch, getState }: IStore, loggingConfig: any, isTestingEnabled: boolean) {
+	const { logCollector } = getState()['features/base/logging'];
+
+	// Create the LogCollector and register it as the global log transport. It
+	// is done early to capture as much logs as possible. Captured logs will be
+	// cached, before the JitsiMeetLogStorage gets ready (statistics module is
+	// initialized).
+	if (!logCollector && !loggingConfig.disableLogCollector) {
+		const _logCollector = new Logger.LogCollector(new JitsiMeetLogStorage(getState));
+
+		const { apiLogLevels } = getState()['features/base/config'];
+
+		if (apiLogLevels && Array.isArray(apiLogLevels) && typeof APP === 'object') {
+			const transport = buildExternalApiLogTransport(apiLogLevels);
+
+			Logger.addGlobalTransport(transport);
+			JitsiMeetJS.addGlobalLogTransport(transport);
+		}
+
+		Logger.addGlobalTransport(_logCollector);
+		JitsiMeetJS.addGlobalLogTransport(_logCollector);
+		dispatch(setLogCollector(_logCollector));
+
+		// The JitsiMeetInMemoryLogStorage can not be accessed on mobile through
+		// the 'executeScript' method like it's done in torture tests for WEB.
+		if (isTestingEnabled && typeof APP === 'object') {
+			APP.debugLogs = new JitsiMeetInMemoryLogStorage();
+			const debugLogCollector = new Logger.LogCollector(APP.debugLogs, { storeInterval: 1000 });
+
+			Logger.addGlobalTransport(debugLogCollector);
+			JitsiMeetJS.addGlobalLogTransport(debugLogCollector);
+			debugLogCollector.start();
+		}
+	} else if (logCollector && loggingConfig.disableLogCollector) {
+		Logger.removeGlobalTransport(logCollector);
+		JitsiMeetJS.removeGlobalLogTransport(logCollector);
+		logCollector.stop();
+		dispatch(setLogCollector(undefined));
+	}
 }
 
 /**
@@ -193,13 +185,13 @@ function _initLogging({ dispatch, getState }: IStore,
  * specified {@code action}.
  */
 function _libWillInit({ getState }: IStore, next: Function, action: AnyAction) {
-    // Adding the if in order to preserve the logic for web after enabling
-    // LIB_WILL_INIT action for web in initLib action.
-    if (typeof APP === 'undefined') {
-        _setLogLevels(JitsiMeetJS, getState()['features/base/logging'].config);
-    }
+	// Adding the if in order to preserve the logic for web after enabling
+	// LIB_WILL_INIT action for web in initLib action.
+	if (typeof APP === 'undefined') {
+		_setLogLevels(JitsiMeetJS, getState()['features/base/logging'].config);
+	}
 
-    return next(action);
+	return next(action);
 }
 
 /**
@@ -217,11 +209,11 @@ function _libWillInit({ getState }: IStore, next: Function, action: AnyAction) {
  * specified action.
  */
 function _setConfig({ dispatch }: IStore, next: Function, action: AnyAction) {
-    const result = next(action);
+	const result = next(action);
 
-    dispatch(setLoggingConfig(action.config?.logging));
+	dispatch(setLoggingConfig(action.config?.logging));
 
-    return result;
+	return result;
 }
 
 /**
@@ -238,27 +230,30 @@ function _setConfig({ dispatch }: IStore, next: Function, action: AnyAction) {
  * @returns {Object} The new state that is the result of the reduction of the
  * specified {@code action}.
  */
-function _setLoggingConfig({ dispatch, getState }: IStore,
-        next: Function, action: AnyAction) {
-    const result = next(action);
-    const newValue = getState()['features/base/logging'].config;
-    const isTestingEnabled = isTestModeEnabled(getState());
-
-    // TODO Generally, we'll want to _setLogLevels and _initLogging only if the
-    // logging config values actually change.
-    // XXX Unfortunately, we don't currently have a (nice) way of determining
-    // whether _setLogLevels or _initLogging have been invoked so we have to
-    // invoke them unconditionally even if none of the values have actually
-    // changed.
-    _setLogLevels(Logger, newValue);
-    _setLogLevels(JitsiMeetJS, newValue);
-
-    _initLogging({
-        dispatch,
-        getState
-    }, newValue, isTestingEnabled);
-
-    return result;
+function _setLoggingConfig({ dispatch, getState }: IStore, next: Function, action: AnyAction) {
+	const result = next(action);
+	const newValue = getState()['features/base/logging'].config;
+	const isTestingEnabled = isTestModeEnabled(getState());
+
+	// TODO Generally, we'll want to _setLogLevels and _initLogging only if the
+	// logging config values actually change.
+	// XXX Unfortunately, we don't currently have a (nice) way of determining
+	// whether _setLogLevels or _initLogging have been invoked so we have to
+	// invoke them unconditionally even if none of the values have actually
+	// changed.
+	_setLogLevels(Logger, newValue);
+	_setLogLevels(JitsiMeetJS, newValue);
+
+	_initLogging(
+		{
+			dispatch,
+			getState
+		},
+		newValue,
+		isTestingEnabled
+	);
+
+	return result;
 }
 
 /**
@@ -272,14 +267,14 @@ function _setLoggingConfig({ dispatch, getState }: IStore,
  * @returns {void}
  */
 function _setLogLevels(logger: any, config: any) {
-    // XXX The loggers of the library lib-jitsi-meet and the application
-    // jitsi-meet are separate, so the log levels have to be set in both.
+	// XXX The loggers of the library lib-jitsi-meet and the application
+	// jitsi-meet are separate, so the log levels have to be set in both.
 
-    // First, set the default log level.
-    logger.setLogLevel(config.defaultLogLevel);
+	// First, set the default log level.
+	logger.setLogLevel(config.defaultLogLevel);
 
-    // Second, set the log level of each logger explicitly overridden by config.
-    for (const [ id, level ] of Object.entries(config.loggers)) {
-        logger.setLogLevelById(level, id);
-    }
+	// Second, set the log level of each logger explicitly overridden by config.
+	for (const [id, level] of Object.entries(config.loggers)) {
+		logger.setLogLevelById(level, id);
+	}
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/media/actionTypes.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/media/actionTypes.ts
index bf5ebd8..af5e6ec 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/media/actionTypes.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/media/actionTypes.ts
@@ -51,6 +51,16 @@ export const SET_AUDIO_UNMUTE_PERMISSIONS = 'SET_AUDIO_UNMUTE_PERMISSIONS';
  */
 export const SET_CAMERA_FACING_MODE = 'SET_CAMERA_FACING_MODE';
 
+/**
+ * Sets the initial GUM promise.
+ *
+ * {
+ *     type: SET_INITIAL_GUM_PROMISE,
+ *     promise: Promise
+ * }}
+ */
+export const SET_INITIAL_GUM_PROMISE = 'SET_INITIAL_GUM_PROMISE';
+
 /**
  * The type of (redux) action to set the muted state of the local screenshare.
  *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/media/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/media/actions.ts
index b53dff1..f99de59 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/media/actions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/media/actions.ts
@@ -9,6 +9,7 @@ import {
     SET_AUDIO_MUTED,
     SET_AUDIO_UNMUTE_PERMISSIONS,
     SET_CAMERA_FACING_MODE,
+    SET_INITIAL_GUM_PROMISE,
     SET_SCREENSHARE_MUTED,
     SET_VIDEO_AVAILABLE,
     SET_VIDEO_MUTED,
@@ -93,6 +94,22 @@ export function setCameraFacingMode(cameraFacingMode: string) {
     };
 }
 
+/**
+ * Sets the initial GUM promise.
+ *
+ * @param {Promise<Array<Object>> | undefined} promise - The promise.
+ * @returns {{
+ *     type: SET_INITIAL_GUM_PROMISE,
+ *     promise: Promise
+ * }}
+ */
+export function setInitialGUMPromise(promise: Promise<{ errors: any; tracks: Array<any>; }> | null = null) {
+    return {
+        type: SET_INITIAL_GUM_PROMISE,
+        promise
+    };
+}
+
 /**
  * Action to set the muted state of the local screenshare.
  *
@@ -122,7 +139,7 @@ export function setScreenshareMuted(
         // eslint-disable-next-line no-bitwise
         const newValue = muted ? oldValue | authority : oldValue & ~authority;
 
-        return dispatch({
+        dispatch({
             type: SET_SCREENSHARE_MUTED,
             authority,
             ensureTrack,
@@ -180,7 +197,7 @@ export function setVideoMuted(
         // eslint-disable-next-line no-bitwise
         const newValue = muted ? oldValue | authority : oldValue & ~authority;
 
-        return dispatch({
+        dispatch({
             type: SET_VIDEO_MUTED,
             authority,
             ensureTrack,
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/media/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/media/reducer.ts
index b0a5296..d8a149a 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/media/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/media/reducer.ts
@@ -10,6 +10,7 @@ import {
     SET_AUDIO_MUTED,
     SET_AUDIO_UNMUTE_PERMISSIONS,
     SET_CAMERA_FACING_MODE,
+    SET_INITIAL_GUM_PROMISE,
     SET_SCREENSHARE_MUTED,
     SET_VIDEO_AVAILABLE,
     SET_VIDEO_MUTED,
@@ -87,6 +88,22 @@ function _audio(state: IAudioState = _AUDIO_INITIAL_MEDIA_STATE, action: AnyActi
     }
 }
 
+/**
+ * Reducer fot the common properties in media state.
+ *
+ * @param {ICommonState} state - Common media state.
+ * @param {Object} action - Action object.
+ * @param {string} action.type - Type of action.
+ * @returns {ICommonState}
+ */
+function _initialGUMPromise(state: initialGUMPromise | null = null, action: AnyAction) {
+    if (action.type === SET_INITIAL_GUM_PROMISE) {
+        return action.promise ?? null;
+    }
+
+    return state;
+}
+
 /**
  * Media state object for local screenshare.
  *
@@ -247,6 +264,11 @@ interface IAudioState {
     unmuteBlocked: boolean;
 }
 
+type initialGUMPromise = Promise<{
+        errors?: any;
+        tracks: Array<any>;
+    }> | null;
+
 interface IScreenshareState {
     available: boolean;
     muted: number;
@@ -264,6 +286,7 @@ interface IVideoState {
 
 export interface IMediaState {
     audio: IAudioState;
+    initialGUMPromise: initialGUMPromise;
     screenshare: IScreenshareState;
     video: IVideoState;
 }
@@ -280,6 +303,7 @@ export interface IMediaState {
  */
 ReducerRegistry.register<IMediaState>('features/base/media', combineReducers({
     audio: _audio,
+    initialGUMPromise: _initialGUMPromise,
     screenshare: _screenshare,
     video: _video
 }));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/actionTypes.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/actionTypes.ts
index 85d7eb3..3e48e73 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/actionTypes.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/actionTypes.ts
@@ -1,3 +1,12 @@
+/**
+ * Create an action to mark the participant as notified to speak next.
+ *
+ * {
+ *     type: NOTIFIED_TO_SPEAK
+ * }
+ */
+export const NOTIFIED_TO_SPEAK = 'NOTIFIED_TO_SPEAK';
+
 /**
  * Create an action for when dominant speaker changes.
  *
@@ -43,18 +52,6 @@ export const KICK_PARTICIPANT = 'KICK_PARTICIPANT';
  */
 export const MUTE_REMOTE_PARTICIPANT = 'MUTE_REMOTE_PARTICIPANT';
 
-/**
- * Create an action for when the local participant's display name is updated.
- *
- * {
- *     type: PARTICIPANT_DISPLAY_NAME_CHANGED,
- *     id: string,
- *     name: string
- * }
- */
-export const PARTICIPANT_DISPLAY_NAME_CHANGED
-    = 'PARTICIPANT_DISPLAY_NAME_CHANGED';
-
 /**
  * Action to signal that ID of participant has changed. This happens when
  * local participant joins a new conference or quits one.
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/actions.ts
index 42fe6af..6d11aba 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/actions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/actions.ts
@@ -544,23 +544,27 @@ export function createVirtualScreenshareParticipant(sourceName: string, local: b
  */
 export function participantKicked(kicker: any, kicked: any) {
     return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+        const state = getState();
+        const localParticipant = getLocalParticipant(state);
+        const kickedId = kicked.getId();
+        const kickerId = kicker.getId();
 
         dispatch({
             type: PARTICIPANT_KICKED,
-            kicked: kicked.getId(),
-            kicker: kicker?.getId()
+            kicked: kickedId,
+            kicker: kickerId
         });
 
-        if (kicked.isReplaced?.()) {
+        if (kicked.isReplaced?.() || kickerId === localParticipant?.id) {
             return;
         }
 
         dispatch(showNotification({
             titleArguments: {
                 kicked:
-                    getParticipantDisplayName(getState, kicked.getId()),
+                    getParticipantDisplayName(state, kickedId),
                 kicker:
-                    getParticipantDisplayName(getState, kicker.getId())
+                    getParticipantDisplayName(state, kickerId)
             },
             titleKey: 'notify.kickParticipant'
         }, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/functions.ts
index d8546ce..ddebf4a 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/functions.ts
@@ -12,9 +12,9 @@ import { getCurrentConference } from '../conference/functions';
 import { ADD_PEOPLE_ENABLED } from '../flags/constants';
 import { getFeatureFlag } from '../flags/functions';
 import i18next from '../i18n/i18next';
-import { MEDIA_TYPE, VIDEO_TYPE } from '../media/constants';
+import { MEDIA_TYPE, MediaType, VIDEO_TYPE } from '../media/constants';
 import { toState } from '../redux/functions';
-import { getScreenShareTrack } from '../tracks/functions.any';
+import { getScreenShareTrack, isLocalTrackMuted } from '../tracks/functions.any';
 import { createDeferred } from '../util/helpers';
 
 import {
@@ -362,6 +362,42 @@ export function getRemoteParticipantCountWithFake(stateful: IStateful) {
     return participantsState.remote.size;
 }
 
+/**
+ * Returns the muted state of the given media source for a given participant.
+ *
+ * @param {(Function|Object)} stateful - The (whole) redux state, or redux's.
+ * @param {IParticipant} participant - The participant entity.
+ * @param {MediaType} mediaType - The media type.
+ * @returns {boolean} - True its muted, false otherwise.
+ */
+export function getMutedStateByParticipantAndMediaType(
+        stateful: IStateful,
+        participant: IParticipant,
+        mediaType: MediaType): boolean {
+    const type = mediaType === MEDIA_TYPE.SCREENSHARE ? 'video' : mediaType;
+
+    if (participant.local) {
+        const state = toState(stateful);
+        const tracks = state['features/base/tracks'];
+
+        return isLocalTrackMuted(tracks, mediaType);
+    }
+
+    const sources = participant.sources?.get(type);
+
+    if (!sources) {
+        return true;
+    }
+
+    if (mediaType === MEDIA_TYPE.AUDIO) {
+        return Array.from(sources.values())[0].muted;
+    }
+    const videoType = mediaType === MEDIA_TYPE.VIDEO ? VIDEO_TYPE.CAMERA : VIDEO_TYPE.SCREENSHARE;
+    const source = Array.from(sources.values()).find(src => src.videoType === videoType);
+
+    return source?.muted ?? true;
+}
+
 /**
  * Returns a count of the known participants in the passed in redux state,
  * including fake participants.
@@ -468,28 +504,28 @@ export function getScreenshareParticipantIds(stateful: IStateful): Array<string>
 }
 
 /**
- * Returns a list source name associated with a given remote participant and for the given media type.
+ * Returns a list of source names associated with a given remote participant and for the given media type.
  *
  * @param {(Function|Object)} stateful - The (whole) redux state, or redux's {@code getState} function to be used to
  * retrieve the state.
  * @param {string} id - The id of the participant whose source names are to be retrieved.
  * @param {string} mediaType - The type of source, audio or video.
- * @returns {Array<string>|undefined}
+ * @returns {Array<string>}
  */
-export function getSourceNamesByMediaType(
+export function getSourceNamesByMediaTypeAndParticipant(
         stateful: IStateful,
         id: string,
-        mediaType: string): Array<string> | undefined {
+        mediaType: string): Array<string> {
     const participant: IParticipant | undefined = getParticipantById(stateful, id);
 
     if (!participant) {
-        return;
+        return [];
     }
 
     const sources = participant.sources;
 
     if (!sources) {
-        return;
+        return [];
     }
 
     return Array.from(sources.get(mediaType) ?? new Map())
@@ -497,6 +533,37 @@ export function getSourceNamesByMediaType(
         .map(s => s[0]);
 }
 
+/**
+ * Returns a list of source names associated with a given remote participant and for the given video type (only for
+ * video sources).
+ *
+ * @param {(Function|Object)} stateful - The (whole) redux state, or redux's {@code getState} function to be used to
+ * retrieve the state.
+ * @param {string} id - The id of the participant whose source names are to be retrieved.
+ * @param {string} videoType - The type of video, camera or desktop.
+ * @returns {Array<string>}
+ */
+export function getSourceNamesByVideoTypeAndParticipant(
+        stateful: IStateful,
+        id: string,
+        videoType: string): Array<string> {
+    const participant: IParticipant | undefined = getParticipantById(stateful, id);
+
+    if (!participant) {
+        return [];
+    }
+
+    const sources = participant.sources;
+
+    if (!sources) {
+        return [];
+    }
+
+    return Array.from(sources.get(MEDIA_TYPE.VIDEO) ?? new Map())
+        .filter(source => source[1].videoType === videoType && (videoType === VIDEO_TYPE.CAMERA || !source[1].muted))
+        .map(s => s[0]);
+}
+
 /**
  * Returns the presence status of a participant associated with the passed id.
  *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/middleware.ts
index 1755ec8..675e8cc 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/middleware.ts
@@ -2,8 +2,6 @@ import i18n from 'i18next';
 import { batch } from 'react-redux';
 import { AnyAction } from 'redux';
 
-// @ts-expect-error
-import UIEvents from '../../../../service/UI/UIEvents';
 import { IStore } from '../../app/types';
 import { approveParticipant } from '../../av-moderation/actions';
 import { UPDATE_BREAKOUT_ROOMS } from '../../breakout-rooms/actionTypes';
@@ -21,7 +19,7 @@ import { CALLING, INVITED } from '../../presence-status/constants';
 import { RAISE_HAND_SOUND_ID } from '../../reactions/constants';
 import { RECORDING_OFF_SOUND_ID, RECORDING_ON_SOUND_ID } from '../../recording/constants';
 import { APP_WILL_MOUNT, APP_WILL_UNMOUNT } from '../app/actionTypes';
-import { CONFERENCE_WILL_JOIN } from '../conference/actionTypes';
+import { CONFERENCE_JOINED, CONFERENCE_WILL_JOIN } from '../conference/actionTypes';
 import { forEachConference, getCurrentConference } from '../conference/functions';
 import { IJitsiConference } from '../conference/reducer';
 import { SET_CONFIG } from '../config/actionTypes';
@@ -41,7 +39,6 @@ import {
     MUTE_REMOTE_PARTICIPANT,
     OVERWRITE_PARTICIPANTS_NAMES,
     OVERWRITE_PARTICIPANT_NAME,
-    PARTICIPANT_DISPLAY_NAME_CHANGED,
     PARTICIPANT_JOINED,
     PARTICIPANT_LEFT,
     PARTICIPANT_UPDATED,
@@ -204,6 +201,28 @@ MiddlewareRegistry.register(store => next => action => {
         return result;
     }
 
+    case CONFERENCE_JOINED: {
+        const result = next(action);
+
+        const state = store.getState();
+        const { startSilent } = state['features/base/config'];
+
+        if (startSilent) {
+            const localId = getLocalParticipant(store.getState())?.id;
+
+            if (localId) {
+                store.dispatch(participantUpdated({
+                    id: localId,
+                    local: true,
+                    isSilent: startSilent
+                }));
+            }
+        }
+
+        return result;
+    }
+
+
     case SET_LOCAL_PARTICIPANT_RECORDING_STATUS: {
         const state = store.getState();
         const { recording, onlySelf } = action;
@@ -234,29 +253,13 @@ MiddlewareRegistry.register(store => next => action => {
         break;
     }
 
-    // TODO Remove this middleware when the local display name update flow is
-    // fully brought into redux.
-    case PARTICIPANT_DISPLAY_NAME_CHANGED: {
-        if (typeof APP !== 'undefined') {
-            const participant = getLocalParticipant(store.getState());
-
-            if (participant && participant.id === action.id) {
-                APP.UI.emitEvent(UIEvents.NICKNAME_CHANGED, action.name);
-            }
-        }
-
-        break;
-    }
-
     case RAISE_HAND_UPDATED: {
         const { participant } = action;
         let queue = getRaiseHandsQueue(store.getState());
 
         if (participant.raisedHandTimestamp) {
-            queue.push({
-                id: participant.id,
-                raisedHandTimestamp: participant.raisedHandTimestamp
-            });
+            queue = [ ...queue, { id: participant.id,
+                raisedHandTimestamp: participant.raisedHandTimestamp } ];
 
             // sort the queue before adding to store.
             queue = queue.sort(({ raisedHandTimestamp: a }, { raisedHandTimestamp: b }) => a - b);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/reducer.ts
index 98871fc..c4edc95 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/reducer.ts
@@ -6,6 +6,7 @@ import { set } from '../redux/functions';
 
 import {
     DOMINANT_SPEAKER_CHANGED,
+    NOTIFIED_TO_SPEAK,
     OVERWRITE_PARTICIPANT_NAME,
     PARTICIPANT_ID_CHANGED,
     PARTICIPANT_JOINED,
@@ -92,7 +93,7 @@ export interface IParticipantsState {
     numberOfParticipantsNotSupportingE2EE: number;
     overwrittenNameList: { [id: string]: string; };
     pinnedParticipant?: string;
-    raisedHandsQueue: Array<{ id: string; raisedHandTimestamp: number; }>;
+    raisedHandsQueue: Array<{ hasBeenNotified?: boolean; id: string; raisedHandTimestamp: number; }>;
     remote: Map<string, IParticipant>;
     remoteVideoSources: Set<string>;
     sortedRemoteParticipants: Map<string, string>;
@@ -114,6 +115,23 @@ export interface IParticipantsState {
 ReducerRegistry.register<IParticipantsState>('features/base/participants',
 (state = DEFAULT_STATE, action): IParticipantsState => {
     switch (action.type) {
+    case NOTIFIED_TO_SPEAK: {
+        return {
+            ...state,
+            raisedHandsQueue: state.raisedHandsQueue.map((item, index) => {
+                if (index === 0) {
+
+                    return {
+                        ...item,
+                        hasBeenNotified: true
+                    };
+                }
+
+                return item;
+            })
+        };
+    }
+
     case PARTICIPANT_ID_CHANGED: {
         const { local } = state;
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/subscriber.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/subscriber.ts
index bcc94bd..ac40b53 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/subscriber.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/subscriber.ts
@@ -1,11 +1,16 @@
+
 import _ from 'lodash';
+import { batch } from 'react-redux';
 
 import { IStore } from '../../app/types';
+import { showNotification } from '../../notifications/actions';
+import { NOTIFICATION_TIMEOUT_TYPE } from '../../notifications/constants';
 import { getCurrentConference } from '../conference/functions';
-import { getSsrcRewritingFeatureFlag } from '../config/functions.any';
+import { getSsrcRewritingFeatureFlag, hasBeenNotified, isNextToSpeak } from '../config/functions.any';
 import { VIDEO_TYPE } from '../media/constants';
 import StateListenerRegistry from '../redux/StateListenerRegistry';
 
+import { NOTIFIED_TO_SPEAK } from './actionTypes';
 import { createVirtualScreenshareParticipant, participantLeft } from './actions';
 import {
     getParticipantById,
@@ -25,6 +30,15 @@ StateListenerRegistry.register(
         && _updateScreenshareParticipantsBasedOnPresence(store)
 );
 
+StateListenerRegistry.register(
+    /* selector */ state => state['features/base/participants'].raisedHandsQueue,
+    /* listener */ (raisedHandsQueue, store) => {
+        if (raisedHandsQueue.length && isNextToSpeak(store.getState()) && !hasBeenNotified(store.getState())) {
+            _notifyNextSpeakerInRaisedHandQueue(store);
+        }
+    }
+);
+
 /**
  * Compares the old and new screenshare lists provided and creates/removes the virtual screenshare participant
  * tiles accodingly.
@@ -121,3 +135,23 @@ function _updateScreenshareParticipantsBasedOnPresence(store: IStore): void {
 
     _createOrRemoveVirtualParticipants(previousScreenshareSourceNames, currentScreenshareSourceNames, store);
 }
+
+/**
+ * Handles notifying the next speaker in the raised hand queue.
+ *
+ * @param {*} store - The redux store.
+ * @returns {void}
+ */
+function _notifyNextSpeakerInRaisedHandQueue(store: IStore): void {
+    const { dispatch } = store;
+
+    batch(() => {
+        dispatch(showNotification({
+            titleKey: 'notify.nextToSpeak',
+            maxLines: 2
+        }, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
+        dispatch({
+            type: NOTIFIED_TO_SPEAK
+        });
+    });
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/types.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/types.ts
index 4b3b6e3..1a2777f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/participants/types.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/participants/types.ts
@@ -19,14 +19,13 @@ export interface IParticipant {
     e2eeVerified?: boolean;
     email?: string;
     fakeParticipant?: FakeParticipant;
-    features?: {
-        'screen-sharing'?: boolean | string;
-    };
+    features?: IParticipantFeatures;
     getId?: Function;
     id: string;
     isJigasi?: boolean;
     isReplaced?: boolean;
     isReplacing?: number;
+    isSilent?: boolean;
     jwtId?: string;
     loadableAvatarUrl?: string;
     loadableAvatarUrlUseCORS?: boolean;
@@ -54,6 +53,23 @@ export interface ILocalParticipant extends IParticipant {
     userSelectedMicDeviceLabel?: string;
 }
 
+export interface IParticipantFeatures {
+    'branding'?: boolean | string;
+    'calendar'?: boolean | string;
+    'flip'?: boolean | string;
+    'inbound-call'?: boolean | string;
+    'livestreaming'?: boolean | string;
+    'lobby'?: boolean | string;
+    'moderation'?: boolean | string;
+    'outbound-call'?: boolean | string;
+    'recording'?: boolean | string;
+    'room'?: boolean | string;
+    'screen-sharing'?: boolean | string;
+    'sip-inbound-call'?: boolean | string;
+    'sip-outbound-call'?: boolean | string;
+    'transcription'?: boolean | string;
+}
+
 export interface ISourceInfo {
     muted: boolean;
     videoType: string;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/react/Platform.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/react/Platform.web.ts
index 17c6e53..d67f596 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/react/Platform.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/react/Platform.web.ts
@@ -1,11 +1,16 @@
 // @ts-ignore
-const { userAgent, maxTouchPoints, platform } = navigator;
-let OS = '';
+const { maxTouchPoints, platform, userAgent } = navigator;
+
+let OS = '',
+    isPad = false;
 
 if (userAgent.match(/Android/i)) {
     OS = 'android';
 } else if (userAgent.match(/iP(ad|hone|od)/i) || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform))) {
     OS = 'ios';
+} else if (userAgent.match(/iP(ad)/i)) {
+    OS = 'ios';
+    isPad = true;
 } else if (userAgent.match(/Mac(intosh| OS X)/i)) {
     OS = 'macos';
 } else if (userAgent.match(/Windows/i)) {
@@ -18,6 +23,13 @@ if (userAgent.match(/Android/i)) {
  * Provides a minimal equivalent of react-native's Platform abstraction.
  */
 export default {
+    /**
+     * Returns a boolean which defines if device is an iPad.
+     *
+     * @type {boolean}
+     */
+    isPad,
+
     /**
      * The operating system on which the application is executing.
      *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/react/types.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/react/types.ts
index d8870b8..1525926 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/react/types.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/react/types.ts
@@ -5,6 +5,7 @@ export interface IIconButtonProps {
     accessibilityLabel?: string;
     color?: string;
     disabled?: boolean;
+    id?: string;
     onPress?: (e?: GestureResponderEvent) => void;
     size?: number | string;
     src: Function;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/responsive-ui/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/responsive-ui/actions.ts
index 7b89a75..f33cfaa 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/responsive-ui/actions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/responsive-ui/actions.ts
@@ -35,6 +35,10 @@ const REDUCED_UI_THRESHOLD = 300;
  */
 export function clientResized(clientWidth: number, clientHeight: number) {
     return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+        if (!clientWidth && !clientHeight) {
+            return;
+        }
+
         let availableWidth = clientWidth;
 
         if (navigator.product !== 'ReactNative') {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/responsive-ui/middleware.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/responsive-ui/middleware.web.ts
index b1b7932..f4130b5 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/responsive-ui/middleware.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/responsive-ui/middleware.web.ts
@@ -1,5 +1,6 @@
 import { IStore } from '../../app/types';
 import { APP_WILL_MOUNT, APP_WILL_UNMOUNT } from '../app/actionTypes';
+import { CONFERENCE_JOINED } from '../conference/actionTypes';
 import MiddlewareRegistry from '../redux/MiddlewareRegistry';
 
 import { clientResized } from './actions';
@@ -27,6 +28,19 @@ MiddlewareRegistry.register(store => next => action => {
         _appWillMount(store);
         break;
 
+    case CONFERENCE_JOINED: {
+        const { clientHeight = 0, clientWidth = 0 } = store.getState()['features/base/responsive-ui'];
+
+        if (!clientHeight && !clientWidth) {
+            const {
+                innerHeight,
+                innerWidth
+            } = window;
+
+            store.dispatch(clientResized(innerWidth, innerHeight));
+        }
+        break;
+    }
     }
 
     return result;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/testing/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/testing/functions.ts
index 4b44e99..2ef76d6 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/testing/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/testing/functions.ts
@@ -1,8 +1,13 @@
 import { IReduxState, IStore } from '../../app/types';
 import { isTrackStreamingStatusActive } from '../../connection-indicator/functions';
+import { VIDEO_CODEC } from '../../video-quality/constants';
 import { MEDIA_TYPE, VIDEO_TYPE } from '../media/constants';
 import { getParticipantById, isScreenShareParticipant } from '../participants/functions';
-import { getTrackByMediaTypeAndParticipant, getVideoTrackByParticipant } from '../tracks/functions';
+import {
+    getLocalVideoTrack,
+    getTrackByMediaTypeAndParticipant,
+    getVideoTrackByParticipant
+} from '../tracks/functions';
 
 /**
  * Indicates whether the test mode is enabled. When it's enabled
@@ -51,6 +56,78 @@ export function isLargeVideoReceived({ getState }: IStore): boolean {
     return Boolean(videoTrack && !videoTrack.muted && isTrackStreamingStatusActive(videoTrack));
 }
 
+/**
+ * Returns whether the local video track is encoded in AV1.
+ *
+ * @param {IStore} store - The redux store.
+ * @returns {boolean}
+ */
+export function isLocalCameraEncodingAv1({ getState }: IStore): boolean {
+    const state = getState();
+    const tracks = state['features/base/tracks'];
+    const localtrack = getLocalVideoTrack(tracks);
+
+    if (localtrack?.codec?.toLowerCase() === VIDEO_CODEC.AV1) {
+        return true;
+    }
+
+    return false;
+}
+
+/**
+ * Returns whether the local video track is encoded in H.264.
+ *
+ * @param {IStore} store - The redux store.
+ * @returns {boolean}
+ */
+export function isLocalCameraEncodingH264({ getState }: IStore): boolean {
+    const state = getState();
+    const tracks = state['features/base/tracks'];
+    const localtrack = getLocalVideoTrack(tracks);
+
+    if (localtrack?.codec?.toLowerCase() === VIDEO_CODEC.H264) {
+        return true;
+    }
+
+    return false;
+}
+
+/**
+ * Returns whether the local video track is encoded in VP8.
+ *
+ * @param {IStore} store - The redux store.
+ * @returns {boolean}
+ */
+export function isLocalCameraEncodingVp8({ getState }: IStore): boolean {
+    const state = getState();
+    const tracks = state['features/base/tracks'];
+    const localtrack = getLocalVideoTrack(tracks);
+
+    if (localtrack?.codec?.toLowerCase() === VIDEO_CODEC.VP8) {
+        return true;
+    }
+
+    return false;
+}
+
+/**
+ * Returns whether the local video track is encoded in VP9.
+ *
+ * @param {IStore} store - The redux store.
+ * @returns {boolean}
+ */
+export function isLocalCameraEncodingVp9({ getState }: IStore): boolean {
+    const state = getState();
+    const tracks = state['features/base/tracks'];
+    const localtrack = getLocalVideoTrack(tracks);
+
+    if (localtrack?.codec?.toLowerCase() === VIDEO_CODEC.VP9) {
+        return true;
+    }
+
+    return false;
+}
+
 /**
  * Returns whether the last media event received for a remote video indicates that the video is playing, if not muted.
  *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/testing/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/testing/middleware.ts
index 62343f6..e772420 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/testing/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/testing/middleware.ts
@@ -10,6 +10,10 @@ import { setConnectionState } from './actions';
 import {
     getRemoteVideoType,
     isLargeVideoReceived,
+    isLocalCameraEncodingAv1,
+    isLocalCameraEncodingH264,
+    isLocalCameraEncodingVp8,
+    isLocalCameraEncodingVp9,
     isRemoteVideoReceived,
     isTestModeEnabled
 } from './functions';
@@ -86,6 +90,10 @@ function _bindTortureHelpers(store: IStore) {
     getJitsiMeetGlobalNS().testing = {
         getRemoteVideoType: getRemoteVideoType.bind(null, store),
         isLargeVideoReceived: isLargeVideoReceived.bind(null, store),
+        isLocalCameraEncodingAv1: isLocalCameraEncodingAv1.bind(null, store),
+        isLocalCameraEncodingH264: isLocalCameraEncodingH264.bind(null, store),
+        isLocalCameraEncodingVp8: isLocalCameraEncodingVp8.bind(null, store),
+        isLocalCameraEncodingVp9: isLocalCameraEncodingVp9.bind(null, store),
         isRemoteVideoReceived: isRemoteVideoReceived.bind(null, store)
     };
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actionTypes.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actionTypes.ts
index 26b5b66..6a25358 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actionTypes.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actionTypes.ts
@@ -66,16 +66,6 @@ export const TRACK_MUTE_UNMUTE_FAILED = 'TRACK_MUTE_UNMUTE_FAILED';
  */
 export const TRACK_NO_DATA_FROM_SOURCE = 'TRACK_NO_DATA_FROM_SOURCE';
 
-/**
- * The type of redux action dispatched when the owner of a track changes due to ssrc remapping.
- *
- * {
- *     type: TRACK_OWNER_CHANGED,
- *     track: Track
- * }
- */
-export const TRACK_OWNER_CHANGED = 'TRACK_OWNER_CHANGED';
-
 /**
  * The type of redux action dispatched when a track has been (locally or
  * remotely) removed from the conference.
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actions.any.ts
index ce9cd6f..d8ba48f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actions.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actions.any.ts
@@ -26,7 +26,6 @@ import {
     TRACK_CREATE_ERROR,
     TRACK_MUTE_UNMUTE_FAILED,
     TRACK_NO_DATA_FROM_SOURCE,
-    TRACK_OWNER_CHANGED,
     TRACK_REMOVED,
     TRACK_STOPPED,
     TRACK_UPDATED,
@@ -41,7 +40,7 @@ import {
     getTrackByJitsiTrack
 } from './functions';
 import logger from './logger';
-import { ITrackOptions } from './types';
+import { ITrack, ITrackOptions } from './types';
 
 /**
  * Add a given local track to the conference.
@@ -65,7 +64,7 @@ export function addLocalTrack(newTrack: any) {
         const isMuted = newTrack.isMuted();
 
         logger.log(`Adding ${newTrack.getType()} track - ${isMuted ? 'muted' : 'unmuted'}`);
-        await dispatch(setMuted(isMuted));
+        dispatch(setMuted(isMuted));
 
         return dispatch(_addTracks([ newTrack ]));
     };
@@ -234,12 +233,11 @@ export function createLocalTracksA(options: ITrackOptions = {}) {
  */
 export function destroyLocalTracks(track: any = null) {
     if (track) {
-        return (dispatch: IStore['dispatch']) => {
-            dispatch(_disposeAndRemoveTracks([ track ]));
-        };
+        return (dispatch: IStore['dispatch']) => dispatch(_disposeAndRemoveTracks([ track ]));
     }
 
-    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) =>
+
         // First wait until any getUserMedia in progress is settled and then get
         // rid of all local tracks.
         _cancelGUMProcesses(getState)
@@ -249,7 +247,6 @@ export function destroyLocalTracks(track: any = null) {
                         getState()['features/base/tracks']
                             .filter(t => t.local)
                             .map(t => t.jitsiTrack))));
-    };
 }
 
 /**
@@ -275,7 +272,7 @@ export function noDataFromSource(track: any) {
  * @returns {Function}
  */
 export function showNoDataFromSourceVideoError(jitsiTrack: any) {
-    return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         let notificationInfo;
 
         const track = getTrackByJitsiTrack(getState()['features/base/tracks'], jitsiTrack);
@@ -287,7 +284,7 @@ export function showNoDataFromSourceVideoError(jitsiTrack: any) {
         if (track.isReceivingData) {
             notificationInfo = undefined;
         } else {
-            const notificationAction = await dispatch(showErrorNotification({
+            const notificationAction = dispatch(showErrorNotification({
                 descriptionKey: 'dialog.cameraNotSendingData',
                 titleKey: 'dialog.cameraNotSendingDataTitle'
             }, NOTIFICATION_TIMEOUT_TYPE.LONG));
@@ -360,7 +357,7 @@ function replaceStoredTracks(oldTrack: any, newTrack: any) {
             sendAnalytics(createTrackMutedEvent(newTrack.getType(), 'track.replaced', isMuted));
             logger.log(`Replace ${newTrack.getType()} track - ${isMuted ? 'muted' : 'unmuted'}`);
 
-            await dispatch(setMuted(isMuted));
+            dispatch(setMuted(isMuted));
             await dispatch(_addTracks([ newTrack ]));
         }
     };
@@ -374,16 +371,13 @@ function replaceStoredTracks(oldTrack: any, newTrack: any) {
  * @returns {Function}
  */
 export function trackAdded(track: any) {
-    return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         track.on(
             JitsiTrackEvents.TRACK_MUTE_CHANGED,
             () => dispatch(trackMutedChanged(track)));
         track.on(
             JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,
             (type: VideoType) => dispatch(trackVideoTypeChanged(track, type)));
-        track.on(
-            JitsiTrackEvents.TRACK_OWNER_CHANGED,
-            (owner: string) => dispatch(trackOwnerChanged(track, owner)));
         const local = track.isLocal();
         const mediaType = track.getVideoType() === VIDEO_TYPE.DESKTOP
             ? MEDIA_TYPE.SCREENSHARE
@@ -404,7 +398,7 @@ export function trackAdded(track: any) {
             track.on(JitsiTrackEvents.NO_DATA_FROM_SOURCE, () => dispatch(noDataFromSource({ jitsiTrack: track })));
             if (!isReceivingData) {
                 if (mediaType === MEDIA_TYPE.AUDIO) {
-                    const notificationAction = await dispatch(showNotification({
+                    const notificationAction = dispatch(showNotification({
                         descriptionKey: 'dialog.micNotSendingData',
                         titleKey: 'dialog.micNotSendingDataTitle'
                     }, NOTIFICATION_TIMEOUT_TYPE.LONG));
@@ -454,6 +448,32 @@ export function trackAdded(track: any) {
     };
 }
 
+/**
+ * Create an action for when a track's codec has been signaled to have been changed.
+ *
+ * @param {JitsiLocalTrack} track - JitsiLocalTrack instance.
+ * @param {string} codec - The video codec.
+ * @returns {{
+ *     type: TRACK_UPDATED,
+ *     track: Track
+ * }}
+ */
+export function trackCodecChanged(track: ITrack, codec: string): {
+    track: {
+        codec: string;
+        jitsiTrack: any;
+    };
+    type: 'TRACK_UPDATED';
+} {
+    return {
+        type: TRACK_UPDATED,
+        track: {
+            codec,
+            jitsiTrack: track
+        }
+    };
+}
+
 /**
  * Create an action for when a track's muted state has been signaled to be
  * changed.
@@ -625,32 +645,6 @@ export function trackStreamingStatusChanged(track: any, streamingStatus: string)
     };
 }
 
-/**
- * Create an action for when the owner of the track changes due to ssrc remapping.
- *
- * @param {(JitsiRemoteTrack)} track - JitsiTrack instance.
- * @param {string} participantId - New owner's participant ID.
- * @returns {{
- *     type: TRACK_OWNER_CHANGED,
- *     track: Track
- * }}
- */
-export function trackOwnerChanged(track: any, participantId: string): {
-    track: {
-        jitsiTrack: any;
-        participantId: string;
-    };
-    type: 'TRACK_OWNER_CHANGED';
-} {
-    return {
-        type: TRACK_OWNER_CHANGED,
-        track: {
-            jitsiTrack: track,
-            participantId
-        }
-    };
-}
-
 /**
  * Signals passed tracks to be added.
  *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actions.web.ts
index 1dc378c..5969ad9 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actions.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/actions.web.ts
@@ -4,7 +4,7 @@ import { IReduxState, IStore } from '../../app/types';
 import { showModeratedNotification } from '../../av-moderation/actions';
 import { shouldShowModeratedNotification } from '../../av-moderation/functions';
 import { setNoiseSuppressionEnabled } from '../../noise-suppression/actions';
-import { showNotification } from '../../notifications/actions';
+import { showErrorNotification, showNotification } from '../../notifications/actions';
 import { NOTIFICATION_TIMEOUT_TYPE } from '../../notifications/constants';
 import { stopReceiver } from '../../remote-control/actions';
 import { setScreenAudioShareState, setScreenshareAudioTrack } from '../../screen-share/actions';
@@ -13,10 +13,12 @@ import { toggleScreenshotCaptureSummary } from '../../screenshot-capture/actions
 import { isScreenshotCaptureEnabled } from '../../screenshot-capture/functions';
 import { AudioMixerEffect } from '../../stream-effects/audio-mixer/AudioMixerEffect';
 import { getCurrentConference } from '../conference/functions';
+import { notifyCameraError, notifyMicError } from '../devices/actions.web';
 import { openDialog } from '../dialog/actions';
-import { JitsiTrackErrors, JitsiTrackEvents } from '../lib-jitsi-meet';
-import { setScreenshareMuted } from '../media/actions';
-import { MEDIA_TYPE, VIDEO_TYPE } from '../media/constants';
+import { JitsiTrackErrors, JitsiTrackEvents, browser } from '../lib-jitsi-meet';
+import { gumPending, setScreenshareMuted } from '../media/actions';
+import { MEDIA_TYPE, MediaType, VIDEO_TYPE } from '../media/constants';
+import { IGUMPendingState } from '../media/types';
 
 import {
     addLocalTrack,
@@ -31,7 +33,8 @@ import {
     getLocalVideoTrack,
     isToggleCameraEnabled
 } from './functions';
-import { IShareOptions, IToggleScreenSharingOptions } from './types';
+import logger from './logger';
+import { ICreateInitialTracksOptions, IInitialTracksErrors, IShareOptions, IToggleScreenSharingOptions } from './types';
 
 export * from './actions.any';
 
@@ -74,33 +77,6 @@ export function toggleScreensharing(
  * @param {Object} store - The redux store.
  * @returns {void}
  */
-function _handleScreensharingError(
-        error: Error | AUDIO_ONLY_SCREEN_SHARE_NO_TRACK,
-        { dispatch }: IStore): void {
-    if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {
-        return;
-    }
-    let descriptionKey, titleKey;
-
-    if (error.name === JitsiTrackErrors.PERMISSION_DENIED) {
-        descriptionKey = 'dialog.screenSharingPermissionDeniedError';
-        titleKey = 'dialog.screenSharingFailedTitle';
-    } else if (error.name === JitsiTrackErrors.CONSTRAINT_FAILED) {
-        descriptionKey = 'dialog.cameraConstraintFailedError';
-        titleKey = 'deviceError.cameraError';
-    } else if (error.name === JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR) {
-        descriptionKey = 'dialog.screenSharingFailed';
-        titleKey = 'dialog.screenSharingFailedTitle';
-    } else if (error === AUDIO_ONLY_SCREEN_SHARE_NO_TRACK) {
-        descriptionKey = 'notify.screenShareNoAudio';
-        titleKey = 'notify.screenShareNoAudioTitle';
-    }
-
-    dispatch(showNotification({
-        titleKey,
-        descriptionKey
-    }, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
-}
 
 
 /**
@@ -128,7 +104,6 @@ async function _maybeApplyAudioMixerEffect(desktopAudioTrack: any, state: IRedux
     }
 }
 
-
 /**
  * Toggles screen sharing.
  *
@@ -182,7 +157,7 @@ async function _toggleScreenSharing(
             try {
                 tracks = await createLocalTracksF(options) as any[];
             } catch (error) {
-                _handleScreensharingError(error as any, store);
+                dispatch(handleScreenSharingError(error, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
 
                 throw error;
             }
@@ -196,7 +171,7 @@ async function _toggleScreenSharing(
             desktopVideoTrack.dispose();
 
             if (!desktopAudioTrack) {
-                _handleScreensharingError(AUDIO_ONLY_SCREEN_SHARE_NO_TRACK, store);
+                dispatch(handleScreenSharingError(AUDIO_ONLY_SCREEN_SHARE_NO_TRACK, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
 
                 throw new Error(AUDIO_ONLY_SCREEN_SHARE_NO_TRACK);
             }
@@ -317,3 +292,224 @@ export function openAllowToggleCameraDialog(onAllow: Function, initiatorId: stri
         initiatorId
     });
 }
+
+/**
+ * Sets the GUM pending state for the tracks that have failed.
+ *
+ * NOTE: Some of the track that we will be setting to GUM pending state NONE may not have failed but they may have
+ * been requested. This won't be a problem because their current GUM pending state will be NONE anyway.
+ *
+ * @param {JitsiLocalTrack} tracks - The tracks that have been created.
+ * @param {Function} dispatch - The redux dispatch function.
+ * @returns {void}
+ */
+export function setGUMPendingStateOnFailedTracks(tracks: Array<any>, dispatch: IStore['dispatch']) {
+    const tracksTypes = tracks.map(track => {
+        if (track.getVideoType() === VIDEO_TYPE.DESKTOP) {
+            return MEDIA_TYPE.SCREENSHARE;
+        }
+
+        return track.getType();
+    });
+    const nonPendingTracks = [ MEDIA_TYPE.AUDIO, MEDIA_TYPE.VIDEO ].filter(type => !tracksTypes.includes(type));
+
+    dispatch(gumPending(nonPendingTracks, IGUMPendingState.NONE));
+}
+
+/**
+ * Creates and adds to the conference the initial audio/video tracks.
+ *
+ * @param {Array<MediaType>} devices - Array with devices (audio/video) that will be used.
+ * @returns {Function}
+ */
+export function createAndAddInitialAVTracks(devices: Array<MediaType>) {
+    return async (dispatch: IStore['dispatch']) => {
+        dispatch(gumPending(devices, IGUMPendingState.PENDING_UNMUTE));
+
+        const { tracks, errors } = await dispatch(createInitialAVTracks({ devices }));
+
+        setGUMPendingStateOnFailedTracks(tracks, dispatch);
+        dispatch(displayErrorsForCreateInitialLocalTracks(errors));
+
+        await Promise.allSettled(tracks.map((track: any) => {
+            const legacyConferenceObject = APP.conference;
+
+            if (track.isAudioTrack()) {
+                return legacyConferenceObject.useAudioStream(track);
+            }
+            if (track.isVideoTrack()) {
+                return legacyConferenceObject.useVideoStream(track);
+            }
+
+            return Promise.resolve();
+        }));
+
+        dispatch(gumPending(devices, IGUMPendingState.NONE));
+    };
+}
+
+/**
+ * Creates the initial audio/video tracks.
+ *
+ * @param {ICreateInitialTracksOptions} options - Options for creating the audio/video tracks.
+ * @returns {Function}
+ */
+export function createInitialAVTracks(options: ICreateInitialTracksOptions) {
+    return (dispatch: IStore['dispatch'], _getState: IStore['getState']) => {
+        const {
+            devices,
+            timeout,
+            firePermissionPromptIsShownEvent
+        } = options;
+
+        dispatch(gumPending(devices, IGUMPendingState.PENDING_UNMUTE));
+
+        return createLocalTracksF(options).then(tracks => {
+            return {
+                errors: {} as IInitialTracksErrors,
+                tracks
+            };
+        })
+        .catch(async error => {
+            const errors = {} as IInitialTracksErrors;
+
+            if (error.name === JitsiTrackErrors.TIMEOUT && !browser.isElectron()) {
+                if (devices.includes(MEDIA_TYPE.AUDIO)) {
+                    errors.audioOnlyError = error;
+                }
+
+                if (devices.includes(MEDIA_TYPE.VIDEO)) {
+                    errors.videoOnlyError = error;
+                }
+
+                if (errors.audioOnlyError && errors.videoOnlyError) {
+                    errors.audioAndVideoError = error;
+                }
+
+                return {
+                    errors,
+                    tracks: []
+                };
+            }
+
+            // Retry with separate gUM calls.
+            const gUMPromises = [];
+            const tracks: any[] | PromiseLike<any[]> = [];
+
+            if (devices.includes(MEDIA_TYPE.AUDIO)) {
+                gUMPromises.push(createLocalTracksF({
+                    devices: [ MEDIA_TYPE.AUDIO ],
+                    timeout,
+                    firePermissionPromptIsShownEvent
+                }));
+            }
+
+            if (devices.includes(MEDIA_TYPE.VIDEO)) {
+                gUMPromises.push(createLocalTracksF({
+                    devices: [ MEDIA_TYPE.VIDEO ],
+                    timeout,
+                    firePermissionPromptIsShownEvent
+                }));
+            }
+
+            const results = await Promise.allSettled(gUMPromises);
+            let errorMsg;
+
+            results.forEach((result, idx) => {
+                if (result.status === 'fulfilled') {
+                    tracks.push(result.value[0]);
+                } else {
+                    errorMsg = result.reason;
+                    const isAudio = idx === 0;
+
+                    logger.error(`${isAudio ? 'Audio' : 'Video'} track creation failed with error ${errorMsg}`);
+                    if (isAudio) {
+                        errors.audioOnlyError = errorMsg;
+                    } else {
+                        errors.videoOnlyError = errorMsg;
+                    }
+                }
+            });
+
+            if (errors.audioOnlyError && errors.videoOnlyError) {
+                errors.audioAndVideoError = errorMsg;
+            }
+
+            return {
+                tracks,
+                errors
+            };
+        });
+    };
+}
+
+/**
+ * Displays error notifications according to the state carried by the passed {@code errors} object.
+ *
+ * @param {InitialTracksErrors} errors - The errors (if any).
+ * @returns {Function}
+ * @private
+ */
+export function displayErrorsForCreateInitialLocalTracks(errors: IInitialTracksErrors) {
+    return (dispatch: IStore['dispatch']) => {
+        const {
+            audioOnlyError,
+            screenSharingError,
+            videoOnlyError
+        } = errors;
+
+        if (screenSharingError) {
+            dispatch(handleScreenSharingError(screenSharingError, NOTIFICATION_TIMEOUT_TYPE.LONG));
+        }
+        if (audioOnlyError || videoOnlyError) {
+            if (audioOnlyError) {
+                dispatch(notifyMicError(audioOnlyError));
+            }
+
+            if (videoOnlyError) {
+                dispatch(notifyCameraError(videoOnlyError));
+            }
+        }
+    };
+}
+
+/**
+ * Displays a UI notification for screensharing failure based on the error passed.
+ *
+ * @private
+ * @param {Error | AUDIO_ONLY_SCREEN_SHARE_NO_TRACK} error - The error.
+ * @param {NOTIFICATION_TIMEOUT_TYPE} timeout - The time for showing the notification.
+ * @returns {Function}
+ */
+export function handleScreenSharingError(
+        error: Error | AUDIO_ONLY_SCREEN_SHARE_NO_TRACK,
+        timeout: NOTIFICATION_TIMEOUT_TYPE) {
+    return (dispatch: IStore['dispatch']) => {
+        logger.error('failed to share local desktop', error);
+
+        let descriptionKey;
+        let titleKey;
+
+        if (error.name === JitsiTrackErrors.PERMISSION_DENIED) {
+            descriptionKey = 'dialog.screenSharingPermissionDeniedError';
+            titleKey = 'dialog.screenSharingFailedTitle';
+        } else if (error.name === JitsiTrackErrors.CONSTRAINT_FAILED) {
+            descriptionKey = 'dialog.cameraConstraintFailedError';
+            titleKey = 'deviceError.cameraError';
+        } else if (error.name === JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR) {
+            descriptionKey = 'dialog.screenSharingFailed';
+            titleKey = 'dialog.screenSharingFailedTitle';
+        } else if (error === AUDIO_ONLY_SCREEN_SHARE_NO_TRACK) {
+            descriptionKey = 'notify.screenShareNoAudio';
+            titleKey = 'notify.screenShareNoAudioTitle';
+        } else { // safeguard for not showing notification with empty text. This will also include
+            // error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED
+            return;
+        }
+
+        dispatch(showErrorNotification({
+            descriptionKey,
+            titleKey
+        }, timeout));
+    };
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/constants.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/constants.ts
index abbe4ab..ef72ef0 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/constants.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/constants.ts
@@ -2,3 +2,4 @@
  * The payload name for remotely setting the camera facing mode message.
  */
 export const CAMERA_FACING_MODE_MESSAGE = 'camera-facing-mode-message';
+export const LOWER_HAND_MESSAGE = 'lower-hand-message';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/middleware.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/middleware.any.ts
index 0847dff..1690103 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/middleware.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/middleware.any.ts
@@ -183,7 +183,7 @@ function _getLocalTrack(
  * @private
  * @returns {void}
  */
-async function _setMuted(store: IStore, { ensureTrack, muted }: {
+function _setMuted(store: IStore, { ensureTrack, muted }: {
     ensureTrack: boolean; muted: boolean; }, mediaType: MediaType) {
     const { dispatch, getState } = store;
     const localTrack = _getLocalTrack(store, mediaType, /* includePending */ true);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/middleware.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/middleware.web.ts
index ae565fd..5bb3283 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/middleware.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/middleware.web.ts
@@ -15,7 +15,6 @@ import {
     TRACK_ADDED,
     TRACK_MUTE_UNMUTE_FAILED,
     TRACK_NO_DATA_FROM_SOURCE,
-    TRACK_OWNER_CHANGED,
     TRACK_REMOVED,
     TRACK_STOPPED,
     TRACK_UPDATED
@@ -82,23 +81,6 @@ MiddlewareRegistry.register(store => next => action => {
         return result;
     }
 
-    case TRACK_OWNER_CHANGED: {
-        const oldTrack = getTrackByJitsiTrack(store.getState()['features/base/tracks'], action.track?.jitsiTrack);
-        const oldOwner = oldTrack?.participantId;
-        const result = next(action);
-        const newOwner = action.track?.participantId;
-
-        if (oldOwner) {
-            logTracksForParticipant(store.getState()['features/base/tracks'], oldOwner, 'Owner changed');
-        }
-
-        if (newOwner) {
-            logTracksForParticipant(store.getState()['features/base/tracks'], newOwner, 'Owner changed');
-        }
-
-        return result;
-    }
-
     case TRACK_MUTE_UNMUTE_FAILED: {
         const { jitsiTrack } = action.track;
         const muted = action.wasMuted;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/reducer.ts
index bb0c8b6..83e44c4 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/reducer.ts
@@ -10,7 +10,6 @@ import {
     TRACK_CREATE_CANCELED,
     TRACK_CREATE_ERROR,
     TRACK_NO_DATA_FROM_SOURCE,
-    TRACK_OWNER_CHANGED,
     TRACK_REMOVED,
     TRACK_UPDATED,
     TRACK_WILL_CREATE
@@ -43,18 +42,6 @@ function track(state: ITrack, action: AnyAction) {
         }
         break;
 
-    case TRACK_OWNER_CHANGED: {
-        const t = action.track;
-
-        if (state.jitsiTrack === t.jitsiTrack) {
-            return {
-                ...state,
-                participantId: t.participantId
-            };
-        }
-        break;
-    }
-
     case TRACK_UPDATED: {
         const t = action.track;
 
@@ -104,7 +91,6 @@ ReducerRegistry.register<ITracksState>('features/base/tracks', (state = [], acti
     switch (action.type) {
     case PARTICIPANT_ID_CHANGED:
     case TRACK_NO_DATA_FROM_SOURCE:
-    case TRACK_OWNER_CHANGED:
     case TRACK_UPDATED:
         return state.map((t: ITrack) => track(t, action));
     case TRACK_ADDED: {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/types.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/types.ts
index d21522c..8ab91d6 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/types.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/tracks/types.ts
@@ -44,6 +44,7 @@ export interface ITrackOptions {
  * any.
  */
 export interface ITrack {
+    codec: string;
     getOriginalStream: Function;
     isReceivingData: boolean;
     jitsiTrack: any;
@@ -72,3 +73,16 @@ export interface IShareOptions {
     desktopSharingSources?: string[];
     desktopStream?: any;
 }
+
+export interface ICreateInitialTracksOptions {
+    devices: Array<MediaType>;
+    firePermissionPromptIsShownEvent?: boolean;
+    timeout?: number;
+}
+
+export interface IInitialTracksErrors {
+    audioAndVideoError?: Error;
+    audioOnlyError: Error;
+    screenSharingError: Error;
+    videoOnlyError: Error;
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Button.tsx b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Button.tsx
index 1291b21..f9e056c 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Button.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Button.tsx
@@ -1,7 +1,8 @@
 import React from 'react';
 import { useTranslation } from 'react-i18next';
-import { TouchableHighlight } from 'react-native';
+import { StyleProp, TouchableHighlight } from 'react-native';
 import { Button as NativePaperButton, Text } from 'react-native-paper';
+import { IconSource } from 'react-native-paper/lib/typescript/components/Icon';
 
 import { BUTTON_MODES, BUTTON_TYPES } from '../../constants.native';
 import BaseTheme from '../BaseTheme.native';
@@ -13,6 +14,7 @@ import styles from './buttonStyles';
 export interface IProps extends IButtonProps {
     color?: string | undefined;
     contentStyle?: Object | undefined;
+    id?: string;
     labelStyle?: Object | undefined;
     mode?: any;
     style?: Object | undefined;
@@ -24,6 +26,7 @@ const Button: React.FC<IProps> = ({
     contentStyle,
     disabled,
     icon,
+    id,
     labelKey,
     labelStyle,
     mode = BUTTON_MODES.CONTAINED,
@@ -74,16 +77,17 @@ const Button: React.FC<IProps> = ({
             <TouchableHighlight
                 accessibilityLabel = { accessibilityLabel }
                 disabled = { disabled }
+                id = { id }
                 onPress = { onPress }
                 style = { [
                     buttonStyles,
                     style
-                ] }>
+                ] as StyleProp<object> }>
                 <Text
                     style = { [
                         buttonLabelStyles,
                         labelStyle
-                    ] }>{ t(labelKey ?? '') }</Text>
+                    ] as StyleProp<object> }>{ t(labelKey ?? '') }</Text>
             </TouchableHighlight>
         );
     }
@@ -96,21 +100,20 @@ const Button: React.FC<IProps> = ({
             contentStyle = { [
                 styles.buttonContent,
                 contentStyle
-            ] }
+            ] as StyleProp<object> }
             disabled = { disabled }
-
-            // @ts-ignore
-            icon = { icon }
+            icon = { icon as IconSource | undefined }
+            id = { id }
             labelStyle = { [
                 buttonLabelStyles,
                 labelStyle
-            ] }
+            ] as StyleProp<object> }
             mode = { mode }
             onPress = { onPress }
             style = { [
                 buttonStyles,
                 style
-            ] } />
+            ] as StyleProp<object> } />
     );
 };
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/IconButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/IconButton.tsx
index c374a26..2e61680 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/IconButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/IconButton.tsx
@@ -12,6 +12,7 @@ const IconButton: React.FC<IIconButtonProps> = ({
     accessibilityLabel,
     color: iconColor,
     disabled,
+    id,
     onPress,
     size,
     src,
@@ -52,6 +53,7 @@ const IconButton: React.FC<IIconButtonProps> = ({
         <TouchableHighlight
             accessibilityLabel = { accessibilityLabel }
             disabled = { disabled }
+            id = { id }
             onPress = { onPress }
             style = { [
                 iconButtonContainerStyles,
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Input.tsx b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Input.tsx
index 05b9f29..1eb4c01 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Input.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Input.tsx
@@ -1,13 +1,16 @@
 import React, { forwardRef, useCallback, useState } from 'react';
 import {
     KeyboardTypeOptions,
-    NativeSyntheticEvent, ReturnKeyTypeOptions,
+    NativeSyntheticEvent,
+    ReturnKeyTypeOptions,
     StyleProp,
     Text,
     TextInput,
     TextInputChangeEventData,
-    TextInputFocusEventData, TextInputKeyPressEventData,
+    TextInputFocusEventData,
+    TextInputKeyPressEventData,
     TextInputSubmitEditingEventData,
+    TextStyle,
     TouchableOpacity,
     View,
     ViewStyle
@@ -25,8 +28,16 @@ interface IProps extends IInputProps {
     autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters' | undefined;
     autoFocus?: boolean;
     blurOnSubmit?: boolean | undefined;
+    bottomLabel?: string;
     customStyles?: ICustomStyles;
     editable?: boolean | undefined;
+
+    /**
+     * The id to set on the input element.
+     * This is required because we need it internally to tie the input to its
+     * info (label, error) so that screen reader users don't get lost.
+     */
+    id?: string;
     keyboardType?: KeyboardTypeOptions;
     maxLength?: number | undefined;
     minHeight?: number | string | undefined;
@@ -52,11 +63,13 @@ const Input = forwardRef<TextInput, IProps>(({
     autoCapitalize,
     autoFocus,
     blurOnSubmit,
+    bottomLabel,
     clearable,
     customStyles,
     disabled,
     error,
     icon,
+    id,
     keyboardType,
     label,
     maxLength,
@@ -106,7 +119,7 @@ const Input = forwardRef<TextInput, IProps>(({
         onSubmitEditing?.(text);
     }, [ onSubmitEditing ]);
 
-    return (<View style = { [ styles.inputContainer, customStyles?.container ] }>
+    return (<View style = { [ styles.inputContainer, customStyles?.container ] as StyleProp<ViewStyle> }>
         {label && <Text style = { styles.label }>{ label }</Text>}
         <View style = { styles.fieldContainer as StyleProp<ViewStyle> }>
             {icon && <Icon
@@ -121,6 +134,7 @@ const Input = forwardRef<TextInput, IProps>(({
                 autoFocus = { autoFocus }
                 blurOnSubmit = { blurOnSubmit }
                 editable = { !disabled }
+                id = { id }
                 keyboardType = { keyboardType }
                 maxLength = { maxLength }
 
@@ -145,11 +159,11 @@ const Input = forwardRef<TextInput, IProps>(({
                     clearable && styles.clearableInput,
                     customStyles?.input,
                     disabled && styles.inputDisabled,
-                    error && styles.inputError,
-                    focused && styles.inputFocused,
                     icon && styles.iconInput,
-                    multiline && styles.inputMultiline
-                ] }
+                    multiline && styles.inputMultiline,
+                    focused && styles.inputFocused,
+                    error && styles.inputError
+                ] as StyleProp<TextStyle> }
                 textContentType = { textContentType }
                 value = { typeof value === 'number' ? `${value}` : value } />
             { clearable && !disabled && value !== '' && (
@@ -163,6 +177,20 @@ const Input = forwardRef<TextInput, IProps>(({
                 </TouchableOpacity>
             )}
         </View>
+        {
+            bottomLabel && (
+                <View>
+                    <Text
+                        id = { `${id}-description` }
+                        style = { [
+                            styles.bottomLabel,
+                            error && styles.bottomLabelError
+                        ] }>
+                        { bottomLabel }
+                    </Text>
+                </View>
+            )
+        }
     </View>);
 });
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Switch.tsx b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Switch.tsx
index ca217eb..f471736 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Switch.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/Switch.tsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import { ColorValue } from 'react-native';
+import { ColorValue, StyleProp } from 'react-native';
 import { Switch as NativeSwitch } from 'react-native-paper';
 
 import { ISwitchProps } from '../types';
@@ -12,6 +12,12 @@ import {
 
 interface IProps extends ISwitchProps {
 
+    /**
+     * Id for the switch.
+     */
+
+    id?: string;
+
     /**
      * Custom styles for the switch.
      */
@@ -31,6 +37,7 @@ interface IProps extends ISwitchProps {
 const Switch = ({
     checked,
     disabled,
+    id,
     onChange,
     thumbColor = THUMB_COLOR,
     trackColor = {
@@ -41,9 +48,10 @@ const Switch = ({
 }: IProps) => (
     <NativeSwitch
         disabled = { disabled }
+        id = { id }
         ios_backgroundColor = { DISABLED_TRACK_COLOR }
         onValueChange = { onChange }
-        style = { style }
+        style = { style as StyleProp<object> }
         thumbColor = { thumbColor }
         trackColor = { trackColor }
         value = { checked } />
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/inputStyles.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/inputStyles.ts
index 018f9e3..658e10e 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/inputStyles.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/native/inputStyles.ts
@@ -73,5 +73,15 @@ export default {
 
     clearIcon: {
         color: BaseTheme.palette.icon01
+    },
+
+    bottomLabel: {
+        ...BaseTheme.typography.labelRegular,
+        color: BaseTheme.palette.text02,
+        marginTop: BaseTheme.spacing[2]
+    },
+
+    bottomLabelError: {
+        color: BaseTheme.palette.textError
     }
 };
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/web/Dialog.tsx b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/web/Dialog.tsx
index 59c96d5..e529743 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/web/Dialog.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/components/web/Dialog.tsx
@@ -111,12 +111,9 @@ const Dialog = ({
     }, [ onCancel ]);
 
     const submit = useCallback(() => {
-        if (onSubmit && (
-            (document.activeElement && !operatesWithEnterKey(document.activeElement))
-            || !document.activeElement
-        )) {
+        if ((document.activeElement && !operatesWithEnterKey(document.activeElement)) || !document.activeElement) {
             !disableAutoHideOnSubmit && dispatch(hideDialog());
-            onSubmit();
+            onSubmit?.();
         }
     }, [ onSubmit ]);
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/hooks/useContextMenu.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/hooks/useContextMenu.web.ts
index 16840fe..d9b7bfe 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/ui/hooks/useContextMenu.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/ui/hooks/useContextMenu.web.ts
@@ -39,7 +39,7 @@ const useContextMenu = <T>(): [(force?: boolean | Object) => void,
                 return;
             }
 
-            if (raiseContext !== initialState) {
+            if (raiseContext !== initialState || force) {
                 setRaiseContext(initialState);
             }
         });
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/util/copyText.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/util/copyText.native.ts
index bc4ec75..db9ae71 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/util/copyText.native.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/util/copyText.native.ts
@@ -1,4 +1,4 @@
-import Clipboard from '@react-native-community/clipboard';
+import Clipboard from '@react-native-clipboard/clipboard';
 
 /**
  * Tries to copy a given text to the clipboard.
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/base/util/uri.ts b/node_modules/@jitsi/react-native-sdk/react/features/base/util/uri.ts
index 02a86a0..34f86b1 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/base/util/uri.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/base/util/uri.ts
@@ -537,6 +537,7 @@ export function urlObjectToString(o: { [key: string]: any; }): string | undefine
 
     const search = new URLSearchParams(url.search);
 
+    // TODO: once all available versions are updated to support the jwt in the hash, remove this
     if (jwt) {
         search.set('jwt', jwt);
     }
@@ -561,6 +562,14 @@ export function urlObjectToString(o: { [key: string]: any; }): string | undefine
 
     let { hash } = url;
 
+    if (jwt) {
+        if (hash.length) {
+            hash = `${hash}&jwt=${JSON.stringify(jwt)}`;
+        } else {
+            hash = `#jwt=${JSON.stringify(jwt)}`;
+        }
+    }
+
     for (const urlPrefix of [ 'config', 'iceServers', 'interfaceConfig', 'devices', 'userInfo', 'appData' ]) {
         const urlParamsArray
             = _objectToURLParamsArray(
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/components/native/BreakoutRoomNamePrompt.tsx b/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/components/native/BreakoutRoomNamePrompt.tsx
index f5bb9e9..1da3ff6 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/components/native/BreakoutRoomNamePrompt.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/components/native/BreakoutRoomNamePrompt.tsx
@@ -18,7 +18,7 @@ export default function BreakoutRoomNamePrompt({ breakoutRoomJid, initialRoomNam
         const formattedRoomName = roomName?.trim();
 
         if (formattedRoomName) {
-            dispatch(renameBreakoutRoom(formattedRoomName, roomName));
+            dispatch(renameBreakoutRoom(breakoutRoomJid, formattedRoomName));
 
             return true;
         }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/components/native/BreakoutRooms.tsx b/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/components/native/BreakoutRooms.tsx
index 6081a1e..8c7265a 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/components/native/BreakoutRooms.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/components/native/BreakoutRooms.tsx
@@ -1,4 +1,4 @@
-import React, { useCallback } from 'react';
+import React, { useCallback, useMemo } from 'react';
 import { FlatList } from 'react-native';
 import { useSelector } from 'react-redux';
 
@@ -33,6 +33,19 @@ const BreakoutRooms = () => {
         .sort((p1, p2) => (p1?.name || '').localeCompare(p2?.name || ''));
     const showAddBreakoutRoom = useSelector(isAddBreakoutRoomButtonVisible);
     const showAutoAssign = useSelector(isAutoAssignParticipantsVisible);
+    const renderListHeaderComponent = useMemo(() => (
+        <>
+            { showAutoAssign && <AutoAssignButton /> }
+            { inBreakoutRoom && <LeaveBreakoutRoomButton /> }
+            {
+                isBreakoutRoomsSupported
+                && rooms.map(room => (<CollapsibleRoom
+                    key = { room.id }
+                    room = { room }
+                    roomId = { room.id } />))
+            }
+        </>
+    ), [ showAutoAssign, inBreakoutRoom, isBreakoutRoomsSupported, rooms ]);
 
     return (
         <JitsiScreen
@@ -42,21 +55,7 @@ const BreakoutRooms = () => {
 
             { /* Fixes warning regarding nested lists */ }
             <FlatList
-
-                /* eslint-disable react/jsx-no-bind */
-                ListHeaderComponent = { () => (
-                    <>
-                        { showAutoAssign && <AutoAssignButton /> }
-                        { inBreakoutRoom && <LeaveBreakoutRoomButton /> }
-                        {
-                            isBreakoutRoomsSupported
-                            && rooms.map(room => (<CollapsibleRoom
-                                key = { room.id }
-                                room = { room }
-                                roomId = { room.id } />))
-                        }
-                    </>
-                ) }
+                ListHeaderComponent = { renderListHeaderComponent }
                 data = { [] as ReadonlyArray<undefined> }
                 keyExtractor = { keyExtractor }
                 renderItem = { null }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/middleware.ts
index 8645c67..2e27666 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/breakout-rooms/middleware.ts
@@ -83,12 +83,12 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
         const { messages } = getState()['features/chat'];
 
         messages?.forEach(m => {
-            if (m.messageType === MESSAGE_TYPE_REMOTE && !getParticipantById(getState(), m.id)) {
+            if (m.messageType === MESSAGE_TYPE_REMOTE && !getParticipantById(getState(), m.participantId)) {
                 const rooms: IRooms = action.rooms;
 
                 for (const room of Object.values(rooms)) {
                     const participants = room.participants || {};
-                    const matchedJid = Object.keys(participants).find(jid => jid.endsWith(m.id));
+                    const matchedJid = Object.keys(participants).find(jid => jid.endsWith(m.participantId));
 
                     if (matchedJid) {
                         m.displayName = participants[matchedJid].displayName;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/AbstractMessageContainer.ts b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/AbstractMessageContainer.ts
index d5a40b3..19cf8bf 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/AbstractMessageContainer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/AbstractMessageContainer.ts
@@ -36,13 +36,13 @@ export default class AbstractMessageContainer<P extends IProps, S> extends Compo
         for (let i = 0; i < messagesCount; i++) {
             const message = this.props.messages[i];
 
-            if (message.id === currentGroupParticipantId) {
+            if (message.participantId === currentGroupParticipantId) {
                 currentGrouping.push(message);
             } else {
                 currentGrouping.length && groups.push(currentGrouping);
 
                 currentGrouping = [ message ];
-                currentGroupParticipantId = message.id;
+                currentGroupParticipantId = message.participantId;
             }
         }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/ChatInputBar.tsx b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/ChatInputBar.tsx
index b0fcf1f..df726fc 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/ChatInputBar.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/ChatInputBar.tsx
@@ -84,6 +84,7 @@ class ChatInputBar extends Component<IProps, IState> {
 
         return (
             <View
+                id = 'chat-input'
                 style = { [
                     inputBarStyles,
                     this.state.addPadding ? styles.extraBarPadding : null
@@ -91,6 +92,7 @@ class ChatInputBar extends Component<IProps, IState> {
                 <Input
                     blurOnSubmit = { false }
                     customStyles = {{ container: styles.customInputContainer }}
+                    id = 'chat-input-messagebox'
                     multiline = { false }
                     onBlur = { this._onFocused(false) }
                     onChange = { this._onChangeText }
@@ -101,6 +103,7 @@ class ChatInputBar extends Component<IProps, IState> {
                     value = { this.state.message } />
                 <IconButton
                     disabled = { !this.state.message }
+                    id = { this.props.t('chat.sendButton') }
                     onPress = { this._onSubmit }
                     src = { IconSend }
                     type = { BUTTON_TYPES.PRIMARY } />
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/ChatMessage.tsx b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/ChatMessage.tsx
index 952b294..f1592ee 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/ChatMessage.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/ChatMessage.tsx
@@ -7,7 +7,7 @@ import Avatar from '../../../base/avatar/components/Avatar';
 import { translate } from '../../../base/i18n/functions';
 import Linkify from '../../../base/react/components/native/Linkify';
 import { isGifMessage } from '../../../gifs/functions.native';
-import { MESSAGE_TYPE_ERROR, MESSAGE_TYPE_LOCAL } from '../../constants';
+import { CHAR_LIMIT, MESSAGE_TYPE_ERROR, MESSAGE_TYPE_LOCAL } from '../../constants';
 import {
     getCanReplyToMessage,
     getFormattedTimestamp,
@@ -73,10 +73,12 @@ class ChatMessage extends Component<IChatMessageProps> {
             messageBubbleStyle.push(styles.lobbyMessageBubble);
         }
 
-        const messageText = replaceNonUnicodeEmojis(getMessageText(this.props.message));
+        const messageText = getMessageText(this.props.message);
 
         return (
-            <View style = { styles.messageWrapper as ViewStyle } >
+            <View
+                id = { message.messageId }
+                style = { styles.messageWrapper as ViewStyle } >
                 { this._renderAvatar() }
                 <View style = { detailsWrapperStyle }>
                     <View style = { messageBubbleStyle }>
@@ -84,13 +86,7 @@ class ChatMessage extends Component<IChatMessageProps> {
                             { this._renderDisplayName() }
                             { isGifMessage(messageText)
                                 ? <GifMessage message = { messageText } />
-                                : (
-                                    <Linkify
-                                        linkStyle = { styles.chatLink }
-                                        style = { styles.chatMessage }>
-                                        { messageText }
-                                    </Linkify>
-                                )}
+                                : this._renderMessageTextComponent(messageText) }
                             { this._renderPrivateNotice() }
                         </View>
                         { this._renderPrivateReplyButton() }
@@ -104,7 +100,7 @@ class ChatMessage extends Component<IChatMessageProps> {
     /**
      * Renders the avatar of the sender.
      *
-     * @returns {React$Element<*>}
+     * @returns {React.ReactElement<*>}
      */
     _renderAvatar() {
         const { message } = this.props;
@@ -113,7 +109,7 @@ class ChatMessage extends Component<IChatMessageProps> {
             <View style = { styles.avatarWrapper }>
                 { this.props.showAvatar && <Avatar
                     displayName = { message.displayName }
-                    participantId = { message.id }
+                    participantId = { message.participantId }
                     size = { styles.avatarWrapper.width } />
                 }
             </View>
@@ -123,7 +119,7 @@ class ChatMessage extends Component<IChatMessageProps> {
     /**
      * Renders the display name of the sender if necessary.
      *
-     * @returns {React$Element<*> | null}
+     * @returns {React.ReactElement<*> | null}
      */
     _renderDisplayName() {
         const { message, showDisplayName } = this.props;
@@ -139,10 +135,37 @@ class ChatMessage extends Component<IChatMessageProps> {
         );
     }
 
+    /**
+     * Renders the message text based on number of characters.
+     *
+     * @param {string} messageText - The message text.
+     * @returns {React.ReactElement<*>}
+     */
+    _renderMessageTextComponent(messageText: string) {
+
+        if (messageText.length >= CHAR_LIMIT) {
+            return (
+                <Text
+                    selectable = { true }
+                    style = { styles.chatMessage }>
+                    { messageText }
+                </Text>
+            );
+        }
+
+        return (
+            <Linkify
+                linkStyle = { styles.chatLink }
+                style = { styles.chatMessage }>
+                { replaceNonUnicodeEmojis(messageText) }
+            </Linkify>
+        );
+    }
+
     /**
      * Renders the message privacy notice, if necessary.
      *
-     * @returns {React$Element<*> | null}
+     * @returns {React.ReactElement<*> | null}
      */
     _renderPrivateNotice() {
         const { message, knocking } = this.props;
@@ -161,7 +184,7 @@ class ChatMessage extends Component<IChatMessageProps> {
     /**
      * Renders the private reply button, if necessary.
      *
-     * @returns {React$Element<*> | null}
+     * @returns {React.ReactElement<*> | null}
      */
     _renderPrivateReplyButton() {
         const { message, canReply } = this.props;
@@ -175,7 +198,7 @@ class ChatMessage extends Component<IChatMessageProps> {
             <View style = { styles.replyContainer as ViewStyle }>
                 <PrivateMessageButton
                     isLobbyMessage = { lobbyChat }
-                    participantID = { message.id }
+                    participantID = { message.participantId }
                     reply = { true }
                     showLabel = { false }
                     toggledStyles = { styles.replyStyles } />
@@ -186,7 +209,7 @@ class ChatMessage extends Component<IChatMessageProps> {
     /**
      * Renders the time at which the message was sent, if necessary.
      *
-     * @returns {React$Element<*> | null}
+     * @returns {React.ReactElement<*> | null}
      */
     _renderTimestamp() {
         if (!this.props.showTimestamp) {
@@ -205,6 +228,7 @@ class ChatMessage extends Component<IChatMessageProps> {
  * Maps part of the redux state to the props of this component.
  *
  * @param {Object} state - The Redux state.
+ * @param {IChatMessageProps} message - Message object.
  * @returns {IProps}
  */
 function _mapStateToProps(state: IReduxState, { message }: IChatMessageProps) {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/GifMessage.tsx b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/GifMessage.tsx
index fc14948..7d77ee3 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/GifMessage.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/GifMessage.tsx
@@ -17,6 +17,7 @@ const GifMessage = ({ message }: IProps) => {
     const url = message.substring(GIF_PREFIX.length, message.length - 1);
 
     return (<View
+        id = 'gif-message'
         style = { styles.gifContainer }>
         <Image
             source = {{ uri: url }}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/MessageContainer.tsx b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/MessageContainer.tsx
index a63150e..cf4abd9 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/MessageContainer.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/MessageContainer.tsx
@@ -78,7 +78,9 @@ class MessageContainer extends AbstractMessageContainer<IProps, any> {
         const { t } = this.props;
 
         return (
-            <View style = { styles.emptyComponentWrapper as ViewStyle }>
+            <View
+                id = 'no-messages-message'
+                style = { styles.emptyComponentWrapper as ViewStyle }>
                 <Text style = { styles.emptyComponentText as TextStyle }>
                     { t('chat.noMessagesMessage') }
                 </Text>
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/MessageRecipient.tsx b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/MessageRecipient.tsx
index 6345768..fc48025 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/MessageRecipient.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/native/MessageRecipient.tsx
@@ -102,7 +102,9 @@ class MessageRecipient extends AbstractMessageRecipient<IProps> {
 
         if (isLobbyChatActive) {
             return (
-                <View style = { styles.lobbyMessageRecipientContainer as ViewStyle }>
+                <View
+                    id = 'chat-recipient'
+                    style = { styles.lobbyMessageRecipientContainer as ViewStyle }>
                     <Text style = { styles.messageRecipientText }>
                         { t('chat.lobbyChatMessageTo', {
                             recipient: lobbyMessageRecipient?.name
@@ -123,13 +125,16 @@ class MessageRecipient extends AbstractMessageRecipient<IProps> {
         }
 
         return (
-            <View style = { styles.messageRecipientContainer as ViewStyle }>
+            <View
+                id = 'message-recipient'
+                style = { styles.messageRecipientContainer as ViewStyle }>
                 <Text style = { styles.messageRecipientText }>
                     { t('chat.messageTo', {
                         recipient: privateMessageRecipient.name
                     }) }
                 </Text>
                 <TouchableHighlight
+                    id = 'message-recipient-cancel-button'
                     onPress = { this._onResetPrivateMessageRecipient }
                     underlayColor = { 'transparent' }>
                     <Icon
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/ChatMessage.tsx b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/ChatMessage.tsx
index 926902e..5a36b8e 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/ChatMessage.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/ChatMessage.tsx
@@ -197,7 +197,7 @@ const ChatMessage = ({
                                 className = { classes.replyButtonContainer }>
                                 <PrivateMessageButton
                                     isLobbyMessage = { message.lobbyChat }
-                                    participantID = { message.id } />
+                                    participantID = { message.participantId } />
                             </div>
                         )}
                 </div>
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/ChatMessageGroup.tsx b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/ChatMessageGroup.tsx
index b156712..8d86bc5 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/ChatMessageGroup.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/ChatMessageGroup.tsx
@@ -66,7 +66,7 @@ const ChatMessageGroup = ({ className = '', messages }: IProps) => {
         <div className = { clsx(classes.groupContainer, className) }>
             <Avatar
                 className = { clsx(classes.avatar, 'avatar') }
-                participantId = { messages[0].id }
+                participantId = { messages[0].participantId }
                 size = { 32 } />
             <div className = { `${classes.messageGroup} chat-message-group ${className}` }>
                 {messages.map((message, i) => (
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/MessageContainer.tsx b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/MessageContainer.tsx
index bbcd131..658332d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/MessageContainer.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/components/web/MessageContainer.tsx
@@ -2,7 +2,7 @@ import throttle from 'lodash/throttle';
 import React, { RefObject } from 'react';
 import { scrollIntoView } from 'seamless-scroll-polyfill';
 
-import { MESSAGE_TYPE_REMOTE } from '../../constants';
+import { MESSAGE_TYPE_LOCAL, MESSAGE_TYPE_REMOTE } from '../../constants';
 import AbstractMessageContainer, { IProps } from '../AbstractMessageContainer';
 
 import ChatMessageGroup from './ChatMessageGroup';
@@ -134,17 +134,19 @@ export default class MessageContainer extends AbstractMessageContainer<IProps, I
 
     /**
      * Implements {@code Component#componentDidUpdate}.
-     * If the user receive a new message scroll automatically to the bottom if scroll position was at the bottom.
+     * If the user receive a new message or the local user send a new message,
+     * scroll automatically to the bottom if scroll position was at the bottom.
      * Otherwise update hasNewMessages from component state.
      *
      * @inheritdoc
      * @returns {void}
      */
     componentDidUpdate(prevProps: IProps) {
-        const hasNewMessages = this.props.messages.length !== prevProps.messages.length;
+        const newMessages = this.props.messages.filter(message => !prevProps.messages.includes(message));
+        const hasLocalMessage = newMessages.map(message => message.messageType).includes(MESSAGE_TYPE_LOCAL);
 
-        if (hasNewMessages) {
-            if (this.state.isScrolledToBottom) {
+        if (newMessages.length > 0) {
+            if (this.state.isScrolledToBottom || hasLocalMessage) {
                 this.scrollToElement(false, null);
             } else {
                 // eslint-disable-next-line react/no-did-update-set-state
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/constants.ts b/node_modules/@jitsi/react-native-sdk/react/features/chat/constants.ts
index 53b7776..d99cb40 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/constants.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/constants.ts
@@ -1,3 +1,8 @@
+/**
+ * Maximum number of characters allowed.
+ */
+export const CHAR_LIMIT = 500;
+
 /**
  * The size of the chat. Equal to $sidebarWidth SCSS variable.
  */
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/chat/functions.ts
index a4f045c..e580a18 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/functions.ts
@@ -172,7 +172,7 @@ export function getMessageText(message: IMessage) {
  */
 export function getCanReplyToMessage(state: IReduxState, message: IMessage) {
     const { knocking } = state['features/lobby'];
-    const participant = getParticipantById(state, message.id);
+    const participant = getParticipantById(state, message.participantId);
 
     return Boolean(participant)
         && (message.privateMessage || (message.lobbyChat && !knocking))
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/chat/middleware.ts
index c1ed2ac..0c50614 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/middleware.ts
@@ -116,7 +116,7 @@ MiddlewareRegistry.register(store => next => action => {
         const state = store.getState();
 
         if (!isReactionsEnabled(state)) {
-            return;
+            return next(action);
         }
 
         const { participant, data } = action;
@@ -125,7 +125,7 @@ MiddlewareRegistry.register(store => next => action => {
             store.dispatch(pushReactions(data.reactions));
 
             _handleReceivedMessage(store, {
-                id: participant.getId(),
+                participantId: participant.getId(),
                 message: getReactionMessageFromBuffer(data.reactions),
                 privateMessage: false,
                 lobbyChat: false,
@@ -137,12 +137,12 @@ MiddlewareRegistry.register(store => next => action => {
     }
 
     case NON_PARTICIPANT_MESSAGE_RECEIVED: {
-        const { id, json: data } = action;
+        const { participantId, json: data } = action;
 
         if (data?.type === MESSAGE_TYPE_SYSTEM && data.message) {
             _handleReceivedMessage(store, {
                 displayName: data.displayName ?? i18next.t('chat.systemDisplayName'),
-                id,
+                participantId,
                 lobbyChat: false,
                 message: data.message,
                 privateMessage: true,
@@ -213,7 +213,7 @@ MiddlewareRegistry.register(store => next => action => {
     case ADD_REACTION_MESSAGE: {
         if (localParticipant?.id) {
             _handleReceivedMessage(store, {
-                id: localParticipant.id,
+                participantId: localParticipant.id,
                 message: action.message,
                 privateMessage: false,
                 timestamp: Date.now(),
@@ -274,25 +274,30 @@ function _addChatMsgListener(conference: IJitsiConference, store: IStore) {
 
     conference.on(
         JitsiConferenceEvents.MESSAGE_RECEIVED,
-        // eslint-disable-next-line max-params
-        (id: string, message: string, timestamp: number, displayName: string, isGuest?: boolean) => {
+        /* eslint-disable max-params */
+        (participantId: string, message: string, timestamp: number,
+                displayName: string, isGuest: boolean, messageId: string) => {
+        /* eslint-enable max-params */
             _onConferenceMessageReceived(store, {
-                id: id || displayName, // in case of messages coming from visitors we can have unknown id
+                // in case of messages coming from visitors we can have unknown id
+                participantId: participantId || displayName,
                 message,
                 timestamp,
                 displayName,
                 isGuest,
+                messageId,
                 privateMessage: false });
         }
     );
 
     conference.on(
         JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,
-        (id: string, message: string, timestamp: number) => {
+        (participantId: string, message: string, timestamp: number, messageId: string) => {
             _onConferenceMessageReceived(store, {
-                id,
+                participantId,
                 message,
                 timestamp,
+                messageId,
                 privateMessage: true
             });
         }
@@ -311,25 +316,29 @@ function _addChatMsgListener(conference: IJitsiConference, store: IStore) {
  * @param {Object} message - The message object.
  * @returns {void}
  */
-function _onConferenceMessageReceived(store: IStore, { displayName, id, isGuest, message, timestamp, privateMessage }: {
-    displayName?: string; id: string; isGuest?: boolean;
-    message: string; privateMessage: boolean; timestamp: number; }) {
+function _onConferenceMessageReceived(store: IStore,
+        { displayName, isGuest, message, messageId, participantId, privateMessage, timestamp }: {
+        displayName?: string; isGuest?: boolean; message: string; messageId?: string;
+        participantId: string; privateMessage: boolean; timestamp: number; }
+) {
+
     const isGif = isGifMessage(message);
 
     if (isGif) {
-        _handleGifMessageReceived(store, id, message);
+        _handleGifMessageReceived(store, participantId, message);
         if (getGifDisplayMode(store.getState()) === 'tile') {
             return;
         }
     }
     _handleReceivedMessage(store, {
         displayName,
-        id,
         isGuest,
+        participantId,
         message,
         privateMessage,
         lobbyChat: false,
-        timestamp
+        timestamp,
+        messageId
     }, true, isGif);
 }
 
@@ -337,14 +346,14 @@ function _onConferenceMessageReceived(store: IStore, { displayName, id, isGuest,
  * Handles a received gif message.
  *
  * @param {Object} store - Redux store.
- * @param {string} id - Id of the participant that sent the message.
+ * @param {string} participantId - Id of the participant that sent the message.
  * @param {string} message - The message sent.
  * @returns {void}
  */
-function _handleGifMessageReceived(store: IStore, id: string, message: string) {
+function _handleGifMessageReceived(store: IStore, participantId: string, message: string) {
     const url = message.substring(GIF_PREFIX.length, message.length - 1);
 
-    store.dispatch(addGif(id, url));
+    store.dispatch(addGif(participantId, url));
 }
 
 /**
@@ -374,7 +383,7 @@ function _handleChatError({ dispatch }: IStore, error: Error) {
 export function handleLobbyMessageReceived(message: string, participantId: string) {
     return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         _handleReceivedMessage({ dispatch,
-            getState }, { id: participantId,
+            getState }, { participantId,
             message,
             privateMessage: false,
             lobbyChat: true,
@@ -387,18 +396,18 @@ export function handleLobbyMessageReceived(message: string, participantId: strin
  * Function to get lobby chat user display name.
  *
  * @param {Store} state - The Redux store.
- * @param {string} id - The knocking participant id.
+ * @param {string} participantId - The knocking participant id.
  * @returns {string}
  */
-function getLobbyChatDisplayName(state: IReduxState, id: string) {
+function getLobbyChatDisplayName(state: IReduxState, participantId: string) {
     const { knockingParticipants } = state['features/lobby'];
     const { lobbyMessageRecipient } = state['features/chat'];
 
-    if (id === lobbyMessageRecipient?.id) {
+    if (participantId === lobbyMessageRecipient?.id) {
         return lobbyMessageRecipient.name;
     }
 
-    const knockingParticipant = knockingParticipants.find(p => p.id === id);
+    const knockingParticipant = knockingParticipants.find(p => p.id === participantId);
 
     if (knockingParticipant) {
         return knockingParticipant.name;
@@ -417,9 +426,9 @@ function getLobbyChatDisplayName(state: IReduxState, id: string) {
  * @returns {void}
  */
 function _handleReceivedMessage({ dispatch, getState }: IStore,
-        { displayName, id, isGuest, message, privateMessage, timestamp, lobbyChat }: {
-        displayName?: string; id: string; isGuest?: boolean; lobbyChat: boolean;
-        message: string; privateMessage: boolean; timestamp: number; },
+        { displayName, isGuest, lobbyChat, message, messageId, participantId, privateMessage, timestamp }: {
+        displayName?: string; isGuest?: boolean; lobbyChat: boolean; message: string;
+        messageId?: string; participantId: string; privateMessage: boolean; timestamp: number; },
         shouldPlaySound = true,
         isReaction = false
 ) {
@@ -434,12 +443,12 @@ function _handleReceivedMessage({ dispatch, getState }: IStore,
 
     // Provide a default for the case when a message is being
     // backfilled for a participant that has left the conference.
-    const participant = getParticipantById(state, id) || { local: undefined };
+    const participant = getParticipantById(state, participantId) || { local: undefined };
 
     const localParticipant = getLocalParticipant(getState);
     let displayNameToShow = lobbyChat
-        ? getLobbyChatDisplayName(state, id)
-        : displayName || getParticipantDisplayName(state, id);
+        ? getLobbyChatDisplayName(state, participantId)
+        : displayName || getParticipantDisplayName(state, participantId);
     const hasRead = participant.local || isChatOpen;
     const timestampToDate = timestamp ? new Date(timestamp) : new Date();
     const millisecondsTimestamp = timestampToDate.getTime();
@@ -455,13 +464,14 @@ function _handleReceivedMessage({ dispatch, getState }: IStore,
     dispatch(addMessage({
         displayName: displayNameToShow,
         hasRead,
-        id,
+        participantId,
         messageType: participant.local ? MESSAGE_TYPE_LOCAL : MESSAGE_TYPE_REMOTE,
         message,
         privateMessage,
         lobbyChat,
         recipient: getParticipantDisplayName(state, localParticipant?.id ?? ''),
         timestamp: millisecondsTimestamp,
+        messageId,
         isReaction
     }));
 
@@ -477,7 +487,7 @@ function _handleReceivedMessage({ dispatch, getState }: IStore,
 
         APP.API.notifyReceivedChatMessage({
             body: message,
-            id,
+            from: participantId,
             nick: displayNameToShow,
             privateMessage,
             ts: timestamp
@@ -512,7 +522,7 @@ function _persistSentPrivateMessage({ dispatch, getState }: IStore, recipientID:
     dispatch(addMessage({
         displayName,
         hasRead: true,
-        id: localParticipant.id,
+        participantId: localParticipant.id,
         messageType: MESSAGE_TYPE_LOCAL,
         message,
         privateMessage: !isLobbyPrivateMessage,
@@ -562,7 +572,7 @@ function _shouldSendPrivateMessageTo(state: IReduxState, action: AnyAction) {
 
     if (lastMessage.privateMessage) {
         // We show the notice if the last received message was private.
-        return lastMessage.id;
+        return lastMessage.participantId;
     }
 
     // But messages may come rapidly, we want to protect our users from mis-sending a message
@@ -577,7 +587,7 @@ function _shouldSendPrivateMessageTo(state: IReduxState, action: AnyAction) {
         ? recentPrivateMessages[0] : recentPrivateMessages[recentPrivateMessages.length - 1];
 
     if (recentPrivateMessage) {
-        return recentPrivateMessage.id;
+        return recentPrivateMessage.participantId;
     }
 
     return undefined;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/chat/reducer.ts
index d5c6333..e050f23 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/reducer.ts
@@ -1,5 +1,3 @@
-import { v4 as uuidv4 } from 'uuid';
-
 import { ILocalParticipant, IParticipant } from '../base/participants/types';
 import ReducerRegistry from '../base/redux/ReducerRegistry';
 
@@ -48,9 +46,9 @@ ReducerRegistry.register<IChatState>('features/chat', (state = DEFAULT_STATE, ac
         const newMessage: IMessage = {
             displayName: action.displayName,
             error: action.error,
-            id: action.id,
+            participantId: action.participantId,
             isReaction: action.isReaction,
-            messageId: uuidv4(),
+            messageId: action.messageId,
             messageType: action.messageType,
             message: action.message,
             privateMessage: action.privateMessage,
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/chat/types.ts b/node_modules/@jitsi/react-native-sdk/react/features/chat/types.ts
index a58b289..a50fb31 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/chat/types.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/chat/types.ts
@@ -5,12 +5,12 @@ import { IStore } from '../app/types';
 export interface IMessage {
     displayName: string;
     error?: Object;
-    id: string;
     isReaction: boolean;
     lobbyChat: boolean;
     message: string;
     messageId: string;
     messageType: string;
+    participantId: string;
     privateMessage: boolean;
     recipient: string;
     timestamp: number;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/AlwaysOnLabels.tsx b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/AlwaysOnLabels.tsx
index cf9832b..9f5572a 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/AlwaysOnLabels.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/AlwaysOnLabels.tsx
@@ -2,69 +2,56 @@ import React, { useCallback } from 'react';
 import { TouchableOpacity } from 'react-native';
 import { useDispatch, useSelector } from 'react-redux';
 
-import { IReduxState } from '../../../app/types';
 import { JitsiRecordingConstants } from '../../../base/lib-jitsi-meet';
 import { openHighlightDialog } from '../../../recording/actions.native';
 import HighlightButton from '../../../recording/components/Recording/native/HighlightButton';
 import RecordingLabel from '../../../recording/components/native/RecordingLabel';
-import { getActiveSession } from '../../../recording/functions';
+import { isLiveStreamingRunning } from '../../../recording/functions';
 import VisitorsCountLabel from '../../../visitors/components/native/VisitorsCountLabel';
 
 import RaisedHandsCountLabel from './RaisedHandsCountLabel';
 import {
-    LABEL_ID_RAISED_HANDS_COUNT,
-    LABEL_ID_RECORDING,
-    LABEL_ID_STREAMING,
-    LABEL_ID_VISITORS_COUNT,
-    LabelHitSlop
+	LABEL_ID_RAISED_HANDS_COUNT,
+	LABEL_ID_RECORDING,
+	LABEL_ID_STREAMING,
+	LABEL_ID_VISITORS_COUNT,
+	LabelHitSlop
 } from './constants';
 
 interface IProps {
-
-    /**
-     * Creates a function to be invoked when the onPress of the touchables are
-     * triggered.
-     */
-    createOnPress: Function;
+	/**
+	 * Creates a function to be invoked when the onPress of the touchables are
+	 * triggered.
+	 */
+	createOnPress: Function;
 }
 
 const AlwaysOnLabels = ({ createOnPress }: IProps) => {
-    const dispatch = useDispatch();
-    const isStreaming = useSelector((state: IReduxState) =>
-        Boolean(getActiveSession(state, JitsiRecordingConstants.mode.STREAM)));
-    const openHighlightDialogCallback = useCallback(() =>
-        dispatch(openHighlightDialog()), [ dispatch ]);
+	const dispatch = useDispatch();
+	const isStreaming = useSelector(isLiveStreamingRunning);
+	const openHighlightDialogCallback = useCallback(() => dispatch(openHighlightDialog()), [dispatch]);
 
-    return (<>
-        <TouchableOpacity
-            hitSlop = { LabelHitSlop }
-            onPress = { createOnPress(LABEL_ID_RECORDING) } >
-            <RecordingLabel mode = { JitsiRecordingConstants.mode.FILE } />
-        </TouchableOpacity>
-        {
-            isStreaming
-            && <TouchableOpacity
-                hitSlop = { LabelHitSlop }
-                onPress = { createOnPress(LABEL_ID_STREAMING) } >
-                <RecordingLabel mode = { JitsiRecordingConstants.mode.STREAM } />
-            </TouchableOpacity>
-        }
-        <TouchableOpacity
-            hitSlop = { LabelHitSlop }
-            onPress = { openHighlightDialogCallback }>
-            <HighlightButton />
-        </TouchableOpacity>
-        <TouchableOpacity
-            hitSlop = { LabelHitSlop }
-            onPress = { createOnPress(LABEL_ID_RAISED_HANDS_COUNT) } >
-            <RaisedHandsCountLabel />
-        </TouchableOpacity>
-        <TouchableOpacity
-            hitSlop = { LabelHitSlop }
-            onPress = { createOnPress(LABEL_ID_VISITORS_COUNT) } >
-            <VisitorsCountLabel />
-        </TouchableOpacity>
-    </>);
+	return (
+		<>
+			<TouchableOpacity hitSlop={LabelHitSlop} onPress={createOnPress(LABEL_ID_RECORDING)}>
+				<RecordingLabel mode={JitsiRecordingConstants.mode.FILE} />
+			</TouchableOpacity>
+			{isStreaming && (
+				<TouchableOpacity hitSlop={LabelHitSlop} onPress={createOnPress(LABEL_ID_STREAMING)}>
+					<RecordingLabel mode={JitsiRecordingConstants.mode.STREAM} />
+				</TouchableOpacity>
+			)}
+			<TouchableOpacity hitSlop={LabelHitSlop} onPress={openHighlightDialogCallback}>
+				<HighlightButton />
+			</TouchableOpacity>
+			<TouchableOpacity hitSlop={LabelHitSlop} onPress={createOnPress(LABEL_ID_RAISED_HANDS_COUNT)}>
+				<RaisedHandsCountLabel />
+			</TouchableOpacity>
+			<TouchableOpacity hitSlop={LabelHitSlop} onPress={createOnPress(LABEL_ID_VISITORS_COUNT)}>
+				<VisitorsCountLabel />
+			</TouchableOpacity>
+		</>
+	);
 };
 
 export default AlwaysOnLabels;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/Conference.tsx b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/Conference.tsx
index 37d0820..08725d9 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/Conference.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/Conference.tsx
@@ -1,14 +1,6 @@
 import { useFocusEffect } from '@react-navigation/native';
 import React, { useCallback } from 'react';
-import {
-    BackHandler,
-    NativeModules,
-    Platform,
-    SafeAreaView,
-    StatusBar,
-    View,
-    ViewStyle
-} from 'react-native';
+import { BackHandler, NativeModules, Platform, SafeAreaView, StatusBar, View, ViewStyle } from 'react-native';
 import { EdgeInsets, withSafeAreaInsets } from 'react-native-safe-area-context';
 import { connect, useDispatch } from 'react-redux';
 
@@ -20,10 +12,7 @@ import { getFeatureFlag } from '../../../base/flags/functions';
 import Container from '../../../base/react/components/native/Container';
 import LoadingIndicator from '../../../base/react/components/native/LoadingIndicator';
 import TintedView from '../../../base/react/components/native/TintedView';
-import {
-    ASPECT_RATIO_NARROW,
-    ASPECT_RATIO_WIDE
-} from '../../../base/responsive-ui/constants';
+import { ASPECT_RATIO_NARROW, ASPECT_RATIO_WIDE } from '../../../base/responsive-ui/constants';
 import { StyleType } from '../../../base/styles/functions.any';
 import TestConnectionInfo from '../../../base/testing/components/TestConnectionInfo';
 import { isCalendarEnabled } from '../../../calendar-sync/functions.native';
@@ -43,10 +32,7 @@ import Captions from '../../../subtitles/components/native/Captions';
 import { setToolboxVisible } from '../../../toolbox/actions.native';
 import Toolbox from '../../../toolbox/components/native/Toolbox';
 import { isToolboxVisible } from '../../../toolbox/functions.native';
-import {
-    AbstractConference,
-    abstractMapStateToProps
-} from '../AbstractConference';
+import { AbstractConference, abstractMapStateToProps } from '../AbstractConference';
 import type { AbstractProps } from '../AbstractConference';
 import { isConnecting } from '../functions.native';
 
@@ -61,493 +47,453 @@ import styles from './styles';
  * The type of the React {@code Component} props of {@link Conference}.
  */
 interface IProps extends AbstractProps {
-
-    /**
-     * Application's aspect ratio.
-     */
-    _aspectRatio: Symbol;
-
-    /**
-     * Whether the audio only is enabled or not.
-     */
-    _audioOnlyEnabled: boolean;
-
-    /**
-     * Branding styles for conference.
-     */
-    _brandingStyles: StyleType;
-
-    /**
-     * Whether the calendar feature is enabled or not.
-     */
-    _calendarEnabled: boolean;
-
-    /**
-     * The indicator which determines that we are still connecting to the
-     * conference which includes establishing the XMPP connection and then
-     * joining the room. If truthy, then an activity/loading indicator will be
-     * rendered.
-     */
-    _connecting: boolean;
-
-    /**
-     * Set to {@code true} when the filmstrip is currently visible.
-     */
-    _filmstripVisible: boolean;
-
-    /**
-     * The indicator which determines whether fullscreen (immersive) mode is enabled.
-     */
-    _fullscreenEnabled: boolean;
-
-    /**
-     * The indicator which determines if the participants pane is open.
-     */
-    _isParticipantsPaneOpen: boolean;
-
-    /**
-     * The ID of the participant currently on stage (if any).
-     */
-    _largeVideoParticipantId: string;
-
-    /**
-     * Local participant's display name.
-     */
-    _localParticipantDisplayName: string;
-
-    /**
-     * Whether Picture-in-Picture is enabled.
-     */
-    _pictureInPictureEnabled: boolean;
-
-    /**
-     * The indicator which determines whether the UI is reduced (to accommodate
-     * smaller display areas).
-     */
-    _reducedUI: boolean;
-
-    /**
-     * Indicates whether the lobby screen should be visible.
-     */
-    _showLobby: boolean;
-
-    /**
-     * Indicates whether the car mode is enabled.
-     */
-    _startCarMode: boolean;
-
-    /**
-     * The indicator which determines whether the Toolbox is visible.
-     */
-    _toolboxVisible: boolean;
-
-    /**
-     * The redux {@code dispatch} function.
-     */
-    dispatch: IStore['dispatch'];
-
-    /**
-    * Object containing the safe area insets.
-    */
-    insets: EdgeInsets;
-
-    /**
-     * Default prop for navigating between screen components(React Navigation).
-     */
-    navigation: any;
+	/**
+	 * Application's aspect ratio.
+	 */
+	_aspectRatio: Symbol;
+
+	/**
+	 * Whether the audio only is enabled or not.
+	 */
+	_audioOnlyEnabled: boolean;
+
+	/**
+	 * Branding styles for conference.
+	 */
+	_brandingStyles: StyleType;
+
+	/**
+	 * Whether the calendar feature is enabled or not.
+	 */
+	_calendarEnabled: boolean;
+
+	/**
+	 * The indicator which determines that we are still connecting to the
+	 * conference which includes establishing the XMPP connection and then
+	 * joining the room. If truthy, then an activity/loading indicator will be
+	 * rendered.
+	 */
+	_connecting: boolean;
+
+	/**
+	 * Set to {@code true} when the filmstrip is currently visible.
+	 */
+	_filmstripVisible: boolean;
+
+	/**
+	 * The indicator which determines whether fullscreen (immersive) mode is enabled.
+	 */
+	_fullscreenEnabled: boolean;
+
+	/**
+	 * The indicator which determines if the participants pane is open.
+	 */
+	_isParticipantsPaneOpen: boolean;
+
+	/**
+	 * The ID of the participant currently on stage (if any).
+	 */
+	_largeVideoParticipantId: string;
+
+	/**
+	 * Local participant's display name.
+	 */
+	_localParticipantDisplayName: string;
+
+	/**
+	 * Whether Picture-in-Picture is enabled.
+	 */
+	_pictureInPictureEnabled: boolean;
+
+	/**
+	 * The indicator which determines whether the UI is reduced (to accommodate
+	 * smaller display areas).
+	 */
+	_reducedUI: boolean;
+
+	/**
+	 * Indicates whether the lobby screen should be visible.
+	 */
+	_showLobby: boolean;
+
+	/**
+	 * Indicates whether the car mode is enabled.
+	 */
+	_startCarMode: boolean;
+
+	/**
+	 * The indicator which determines whether the Toolbox is visible.
+	 */
+	_toolboxVisible: boolean;
+
+	/**
+	 * The redux {@code dispatch} function.
+	 */
+	dispatch: IStore['dispatch'];
+
+	/**
+	 * Object containing the safe area insets.
+	 */
+	insets: EdgeInsets;
+
+	/**
+	 * Default prop for navigating between screen components(React Navigation).
+	 */
+	navigation: any;
 }
 
 type State = {
-
-    /**
-     * The label that is currently expanded.
-     */
-    visibleExpandedLabel?: string;
+	/**
+	 * The label that is currently expanded.
+	 */
+	visibleExpandedLabel?: string;
 };
 
 /**
  * The conference page of the mobile (i.e. React Native) application.
  */
 class Conference extends AbstractConference<IProps, State> {
-    /**
-     * Timeout ref.
-     */
-    _expandedLabelTimeout: any;
-
-    /**
-     * Initializes a new Conference instance.
-     *
-     * @param {Object} props - The read-only properties with which the new
-     * instance is to be initialized.
-     */
-    constructor(props: IProps) {
-        super(props);
-
-        this.state = {
-            visibleExpandedLabel: undefined
-        };
-
-        this._expandedLabelTimeout = React.createRef<number>();
-
-        // Bind event handlers so they are only bound once per instance.
-        this._onClick = this._onClick.bind(this);
-        this._onHardwareBackPress = this._onHardwareBackPress.bind(this);
-        this._setToolboxVisible = this._setToolboxVisible.bind(this);
-        this._createOnPress = this._createOnPress.bind(this);
-    }
-
-    /**
-     * Implements {@link Component#componentDidMount()}. Invoked immediately
-     * after this component is mounted.
-     *
-     * @inheritdoc
-     * @returns {void}
-     */
-    componentDidMount() {
-        const {
-            _audioOnlyEnabled,
-            _startCarMode,
-            navigation
-        } = this.props;
-
-        BackHandler.addEventListener('hardwareBackPress', this._onHardwareBackPress);
-
-        if (_audioOnlyEnabled && _startCarMode) {
-            navigation.navigate(screen.conference.carmode);
-        }
-    }
-
-    /**
-     * Implements {@code Component#componentDidUpdate}.
-     *
-     * @inheritdoc
-     */
-    componentDidUpdate(prevProps: IProps) {
-        const {
-            _audioOnlyEnabled,
-            _showLobby,
-            _startCarMode
-        } = this.props;
-
-        if (!prevProps._showLobby && _showLobby) {
-            navigate(screen.lobby.root);
-        }
-
-        if (prevProps._showLobby && !_showLobby) {
-            if (_audioOnlyEnabled && _startCarMode) {
-                return;
-            }
-
-            navigate(screen.conference.main);
-        }
-    }
-
-    /**
-     * Implements {@link Component#componentWillUnmount()}. Invoked immediately
-     * before this component is unmounted and destroyed. Disconnects the
-     * conference described by the redux store/state.
-     *
-     * @inheritdoc
-     * @returns {void}
-     */
-    componentWillUnmount() {
-        // Tear handling any hardware button presses for back navigation down.
-        BackHandler.removeEventListener('hardwareBackPress', this._onHardwareBackPress);
-
-        clearTimeout(this._expandedLabelTimeout.current ?? 0);
-    }
-
-    /**
-     * Implements React's {@link Component#render()}.
-     *
-     * @inheritdoc
-     * @returns {ReactElement}
-     */
-    render() {
-        const {
-            _brandingStyles,
-            _fullscreenEnabled
-        } = this.props;
-
-        return (
-            <Container
-                style = { [
-                    styles.conference,
-                    _brandingStyles
-                ] }>
-                <BrandingImageBackground />
-                {
-                    Platform.OS === 'android'
-                    && <StatusBar
-                        barStyle = 'light-content'
-                        hidden = { _fullscreenEnabled }
-                        translucent = { _fullscreenEnabled } />
-                }
-                { this._renderContent() }
-            </Container>
-        );
-    }
-
-    /**
-     * Changes the value of the toolboxVisible state, thus allowing us to switch
-     * between Toolbox and Filmstrip and change their visibility.
-     *
-     * @private
-     * @returns {void}
-     */
-    _onClick() {
-        this._setToolboxVisible(!this.props._toolboxVisible);
-    }
-
-    /**
-     * Handles a hardware button press for back navigation. Enters Picture-in-Picture mode
-     * (if supported) or leaves the associated {@code Conference} otherwise.
-     *
-     * @returns {boolean} Exiting the app is undesired, so {@code true} is always returned.
-     */
-    _onHardwareBackPress() {
-        let p;
-
-        if (this.props._pictureInPictureEnabled) {
-            const { PictureInPicture } = NativeModules;
-
-            p = PictureInPicture.enterPictureInPicture();
-        } else {
-            p = Promise.reject(new Error('PiP not enabled'));
-        }
-
-        p.catch(() => {
-            this.props.dispatch(appNavigate(undefined));
-        });
-
-        return true;
-    }
-
-    /**
-     * Creates a function to be invoked when the onPress of the touchables are
-     * triggered.
-     *
-     * @param {string} label - The identifier of the label that's onLayout is
-     * triggered.
-     * @returns {Function}
-     */
-    _createOnPress(label: string) {
-        return () => {
-            const { visibleExpandedLabel } = this.state;
-
-            const newVisibleExpandedLabel
-                = visibleExpandedLabel === label ? undefined : label;
-
-            clearTimeout(this._expandedLabelTimeout.current);
-            this.setState({
-                visibleExpandedLabel: newVisibleExpandedLabel
-            });
-
-            if (newVisibleExpandedLabel) {
-                this._expandedLabelTimeout.current = setTimeout(() => {
-                    this.setState({
-                        visibleExpandedLabel: undefined
-                    });
-                }, EXPANDED_LABEL_TIMEOUT);
-            }
-        };
-    }
-
-    /**
-     * Renders the content for the Conference container.
-     *
-     * @private
-     * @returns {React$Element}
-     */
-    _renderContent() {
-        const {
-            _aspectRatio,
-            _connecting,
-            _filmstripVisible,
-            _largeVideoParticipantId,
-            _reducedUI,
-            _shouldDisplayTileView,
-            _toolboxVisible
-        } = this.props;
-
-        let alwaysOnTitleBarStyles;
-
-        if (_reducedUI) {
-            return this._renderContentForReducedUi();
-        }
-
-        if (_aspectRatio === ASPECT_RATIO_WIDE) {
-            alwaysOnTitleBarStyles
-                = !_shouldDisplayTileView && _filmstripVisible
-                    ? styles.alwaysOnTitleBarWide
-                    : styles.alwaysOnTitleBar;
-        } else {
-            alwaysOnTitleBarStyles = styles.alwaysOnTitleBar;
-
-        }
-
-        return (
-            <>
-                {/*
-                  * The LargeVideo is the lowermost stacking layer.
-                  */
-                    _shouldDisplayTileView
-                        ? <TileView onClick = { this._onClick } />
-                        : <LargeVideo onClick = { this._onClick } />
-                }
-
-                {/*
-                  * If there is a ringing call, show the callee's info.
-                  */
-                    <CalleeInfoContainer />
-                }
-
-                {/*
-                  * The activity/loading indicator goes above everything, except
-                  * the toolbox/toolbars and the dialogs.
-                  */
-                    _connecting
-                        && <TintedView>
-                            <LoadingIndicator />
-                        </TintedView>
-                }
-
-                <View
-                    pointerEvents = 'box-none'
-                    style = { styles.toolboxAndFilmstripContainer as ViewStyle }>
-
-                    <Captions onPress = { this._onClick } />
-
-                    {
-                        _shouldDisplayTileView
-                        || <Container style = { styles.displayNameContainer }>
-                            <DisplayNameLabel
-                                participantId = { _largeVideoParticipantId } />
-                        </Container>
-                    }
-
-                    { !_shouldDisplayTileView && <LonelyMeetingExperience /> }
-
-                    {
-                        _shouldDisplayTileView
-                        || <>
-                            <Filmstrip />
-                            { this._renderNotificationsContainer() }
-                            <Toolbox />
-                        </>
-                    }
-                </View>
-
-                <SafeAreaView
-                    pointerEvents = 'box-none'
-                    style = {
-                        (_toolboxVisible
-                            ? styles.titleBarSafeViewColor
-                            : styles.titleBarSafeViewTransparent) as ViewStyle }>
-                    <TitleBar _createOnPress = { this._createOnPress } />
-                </SafeAreaView>
-                <SafeAreaView
-                    pointerEvents = 'box-none'
-                    style = {
-                        (_toolboxVisible
-                            ? [ styles.titleBarSafeViewTransparent, { top: this.props.insets.top + 50 } ]
-                            : styles.titleBarSafeViewTransparent) as ViewStyle
-                    }>
-                    <View
-                        pointerEvents = 'box-none'
-                        style = { styles.expandedLabelWrapper }>
-                        <ExpandedLabelPopup visibleExpandedLabel = { this.state.visibleExpandedLabel } />
-                    </View>
-                    <View
-                        pointerEvents = 'box-none'
-                        style = { alwaysOnTitleBarStyles as ViewStyle }>
-                        {/* eslint-disable-next-line react/jsx-no-bind */}
-                        <AlwaysOnLabels createOnPress = { this._createOnPress } />
-                    </View>
-                </SafeAreaView>
-
-                <TestConnectionInfo />
-
-                {
-                    _shouldDisplayTileView
-                    && <>
-                        { this._renderNotificationsContainer() }
-                        <Toolbox />
-                    </>
-                }
-            </>
-        );
-    }
-
-    /**
-     * Renders the content for the Conference container when in "reduced UI" mode.
-     *
-     * @private
-     * @returns {React$Element}
-     */
-    _renderContentForReducedUi() {
-        const { _connecting } = this.props;
-
-        return (
-            <>
-                <LargeVideo onClick = { this._onClick } />
-
-                {
-                    _connecting
-                        && <TintedView>
-                            <LoadingIndicator />
-                        </TintedView>
-                }
-            </>
-        );
-    }
-
-    /**
-     * Renders a container for notifications to be displayed by the
-     * base/notifications feature.
-     *
-     * @private
-     * @returns {React$Element}
-     */
-    _renderNotificationsContainer() {
-        const notificationsStyle: ViewStyle = {};
-
-        // In the landscape mode (wide) there's problem with notifications being
-        // shadowed by the filmstrip rendered on the right. This makes the "x"
-        // button not clickable. In order to avoid that a margin of the
-        // filmstrip's size is added to the right.
-        //
-        // Pawel: after many attempts I failed to make notifications adjust to
-        // their contents width because of column and rows being used in the
-        // flex layout. The only option that seemed to limit the notification's
-        // size was explicit 'width' value which is not better than the margin
-        // added here.
-        const { _aspectRatio, _filmstripVisible } = this.props;
-
-        if (_filmstripVisible && _aspectRatio !== ASPECT_RATIO_NARROW) {
-            notificationsStyle.marginRight = FILMSTRIP_SIZE;
-        }
-
-        return super.renderNotificationsContainer(
-            {
-                shouldDisplayTileView: this.props._shouldDisplayTileView,
-                style: notificationsStyle,
-                toolboxVisible: this.props._toolboxVisible
-            }
-        );
-    }
-
-    /**
-     * Dispatches an action changing the visibility of the {@link Toolbox}.
-     *
-     * @private
-     * @param {boolean} visible - Pass {@code true} to show the
-     * {@code Toolbox} or {@code false} to hide it.
-     * @returns {void}
-     */
-    _setToolboxVisible(visible: boolean) {
-        this.props.dispatch(setToolboxVisible(visible));
-    }
+	/**
+	 * Timeout ref.
+	 */
+	_expandedLabelTimeout: any;
+
+	/**
+	 * Initializes a new Conference instance.
+	 *
+	 * @param {Object} props - The read-only properties with which the new
+	 * instance is to be initialized.
+	 */
+	constructor(props: IProps) {
+		super(props);
+
+		this.state = {
+			visibleExpandedLabel: undefined
+		};
+
+		this._expandedLabelTimeout = React.createRef<number>();
+
+		// Bind event handlers so they are only bound once per instance.
+		this._onClick = this._onClick.bind(this);
+		this._onHardwareBackPress = this._onHardwareBackPress.bind(this);
+		this._setToolboxVisible = this._setToolboxVisible.bind(this);
+		this._createOnPress = this._createOnPress.bind(this);
+	}
+
+	/**
+	 * Implements {@link Component#componentDidMount()}. Invoked immediately
+	 * after this component is mounted.
+	 *
+	 * @inheritdoc
+	 * @returns {void}
+	 */
+	componentDidMount() {
+		const { _audioOnlyEnabled, _startCarMode, navigation } = this.props;
+
+		BackHandler.addEventListener('hardwareBackPress', this._onHardwareBackPress);
+
+		if (_audioOnlyEnabled && _startCarMode) {
+			navigation.navigate(screen.conference.carmode);
+		}
+	}
+
+	/**
+	 * Implements {@code Component#componentDidUpdate}.
+	 *
+	 * @inheritdoc
+	 */
+	componentDidUpdate(prevProps: IProps) {
+		const { _audioOnlyEnabled, _showLobby, _startCarMode } = this.props;
+
+		if (!prevProps._showLobby && _showLobby) {
+			navigate(screen.lobby.root);
+		}
+
+		if (prevProps._showLobby && !_showLobby) {
+			if (_audioOnlyEnabled && _startCarMode) {
+				return;
+			}
+
+			navigate(screen.conference.main);
+		}
+	}
+
+	/**
+	 * Implements {@link Component#componentWillUnmount()}. Invoked immediately
+	 * before this component is unmounted and destroyed. Disconnects the
+	 * conference described by the redux store/state.
+	 *
+	 * @inheritdoc
+	 * @returns {void}
+	 */
+	componentWillUnmount() {
+		// Tear handling any hardware button presses for back navigation down.
+		BackHandler.removeEventListener('hardwareBackPress', this._onHardwareBackPress);
+
+		clearTimeout(this._expandedLabelTimeout.current ?? 0);
+	}
+
+	/**
+	 * Implements React's {@link Component#render()}.
+	 *
+	 * @inheritdoc
+	 * @returns {ReactElement}
+	 */
+	render() {
+		const { _brandingStyles, _fullscreenEnabled } = this.props;
+
+		return (
+			<Container style={[styles.conference, _brandingStyles]}>
+				<BrandingImageBackground />
+				{Platform.OS === 'android' && (
+					<StatusBar barStyle='light-content' hidden={_fullscreenEnabled} translucent={_fullscreenEnabled} />
+				)}
+				{this._renderContent()}
+			</Container>
+		);
+	}
+
+	/**
+	 * Changes the value of the toolboxVisible state, thus allowing us to switch
+	 * between Toolbox and Filmstrip and change their visibility.
+	 *
+	 * @private
+	 * @returns {void}
+	 */
+	_onClick() {
+		this._setToolboxVisible(!this.props._toolboxVisible);
+	}
+
+	/**
+	 * Handles a hardware button press for back navigation. Enters Picture-in-Picture mode
+	 * (if supported) or leaves the associated {@code Conference} otherwise.
+	 *
+	 * @returns {boolean} Exiting the app is undesired, so {@code true} is always returned.
+	 */
+	_onHardwareBackPress() {
+		let p;
+
+		if (this.props._pictureInPictureEnabled) {
+			const { PictureInPicture } = NativeModules;
+
+			p = PictureInPicture.enterPictureInPicture();
+		} else {
+			p = Promise.reject(new Error('PiP not enabled'));
+		}
+
+		p.catch(() => {
+			this.props.dispatch(appNavigate(undefined));
+		});
+
+		return true;
+	}
+
+	/**
+	 * Creates a function to be invoked when the onPress of the touchables are
+	 * triggered.
+	 *
+	 * @param {string} label - The identifier of the label that's onLayout is
+	 * triggered.
+	 * @returns {Function}
+	 */
+	_createOnPress(label: string) {
+		return () => {
+			const { visibleExpandedLabel } = this.state;
+
+			const newVisibleExpandedLabel = visibleExpandedLabel === label ? undefined : label;
+
+			clearTimeout(this._expandedLabelTimeout.current);
+			this.setState({
+				visibleExpandedLabel: newVisibleExpandedLabel
+			});
+
+			if (newVisibleExpandedLabel) {
+				this._expandedLabelTimeout.current = setTimeout(() => {
+					this.setState({
+						visibleExpandedLabel: undefined
+					});
+				}, EXPANDED_LABEL_TIMEOUT);
+			}
+		};
+	}
+
+	/**
+	 * Renders the content for the Conference container.
+	 *
+	 * @private
+	 * @returns {React$Element}
+	 */
+	_renderContent() {
+		const {
+			_aspectRatio,
+			_connecting,
+			_filmstripVisible,
+			_largeVideoParticipantId,
+			_reducedUI,
+			_shouldDisplayTileView,
+			_toolboxVisible
+		} = this.props;
+
+		let alwaysOnTitleBarStyles;
+
+		if (_reducedUI) {
+			return this._renderContentForReducedUi();
+		}
+
+		if (_aspectRatio === ASPECT_RATIO_WIDE) {
+			alwaysOnTitleBarStyles =
+				!_shouldDisplayTileView && _filmstripVisible ? styles.alwaysOnTitleBarWide : styles.alwaysOnTitleBar;
+		} else {
+			alwaysOnTitleBarStyles = styles.alwaysOnTitleBar;
+		}
+
+		return (
+			<>
+				{
+					/*
+					 * The LargeVideo is the lowermost stacking layer.
+					 */
+					_shouldDisplayTileView ? <TileView onClick={this._onClick} /> : <LargeVideo onClick={this._onClick} />
+				}
+
+				{
+					/*
+					 * If there is a ringing call, show the callee's info.
+					 */
+					<CalleeInfoContainer />
+				}
+
+				{
+					/*
+					 * The activity/loading indicator goes above everything, except
+					 * the toolbox/toolbars and the dialogs.
+					 */
+					_connecting && (
+						<TintedView>
+							<LoadingIndicator />
+						</TintedView>
+					)
+				}
+
+				<View pointerEvents='box-none' style={styles.toolboxAndFilmstripContainer as ViewStyle}>
+					<Captions onPress={this._onClick} />
+
+					{_shouldDisplayTileView || (
+						<Container style={styles.displayNameContainer}>
+							<DisplayNameLabel participantId={_largeVideoParticipantId} />
+						</Container>
+					)}
+
+					{!_shouldDisplayTileView && <LonelyMeetingExperience />}
+
+					{_shouldDisplayTileView || (
+						<>
+							<Filmstrip />
+							{this._renderNotificationsContainer()}
+							<Toolbox />
+						</>
+					)}
+				</View>
+
+				<SafeAreaView
+					pointerEvents='box-none'
+					style={(_toolboxVisible ? styles.titleBarSafeViewColor : styles.titleBarSafeViewTransparent) as ViewStyle}>
+					<TitleBar _createOnPress={this._createOnPress} />
+				</SafeAreaView>
+				<SafeAreaView
+					pointerEvents='box-none'
+					style={
+						(_toolboxVisible
+							? [styles.titleBarSafeViewTransparent, { top: this.props.insets.top + 50 }]
+							: styles.titleBarSafeViewTransparent) as ViewStyle
+					}>
+					<View pointerEvents='box-none' style={styles.expandedLabelWrapper}>
+						<ExpandedLabelPopup visibleExpandedLabel={this.state.visibleExpandedLabel} />
+					</View>
+					<View pointerEvents='box-none' style={alwaysOnTitleBarStyles as ViewStyle}>
+						{/* eslint-disable-next-line react/jsx-no-bind */}
+						<AlwaysOnLabels createOnPress={this._createOnPress} />
+					</View>
+				</SafeAreaView>
+
+				<TestConnectionInfo />
+
+				{_shouldDisplayTileView && (
+					<>
+						{this._renderNotificationsContainer()}
+						<Toolbox />
+					</>
+				)}
+			</>
+		);
+	}
+
+	/**
+	 * Renders the content for the Conference container when in "reduced UI" mode.
+	 *
+	 * @private
+	 * @returns {React$Element}
+	 */
+	_renderContentForReducedUi() {
+		const { _connecting } = this.props;
+
+		return (
+			<>
+				<LargeVideo onClick={this._onClick} />
+
+				{_connecting && (
+					<TintedView>
+						<LoadingIndicator />
+					</TintedView>
+				)}
+			</>
+		);
+	}
+
+	/**
+	 * Renders a container for notifications to be displayed by the
+	 * base/notifications feature.
+	 *
+	 * @private
+	 * @returns {React$Element}
+	 */
+	_renderNotificationsContainer() {
+		const notificationsStyle: ViewStyle = {};
+
+		// In the landscape mode (wide) there's problem with notifications being
+		// shadowed by the filmstrip rendered on the right. This makes the "x"
+		// button not clickable. In order to avoid that a margin of the
+		// filmstrip's size is added to the right.
+		//
+		// Pawel: after many attempts I failed to make notifications adjust to
+		// their contents width because of column and rows being used in the
+		// flex layout. The only option that seemed to limit the notification's
+		// size was explicit 'width' value which is not better than the margin
+		// added here.
+		const { _aspectRatio, _filmstripVisible } = this.props;
+
+		if (_filmstripVisible && _aspectRatio !== ASPECT_RATIO_NARROW) {
+			notificationsStyle.marginRight = FILMSTRIP_SIZE;
+		}
+
+		return super.renderNotificationsContainer({
+			shouldDisplayTileView: this.props._shouldDisplayTileView,
+			style: notificationsStyle,
+			toolboxVisible: this.props._toolboxVisible
+		});
+	}
+
+	/**
+	 * Dispatches an action changing the visibility of the {@link Toolbox}.
+	 *
+	 * @private
+	 * @param {boolean} visible - Pass {@code true} to show the
+	 * {@code Toolbox} or {@code false} to hide it.
+	 * @returns {void}
+	 */
+	_setToolboxVisible(visible: boolean) {
+		this.props.dispatch(setToolboxVisible(visible));
+	}
 }
 
 /**
@@ -559,48 +505,55 @@ class Conference extends AbstractConference<IProps, State> {
  * @returns {IProps}
  */
 function _mapStateToProps(state: IReduxState, _ownProps: any) {
-    const { isOpen } = state['features/participants-pane'];
-    const { aspectRatio, reducedUI } = state['features/base/responsive-ui'];
-    const { backgroundColor } = state['features/dynamic-branding'];
-    const { startCarMode } = state['features/base/settings'];
-    const { enabled: audioOnlyEnabled } = state['features/base/audio-only'];
-    const brandingStyles = backgroundColor ? {
-        backgroundColor
-    } : undefined;
-
-    return {
-        ...abstractMapStateToProps(state),
-        _aspectRatio: aspectRatio,
-        _audioOnlyEnabled: Boolean(audioOnlyEnabled),
-        _brandingStyles: brandingStyles,
-        _calendarEnabled: isCalendarEnabled(state),
-        _connecting: isConnecting(state),
-        _filmstripVisible: isFilmstripVisible(state),
-        _fullscreenEnabled: getFeatureFlag(state, FULLSCREEN_ENABLED, true),
-        _isParticipantsPaneOpen: isOpen,
-        _largeVideoParticipantId: state['features/large-video'].participantId,
-        _pictureInPictureEnabled: getFeatureFlag(state, PIP_ENABLED),
-        _reducedUI: reducedUI,
-        _showLobby: getIsLobbyVisible(state),
-        _startCarMode: startCarMode,
-        _toolboxVisible: isToolboxVisible(state)
-    };
+	const { isOpen } = state['features/participants-pane'];
+	const { aspectRatio, reducedUI } = state['features/base/responsive-ui'];
+	const { backgroundColor } = state['features/dynamic-branding'];
+	const { startCarMode } = state['features/base/settings'];
+	const { enabled: audioOnlyEnabled } = state['features/base/audio-only'];
+	const brandingStyles = backgroundColor
+		? {
+				backgroundColor
+		  }
+		: undefined;
+
+	return {
+		...abstractMapStateToProps(state),
+		_aspectRatio: aspectRatio,
+		_audioOnlyEnabled: Boolean(audioOnlyEnabled),
+		_brandingStyles: brandingStyles,
+		_calendarEnabled: isCalendarEnabled(state),
+		_connecting: isConnecting(state),
+		_filmstripVisible: isFilmstripVisible(state),
+		_fullscreenEnabled: getFeatureFlag(state, FULLSCREEN_ENABLED, true),
+		_isParticipantsPaneOpen: isOpen,
+		_largeVideoParticipantId: state['features/large-video'].participantId,
+		_pictureInPictureEnabled: getFeatureFlag(state, PIP_ENABLED),
+		_reducedUI: reducedUI,
+		_showLobby: getIsLobbyVisible(state),
+		_startCarMode: startCarMode,
+		_toolboxVisible: isToolboxVisible(state)
+	};
 }
 
-export default withSafeAreaInsets(connect(_mapStateToProps)(props => {
-    const dispatch = useDispatch();
-
-    useFocusEffect(useCallback(() => {
-        dispatch({ type: CONFERENCE_FOCUSED });
-        setPictureInPictureEnabled(true);
-
-        return () => {
-            dispatch({ type: CONFERENCE_BLURRED });
-            setPictureInPictureEnabled(false);
-        };
-    }, []));
-
-    return ( // @ts-ignore
-        <Conference { ...props } />
-    );
-}));
+export default withSafeAreaInsets(
+	connect(_mapStateToProps)(props => {
+		const dispatch = useDispatch();
+
+		useFocusEffect(
+			useCallback(() => {
+				dispatch({ type: CONFERENCE_FOCUSED });
+				setPictureInPictureEnabled(true);
+
+				return () => {
+					dispatch({ type: CONFERENCE_BLURRED });
+					setPictureInPictureEnabled(false);
+				};
+			}, [])
+		);
+
+		return (
+			// @ts-ignore
+			<Conference {...props} />
+		);
+	})
+);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/TitleBar.tsx b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/TitleBar.tsx
index fad4b51..3cdf564 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/TitleBar.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/TitleBar.tsx
@@ -18,39 +18,37 @@ import ConferenceTimer from '../ConferenceTimer';
 import Labels from './Labels';
 import styles from './styles';
 
-
 interface IProps {
-
-    /**
-     * Whether displaying the current conference timer is enabled or not.
-     */
-    _conferenceTimerEnabled: boolean;
-
-    /**
-     * Creates a function to be invoked when the onPress of the touchables are
-     * triggered.
-     */
-    _createOnPress: Function;
-
-    /**
-     * Whether participants feature is enabled or not.
-     */
-    _isParticipantsPaneEnabled: boolean;
-
-    /**
-     * Name of the meeting we're currently in.
-     */
-    _meetingName: string;
-
-    /**
-     * Whether displaying the current room name is enabled or not.
-     */
-    _roomNameEnabled: boolean;
-
-    /**
-     * True if the navigation bar should be visible.
-     */
-    _visible: boolean;
+	/**
+	 * Whether displaying the current conference timer is enabled or not.
+	 */
+	_conferenceTimerEnabled: boolean;
+
+	/**
+	 * Creates a function to be invoked when the onPress of the touchables are
+	 * triggered.
+	 */
+	_createOnPress: Function;
+
+	/**
+	 * Whether participants feature is enabled or not.
+	 */
+	_isParticipantsPaneEnabled: boolean;
+
+	/**
+	 * Name of the meeting we're currently in.
+	 */
+	_meetingName: string;
+
+	/**
+	 * Whether displaying the current room name is enabled or not.
+	 */
+	_roomNameEnabled: boolean;
+
+	/**
+	 * True if the navigation bar should be visible.
+	 */
+	_visible: boolean;
 }
 
 /**
@@ -61,55 +59,46 @@ interface IProps {
  * @returns {JSX.Element}
  */
 const TitleBar = (props: IProps) => {
-    const { _isParticipantsPaneEnabled, _visible } = props;
-
-    if (!_visible) {
-        return null;
-    }
-
-    return (
-        <View
-            style = { styles.titleBarWrapper as ViewStyle }>
-            <View style = { styles.pipButtonContainer as ViewStyle }>
-                <PictureInPictureButton styles = { styles.pipButton } />
-            </View>
-            <View
-                pointerEvents = 'box-none'
-                style = { styles.roomNameWrapper as ViewStyle }>
-                {
-                    props._conferenceTimerEnabled
-                    && <View style = { styles.roomTimerView as ViewStyle }>
-                        <ConferenceTimer textStyle = { styles.roomTimer } />
-                    </View>
-                }
-                {
-                    props._roomNameEnabled
-                    && <View style = { styles.roomNameView as ViewStyle }>
-                        <Text
-                            numberOfLines = { 1 }
-                            style = { styles.roomName }>
-                            { props._meetingName }
-                        </Text>
-                    </View>
-                }
-                {/* eslint-disable-next-line react/jsx-no-bind */}
-                <Labels createOnPress = { props._createOnPress } />
-            </View>
-            <View style = { styles.titleBarButtonContainer }>
-                <ToggleCameraButton styles = { styles.titleBarButton } />
-            </View>
-            <View style = { styles.titleBarButtonContainer }>
-                <AudioDeviceToggleButton styles = { styles.titleBarButton } />
-            </View>
-            {
-                _isParticipantsPaneEnabled
-                && <View style = { styles.titleBarButtonContainer }>
-                    <ParticipantsPaneButton
-                        styles = { styles.titleBarButton } />
-                </View>
-            }
-        </View>
-    );
+	const { _isParticipantsPaneEnabled, _visible } = props;
+
+	if (!_visible) {
+		return null;
+	}
+
+	return (
+		<View style={styles.titleBarWrapper as ViewStyle}>
+			<View style={styles.pipButtonContainer as ViewStyle}>
+				<PictureInPictureButton styles={styles.pipButton} />
+			</View>
+			<View pointerEvents='box-none' style={styles.roomNameWrapper as ViewStyle}>
+				{props._conferenceTimerEnabled && (
+					<View style={styles.roomTimerView as ViewStyle}>
+						<ConferenceTimer textStyle={styles.roomTimer} />
+					</View>
+				)}
+				{props._roomNameEnabled && (
+					<View style={styles.roomNameView as ViewStyle}>
+						<Text numberOfLines={1} style={styles.roomName}>
+							{props._meetingName}
+						</Text>
+					</View>
+				)}
+				{/* eslint-disable-next-line react/jsx-no-bind */}
+				<Labels createOnPress={props._createOnPress} />
+			</View>
+			{/* <View style={styles.titleBarButtonContainer}>
+				<ToggleCameraButton styles={styles.titleBarButton} />
+			</View> */}
+			<View style={styles.titleBarButtonContainer}>
+				<AudioDeviceToggleButton styles={styles.titleBarButton} />
+			</View>
+			{_isParticipantsPaneEnabled && (
+				<View style={styles.titleBarButtonContainer}>
+					<ParticipantsPaneButton styles={styles.titleBarButton} />
+				</View>
+			)}
+		</View>
+	);
 };
 
 /**
@@ -119,17 +108,18 @@ const TitleBar = (props: IProps) => {
  * @returns {IProps}
  */
 function _mapStateToProps(state: IReduxState) {
-    const { hideConferenceTimer } = state['features/base/config'];
-    const startTimestamp = getConferenceTimestamp(state);
-
-    return {
-        _conferenceTimerEnabled:
-            Boolean(getFeatureFlag(state, CONFERENCE_TIMER_ENABLED, true) && !hideConferenceTimer && startTimestamp),
-        _isParticipantsPaneEnabled: isParticipantsPaneEnabled(state),
-        _meetingName: getConferenceName(state),
-        _roomNameEnabled: isRoomNameEnabled(state),
-        _visible: isToolboxVisible(state)
-    };
+	const { hideConferenceTimer } = state['features/base/config'];
+	const startTimestamp = getConferenceTimestamp(state);
+
+	return {
+		_conferenceTimerEnabled: Boolean(
+			getFeatureFlag(state, CONFERENCE_TIMER_ENABLED, true) && !hideConferenceTimer && startTimestamp
+		),
+		_isParticipantsPaneEnabled: isParticipantsPaneEnabled(state),
+		_meetingName: getConferenceName(state),
+		_roomNameEnabled: isRoomNameEnabled(state),
+		_visible: isToolboxVisible(state)
+	};
 }
 
 export default connect(_mapStateToProps)(TitleBar);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/carmode/EndMeetingButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/carmode/EndMeetingButton.tsx
index 3f21898..9e418b8 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/carmode/EndMeetingButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/carmode/EndMeetingButton.tsx
@@ -16,23 +16,24 @@ import styles from './styles';
  * @returns {JSX.Element} - The end meeting button.
  */
 const EndMeetingButton = (): JSX.Element => {
-    const dispatch = useDispatch();
+	const dispatch = useDispatch();
 
-    const onSelect = useCallback(() => {
-        sendAnalytics(createToolbarEvent('hangup'));
+	const onSelect = useCallback(() => {
+		sendAnalytics(createToolbarEvent('hangup'));
 
-        dispatch(appNavigate(undefined));
-    }, [ dispatch ]);
+		dispatch(appNavigate(undefined));
+	}, [dispatch]);
 
-    return (
-        <Button
-            accessibilityLabel = 'toolbar.accessibilityLabel.leaveConference'
-            icon = { EndMeetingIcon }
-            labelKey = 'toolbar.leaveConference'
-            onClick = { onSelect }
-            style = { styles.endMeetingButton }
-            type = { BUTTON_TYPES.DESTRUCTIVE } />
-    );
+	return (
+		<Button
+			accessibilityLabel='toolbar.accessibilityLabel.leaveConference'
+			icon={EndMeetingIcon}
+			labelKey='toolbar.leaveConference'
+			onClick={onSelect}
+			style={styles.endMeetingButton}
+			type={BUTTON_TYPES.DESTRUCTIVE}
+		/>
+	);
 };
 
 export default EndMeetingButton;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/carmode/SoundDeviceButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/carmode/SoundDeviceButton.tsx
index 5933045..e1f2009 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/carmode/SoundDeviceButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/carmode/SoundDeviceButton.tsx
@@ -15,21 +15,20 @@ import styles from './styles';
  * @returns {JSX.Element} - The sound device button.
  */
 const SelectSoundDevice = (): JSX.Element => {
-    const dispatch = useDispatch();
+	const dispatch = useDispatch();
 
-    const onSelect = useCallback(() =>
-        dispatch(openSheet(AudioRoutePickerDialog))
-    , [ dispatch ]);
+	const onSelect = useCallback(() => dispatch(openSheet(AudioRoutePickerDialog)), [dispatch]);
 
-    return (
-        <Button
-            accessibilityLabel = 'carmode.actions.selectSoundDevice'
-            icon = { AudioIcon }
-            labelKey = 'carmode.actions.selectSoundDevice'
-            onClick = { onSelect }
-            style = { styles.soundDeviceButton }
-            type = { BUTTON_TYPES.SECONDARY } />
-    );
+	return (
+		<Button
+			accessibilityLabel='carmode.actions.selectSoundDevice'
+			icon={AudioIcon}
+			labelKey='carmode.actions.selectSoundDevice'
+			onClick={onSelect}
+			style={styles.soundDeviceButton}
+			type={BUTTON_TYPES.SECONDARY}
+		/>
+	);
 };
 
 export default SelectSoundDevice;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/styles.ts b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/styles.ts
index f600467..61051fd 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/styles.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/native/styles.ts
@@ -44,7 +44,7 @@ export default {
     },
 
     displayNameContainer: {
-        margin: 10
+        margin: BaseTheme.spacing[3]
     },
 
     /**
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/web/Conference.tsx b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/web/Conference.tsx
index 70ac879..e430aad 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/web/Conference.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/web/Conference.tsx
@@ -30,6 +30,8 @@ import JitsiPortal from '../../../toolbox/components/web/JitsiPortal';
 import Toolbox from '../../../toolbox/components/web/Toolbox';
 import { LAYOUT_CLASSNAMES } from '../../../video-layout/constants';
 import { getCurrentLayout } from '../../../video-layout/functions.any';
+import VisitorsQueue from '../../../visitors/components/web/VisitorsQueue';
+import { showVisitorsQueue } from '../../../visitors/functions';
 import { init } from '../../actions.web';
 import { maybeShowSuboptimalExperienceNotification } from '../../functions.web';
 import {
@@ -100,6 +102,11 @@ interface IProps extends AbstractProps, WithTranslation {
      */
     _showPrejoin: boolean;
 
+    /**
+     * If visitors queue page is visible or not.
+     */
+    _showVisitorsQueue: boolean;
+
     dispatch: IStore['dispatch'];
 }
 
@@ -206,6 +213,7 @@ class Conference extends AbstractConference<IProps, any> {
             _overflowDrawer,
             _showLobby,
             _showPrejoin,
+            _showVisitorsQueue,
             t
         } = this.props;
 
@@ -257,8 +265,9 @@ class Conference extends AbstractConference<IProps, any> {
 
                     <CalleeInfoContainer />
 
-                    { _showPrejoin && <Prejoin />}
-                    { _showLobby && <LobbyScreen />}
+                    { (_showPrejoin && !_showVisitorsQueue) && <Prejoin />}
+                    { (_showLobby && !_showVisitorsQueue) && <LobbyScreen />}
+                    { _showVisitorsQueue && <VisitorsQueue />}
                 </div>
                 <ParticipantsPane />
                 <ReactionAnimations />
@@ -368,8 +377,6 @@ class Conference extends AbstractConference<IProps, any> {
      */
     _start() {
         APP.UI.start();
-
-        APP.UI.registerListeners();
         APP.UI.bindEvents();
 
         FULL_SCREEN_EVENTS.forEach(name =>
@@ -404,7 +411,8 @@ function _mapStateToProps(state: IReduxState) {
         _overflowDrawer: overflowDrawer,
         _roomName: getConferenceNameForTitle(state),
         _showLobby: getIsLobbyVisible(state),
-        _showPrejoin: isPrejoinPageVisible(state)
+        _showPrejoin: isPrejoinPageVisible(state),
+        _showVisitorsQueue: showVisitorsQueue(state)
     };
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/web/InsecureRoomNameLabel.tsx b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/web/InsecureRoomNameLabel.tsx
index 0a4b622..59d888b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/conference/components/web/InsecureRoomNameLabel.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/conference/components/web/InsecureRoomNameLabel.tsx
@@ -13,22 +13,18 @@ import AbstractInsecureRoomNameLabel, { _mapStateToProps } from '../AbstractInse
  * Renders a label indicating that we are in a room with an insecure name.
  */
 class InsecureRoomNameLabel extends AbstractInsecureRoomNameLabel {
-    /**
-     * Renders the platform dependent content.
-     *
-     * @inheritdoc
-     */
-    _render() {
-        return (
-            <Tooltip
-                content = { getUnsafeRoomText(this.props.t, 'meeting') }
-                position = 'bottom'>
-                <Label
-                    color = { COLORS.red }
-                    icon = { IconExclamationTriangle } />
-            </Tooltip>
-        );
-    }
+	/**
+	 * Renders the platform dependent content.
+	 *
+	 * @inheritdoc
+	 */
+	_render() {
+		return (
+			<Tooltip content={getUnsafeRoomText(this.props.t, 'meeting')} position='bottom'>
+				<Label color={COLORS.red} icon={IconExclamationTriangle} />
+			</Tooltip>
+		);
+	}
 }
 
 export default translate(connect(_mapStateToProps)(InsecureRoomNameLabel));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/conference/middleware.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/conference/middleware.any.ts
index a2c8f5b..a6c2eae 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/conference/middleware.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/conference/middleware.any.ts
@@ -9,7 +9,8 @@ import { IReduxState, IStore } from '../app/types';
 import {
     CONFERENCE_FAILED,
     CONFERENCE_JOINED,
-    CONFERENCE_LEFT
+    CONFERENCE_LEFT,
+    ENDPOINT_MESSAGE_RECEIVED
 } from '../base/conference/actionTypes';
 import { getCurrentConference } from '../base/conference/functions';
 import { getURLWithoutParamsNormalized } from '../base/connection/utils';
@@ -19,10 +20,11 @@ import { getLocalizedDateFormatter } from '../base/i18n/dateUtil';
 import { translateToHTML } from '../base/i18n/functions';
 import i18next from '../base/i18n/i18next';
 import { browser } from '../base/lib-jitsi-meet';
-import { pinParticipant, raiseHandClear } from '../base/participants/actions';
+import { pinParticipant, raiseHand, raiseHandClear } from '../base/participants/actions';
 import MiddlewareRegistry from '../base/redux/MiddlewareRegistry';
 import StateListenerRegistry from '../base/redux/StateListenerRegistry';
 import { SET_REDUCED_UI } from '../base/responsive-ui/actionTypes';
+import { LOWER_HAND_MESSAGE } from '../base/tracks/constants';
 import { BUTTON_TYPES } from '../base/ui/constants.any';
 import { inIframe } from '../base/util/iframeUtils';
 import { isCalendarEnabled } from '../calendar-sync/functions';
@@ -71,6 +73,15 @@ MiddlewareRegistry.register(store => next => action => {
 
         break;
     }
+    case ENDPOINT_MESSAGE_RECEIVED: {
+        const { participant, data } = action;
+        const { dispatch } = store;
+
+        if (data.name === LOWER_HAND_MESSAGE && participant.isModerator()) {
+            dispatch(raiseHand(false));
+        }
+        break;
+    }
     }
 
     return result;
@@ -314,6 +325,7 @@ function _calendarNotification({ dispatch, getState }: IStore, eventToShow: any)
         customActionType,
         description,
         icon,
+        maxLines: 1,
         title,
         uid
     }, NOTIFICATION_TIMEOUT_TYPE.STICKY));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/connection-indicator/statsEmitter.ts b/node_modules/@jitsi/react-native-sdk/react/features/connection-indicator/statsEmitter.ts
index d0b6f90..64d654a 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/connection-indicator/statsEmitter.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/connection-indicator/statsEmitter.ts
@@ -4,6 +4,8 @@ import { IJitsiConference } from '../base/conference/reducer';
 import {
     JitsiConnectionQualityEvents
 } from '../base/lib-jitsi-meet';
+import { trackCodecChanged } from '../base/tracks/actions.any';
+import { getLocalTracks } from '../base/tracks/functions.any';
 
 /**
  * Contains all the callbacks to be notified when stats are updated.
@@ -129,6 +131,10 @@ const statsEmitter = {
             codec: allUserCodecs[localUserId as keyof typeof allUserCodecs]
         });
 
+        modifiedLocalStats.codec
+            && Object.keys(modifiedLocalStats.codec).length
+            && this._updateLocalCodecs(modifiedLocalStats.codec);
+
         this._emitStatsUpdate(localUserId, modifiedLocalStats);
 
         // Get all the unique user ids from the framerate and resolution stats
@@ -162,6 +168,33 @@ const statsEmitter = {
 
                 this._emitStatsUpdate(id, remoteUserStats);
             });
+    },
+
+    /**
+     * Updates the codec associated with the local tracks.
+     * This is currently used for torture tests.
+     *
+     * @param {any} codecs - Codec information per local SSRC.
+     * @returns {void}
+     */
+    _updateLocalCodecs(codecs: any) {
+        if (typeof APP !== 'undefined') {
+            const tracks = APP.store.getState()['features/base/tracks'];
+            const localTracks = getLocalTracks(tracks);
+
+            for (const track of localTracks) {
+                const ssrc = track.jitsiTrack?.getSsrc();
+
+                if (ssrc && Object.keys(codecs).find(key => Number(key) === ssrc)) {
+                    const codecsPerSsrc = codecs[ssrc];
+                    const codec = codecsPerSsrc.audio ?? codecsPerSsrc.video;
+
+                    if (track.codec !== codec) {
+                        APP.store.dispatch(trackCodecChanged(track.jitsiTrack, codec));
+                    }
+                }
+            }
+        }
     }
 };
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/embed-meeting/hooks.ts b/node_modules/@jitsi/react-native-sdk/react/features/embed-meeting/hooks.ts
new file mode 100644
index 0000000..532e002
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/embed-meeting/hooks.ts
@@ -0,0 +1,25 @@
+import { useSelector } from 'react-redux';
+
+import { isMobileBrowser } from '../base/environment/utils';
+import { isVpaasMeeting } from '../jaas/functions';
+
+import EmbedMeetingButton from './components/EmbedMeetingButton';
+
+const embed = {
+    key: 'embedmeeting',
+    Content: EmbedMeetingButton,
+    group: 4
+};
+
+/**
+ * A hook that returns the embed button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useEmbedButton() {
+    const _isVpaasMeeting = useSelector(isVpaasMeeting);
+
+    if (!isMobileBrowser() && !_isVpaasMeeting) {
+        return embed;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/etherpad/hooks.ts b/node_modules/@jitsi/react-native-sdk/react/features/etherpad/hooks.ts
new file mode 100644
index 0000000..bb05aa4
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/etherpad/hooks.ts
@@ -0,0 +1,24 @@
+import { useSelector } from 'react-redux';
+
+import { IReduxState } from '../app/types';
+
+import SharedDocumentButtonWeb from './components/SharedDocumentButton';
+
+const etherpad = {
+    key: 'etherpad',
+    Content: SharedDocumentButtonWeb,
+    group: 3
+};
+
+/**
+ * A hook that returns the etherpad button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useEtherpadButton() {
+    const visible = useSelector((state: IReduxState) => Boolean(state['features/etherpad'].documentUrl));
+
+    if (visible) {
+        return etherpad;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/etherpad/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/etherpad/middleware.ts
index 8ed139e..d0eae3b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/etherpad/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/etherpad/middleware.ts
@@ -1,5 +1,3 @@
-// @ts-expect-error
-import UIEvents from '../../../service/UI/UIEvents';
 import { CONFERENCE_JOIN_IN_PROGRESS } from '../base/conference/actionTypes';
 import { getCurrentConference } from '../base/conference/functions';
 import MiddlewareRegistry from '../base/redux/MiddlewareRegistry';
@@ -31,7 +29,18 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
                 const etherpadBaseUrl = sanitizeUrl(etherpadBase);
 
                 if (etherpadBaseUrl) {
-                    url = new URL(value, etherpadBaseUrl.toString()).toString();
+                    const urlObj = new URL(value, etherpadBaseUrl.toString());
+
+                    // Merge query string parameters on top of internal ones
+                    if (etherpadBaseUrl.search) {
+                        const searchParams = new URLSearchParams(urlObj.search);
+
+                        for (const [ key, val ] of new URLSearchParams(etherpadBaseUrl.search)) {
+                            searchParams.set(key, val);
+                        }
+                        urlObj.search = searchParams.toString();
+                    }
+                    url = urlObj.toString();
                 }
 
                 dispatch(setDocumentUrl(url));
@@ -41,7 +50,7 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
     }
     case TOGGLE_DOCUMENT_EDITING: {
         if (typeof APP !== 'undefined') {
-            APP.UI.emitEvent(UIEvents.ETHERPAD_CLICKED);
+            APP.UI.onEtherpadClicked();
         }
         break;
     }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/external-api/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/external-api/middleware.ts
index c058a28..cb51821 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/external-api/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/external-api/middleware.ts
@@ -21,7 +21,8 @@ import {
 import {
     getDominantSpeakerParticipant,
     getLocalParticipant,
-    getParticipantById
+    getParticipantById,
+    getParticipantDisplayName
 } from '../base/participants/functions';
 import MiddlewareRegistry from '../base/redux/MiddlewareRegistry';
 import { getBaseUrl } from '../base/util/helpers';
@@ -133,15 +134,29 @@ MiddlewareRegistry.register(store => next => action => {
         APP.API.notifyDataChannelOpened();
         break;
 
-    case KICKED_OUT:
+    case KICKED_OUT: {
+        const state = store.getState();
+        const localParticipant = getLocalParticipant(state);
+
+        if (!localParticipant) {
+            break;
+        }
+
+        const pId = action.participant.getId();
+
         APP.API.notifyKickedOut(
             {
-                id: getLocalParticipant(store.getState())?.id,
+                id: localParticipant.id,
+                name: getParticipantDisplayName(state, localParticipant.id),
                 local: true
             },
-            { id: action.participant ? action.participant.getId() : undefined }
+            {
+                id: pId,
+                name: getParticipantDisplayName(state, pId)
+            }
         );
         break;
+    }
 
     case NOTIFY_CAMERA_ERROR:
         if (action.error) {
@@ -156,14 +171,28 @@ MiddlewareRegistry.register(store => next => action => {
         }
         break;
 
-    case PARTICIPANT_KICKED:
+    case PARTICIPANT_KICKED: {
+        const state = store.getState();
+        const kickedParticipant = getParticipantById(state, action.kicked);
+        const kickerParticipant = getParticipantById(state, action.kicker);
+
+        if (!kickerParticipant || !kickedParticipant) {
+            break;
+        }
+
         APP.API.notifyKickedOut(
             {
-                id: action.kicked,
-                local: false
+                id: kickedParticipant.id,
+                local: kickedParticipant.local,
+                name: getParticipantDisplayName(state, kickedParticipant.id)
             },
-            { id: action.kicker });
+            {
+                id: kickerParticipant.id,
+                local: kickerParticipant.local,
+                name: getParticipantDisplayName(state, kickerParticipant.id)
+            });
         break;
+    }
 
     case PARTICIPANT_LEFT: {
         const { participant } = action;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/feedback/hooks.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/feedback/hooks.web.ts
new file mode 100644
index 0000000..2eb2fae
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/feedback/hooks.web.ts
@@ -0,0 +1,23 @@
+import { useSelector } from 'react-redux';
+
+import FeedbackButtonWeb from './components/FeedbackButton.web';
+import { shouldSendJaaSFeedbackMetadata } from './functions.web';
+
+const feedback = {
+    key: 'feedback',
+    Content: FeedbackButtonWeb,
+    group: 4
+};
+
+/**
+ * A hook that returns the feedback button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useFeedbackButton() {
+    const visible = useSelector(shouldSendJaaSFeedbackMetadata);
+
+    if (visible) {
+        return feedback;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/gifs/components/native/GifsMenu.tsx b/node_modules/@jitsi/react-native-sdk/react/features/gifs/components/native/GifsMenu.tsx
index 7986b4b..3bf647f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/gifs/components/native/GifsMenu.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/gifs/components/native/GifsMenu.tsx
@@ -15,51 +15,47 @@ import GifsMenuFooter from './GifsMenuFooter';
 import styles from './styles';
 
 const GifsMenu = () => {
-    const [ searchQuery, setSearchQuery ] = useState('');
-    const dispatch = useDispatch();
-    const { t } = useTranslation();
-    const rating = useSelector(getGifRating) as GiphyRating;
-    const proxyUrl = useSelector(getGiphyProxyUrl);
-
-    const options = {
-        mediaType: GiphyMediaType.Gif,
-        limit: 20,
-        rating
-    };
-
-    const content = searchQuery === ''
-        ? GiphyContent.trending(options)
-        : GiphyContent.search({
-            ...options,
-            searchQuery
-        });
-
-    const sendGif = useCallback(e => {
-        const url = getGifUrl(e.nativeEvent.media, proxyUrl);
-
-        sendAnalytics(createGifSentEvent());
-
-        dispatch(sendMessage(formatGifUrlMessage(url), true));
-        goBack();
-    }, []);
-
-    return (
-        <JitsiScreen
-            footerComponent = { GifsMenuFooter }
-            style = { styles.container }>
-            <Input
-                clearable = { true }
-                customStyles = {{ container: styles.customContainer }}
-                onChange = { setSearchQuery }
-                placeholder = { t('giphy.search') }
-                value = { searchQuery } />
-            <GiphyGridView
-                cellPadding = { 5 }
-                content = { content }
-                onMediaSelect = { sendGif }
-                style = { styles.grid } />
-        </JitsiScreen>
-    );
+	const [searchQuery, setSearchQuery] = useState('');
+	const dispatch = useDispatch();
+	const { t } = useTranslation();
+	const rating = useSelector(getGifRating) as GiphyRating;
+	const proxyUrl = useSelector(getGiphyProxyUrl);
+
+	const options = {
+		mediaType: GiphyMediaType.Gif,
+		limit: 20,
+		rating
+	};
+
+	const content =
+		searchQuery === ''
+			? GiphyContent.trending(options)
+			: GiphyContent.search({
+					...options,
+					searchQuery
+			  });
+
+	const sendGif = useCallback(e => {
+		const url = getGifUrl(e.nativeEvent.media, proxyUrl);
+
+		sendAnalytics(createGifSentEvent());
+
+		dispatch(sendMessage(formatGifUrlMessage(url), true));
+		goBack();
+	}, []);
+
+	return (
+		<JitsiScreen footerComponent={GifsMenuFooter} style={styles.container}>
+			<Input
+				clearable={true}
+				customStyles={{ container: styles.customContainer }}
+				onChange={setSearchQuery}
+				placeholder={t('giphy.search')}
+				value={searchQuery}
+			/>
+			<GiphyGridView cellPadding={5} content={content} onMediaSelect={sendGif} style={styles.grid} />
+		</JitsiScreen>
+	);
 };
 
 export default GifsMenu;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/invite/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/invite/functions.ts
index 535eea1..44147ba 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/invite/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/invite/functions.ts
@@ -427,17 +427,20 @@ export function invitePeopleAndChatRooms(
         return Promise.resolve();
     }
 
+    const headers = {
+        ...jwt ? { 'Authorization': `Bearer ${jwt}` } : {},
+        'Content-Type': 'application/json'
+    };
+
     return fetch(
-        `${inviteServiceUrl}?token=${jwt}`,
+        `${inviteServiceUrl}`,
         {
             body: JSON.stringify({
                 'invited': inviteItems,
                 'url': inviteUrl
             }),
             method: 'POST',
-            headers: {
-                'Content-Type': 'application/json'
-            }
+            headers
         }
     );
 }
@@ -544,8 +547,16 @@ export function searchDirectory( // eslint-disable-line max-params
     const query = encodeURIComponent(text);
     const queryTypesString = encodeURIComponent(JSON.stringify(queryTypes));
 
+    const headers = {
+        ...jwt ? { 'Authorization': `Bearer ${jwt}` } : {}
+    };
+
     return fetch(`${serviceUrl}?query=${query}&queryTypes=${
-        queryTypesString}&jwt=${jwt}`)
+        queryTypesString}`,
+            {
+                method: 'GET',
+                headers
+            })
             .then(response => {
                 const jsonify = response.json();
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/jaas/middleware.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/jaas/middleware.any.ts
index 4b90af7..8b7c88c 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/jaas/middleware.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/jaas/middleware.any.ts
@@ -13,7 +13,7 @@ import { getVpaasTenant, isVpaasMeeting } from './functions';
  * @returns {Function}
  */
 
-MiddlewareRegistry.register(store => next => async action => {
+MiddlewareRegistry.register(store => next => action => {
     switch (action.type) {
     case CONFERENCE_JOINED: {
         _maybeTrackVpaasConferenceJoin(store.getState());
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/jaas/middleware.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/jaas/middleware.web.ts
index 3501d63..c5941dd 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/jaas/middleware.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/jaas/middleware.web.ts
@@ -16,7 +16,7 @@ import logger from './logger';
  * @param {Store} store - The redux store.
  * @returns {Function}
  */
-MiddlewareRegistry.register(store => next => async action => {
+MiddlewareRegistry.register(store => next => action => {
     switch (action.type) {
     case CONFERENCE_JOINED: {
         const { conference } = action;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/keyboard-shortcuts/actions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/keyboard-shortcuts/actions.web.ts
index d34a9c7..c8935dd 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/keyboard-shortcuts/actions.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/keyboard-shortcuts/actions.web.ts
@@ -41,9 +41,7 @@ const initGlobalKeyboardShortcuts = () =>
                 helpCharacter: 'SPACE',
                 helpDescription: 'keyboardShortcuts.pushToTalk',
                 handler: () => {
-                    sendAnalytics(createShortcutEvent('push.to.talk', ACTION_SHORTCUT_RELEASED));
-                    logger.log('Talk shortcut released');
-                    APP.conference.muteAudio(true);
+                    // Handled directly on the global handler.
                 }
             }));
 
@@ -82,7 +80,18 @@ export const initKeyboardShortcuts = () =>
     (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         dispatch(initGlobalKeyboardShortcuts());
 
-        window.onkeyup = (e: KeyboardEvent) => {
+        const pttDelay = 50;
+        let pttTimeout: number | undefined;
+
+        // Used to chain the push to talk operations in order to fix an issue when on press we actually need to create
+        // a new track and the release happens before the track is created. In this scenario the release is ignored.
+        // The chaining would also prevent creating multiple new tracks if the space bar is pressed and released
+        // multiple times before the new track creation finish.
+        // TODO: Revisit the fix once we have better track management in LJM. It is possible that we would not need the
+        // chaining at all.
+        let mutePromise = Promise.resolve();
+
+        window.addEventListener('keyup', (e: KeyboardEvent) => {
             const state = getState();
             const enabled = areKeyboardShortcutsEnabled(state);
             const shortcuts = getKeyboardShortcuts(state);
@@ -93,12 +102,22 @@ export const initKeyboardShortcuts = () =>
 
             const key = getKeyboardKey(e).toUpperCase();
 
+            if (key === ' ') {
+                clearTimeout(pttTimeout);
+                pttTimeout = window.setTimeout(() => {
+                    sendAnalytics(createShortcutEvent('push.to.talk', ACTION_SHORTCUT_RELEASED));
+                    logger.log('Talk shortcut released');
+                    mutePromise = mutePromise.then(() =>
+                        APP.conference.muteAudio(true).catch(() => { /* nothing to be done */ }));
+                }, pttDelay);
+            }
+
             if (shortcuts.has(key)) {
                 shortcuts.get(key)?.handler(e);
             }
-        };
+        });
 
-        window.onkeydown = (e: KeyboardEvent) => {
+        window.addEventListener('keydown', (e: KeyboardEvent) => {
             const state = getState();
             const enabled = areKeyboardShortcutsEnabled(state);
 
@@ -110,11 +129,13 @@ export const initKeyboardShortcuts = () =>
             const key = getKeyboardKey(e).toUpperCase();
 
             if (key === ' ' && !focusedElement) {
+                clearTimeout(pttTimeout);
                 sendAnalytics(createShortcutEvent('push.to.talk', ACTION_SHORTCUT_PRESSED));
                 logger.log('Talk shortcut pressed');
-                APP.conference.muteAudio(false);
+                mutePromise = mutePromise.then(() =>
+                    APP.conference.muteAudio(false).catch(() => { /* nothing to be done */ }));
             } else if (key === 'ESCAPE') {
                 focusedElement?.blur();
             }
-        };
+        });
     };
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/keyboard-shortcuts/hooks.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/keyboard-shortcuts/hooks.web.ts
new file mode 100644
index 0000000..7c02225
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/keyboard-shortcuts/hooks.web.ts
@@ -0,0 +1,25 @@
+import { useSelector } from 'react-redux';
+
+import { isMobileBrowser } from '../base/environment/utils';
+
+import KeyboardShortcutsButton from './components/web/KeyboardShortcutsButton';
+import { areKeyboardShortcutsEnabled } from './functions';
+
+const shortcuts = {
+    key: 'shortcuts',
+    Content: KeyboardShortcutsButton,
+    group: 4
+};
+
+/**
+ * A hook that returns the keyboard shortcuts button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useKeyboardShortcutsButton() {
+    const _areKeyboardShortcutsEnabled = useSelector(areKeyboardShortcutsEnabled);
+
+    if (!isMobileBrowser() && _areKeyboardShortcutsEnabled) {
+        return shortcuts;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/lobby/actions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/lobby/actions.any.ts
index 085077d..873b635 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/lobby/actions.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/lobby/actions.any.ts
@@ -32,7 +32,7 @@ import { IKnockingParticipant } from './types';
  * @returns {Function}
  */
 export function joinWithPassword(password: string) {
-    return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         const conference = getCurrentConference(getState);
 
         dispatch(setPassword(conference, conference?.join, password));
@@ -79,7 +79,7 @@ export function participantIsKnockingOrUpdated(participant: IKnockingParticipant
  * @returns {Function}
  */
 export function answerKnockingParticipant(id: string, approved: boolean) {
-    return async (dispatch: IStore['dispatch']) => {
+    return (dispatch: IStore['dispatch']) => {
         dispatch(setKnockingParticipantApproval(id, approved));
         dispatch(hideNotification(LOBBY_NOTIFICATION_ID));
     };
@@ -202,7 +202,7 @@ export function setPasswordJoinFailed(failed: boolean) {
  * @returns {Function}
  */
 export function startKnocking() {
-    return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         const state = getState();
         const { membersOnly } = state['features/base/conference'];
 
@@ -287,7 +287,7 @@ export function hideLobbyScreen() {
  * @returns {Promise<void>}
  */
 export function handleLobbyChatInitialized(payload: { attendee: IParticipant; moderator: IParticipant; }) {
-    return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         const state = getState();
         const conference = getCurrentConference(state);
 
@@ -323,7 +323,7 @@ export function handleLobbyChatInitialized(payload: { attendee: IParticipant; mo
  * @returns {Promise<void>}
  */
 export function onSendMessage(message: string) {
-    return async (dispatch: IStore['dispatch']) => {
+    return (dispatch: IStore['dispatch']) => {
         dispatch(sendMessage(message));
     };
 }
@@ -349,7 +349,7 @@ export function sendLobbyChatMessage(message: Object) {
  * @returns {Function}
  */
 export function maybeSetLobbyChatMessageListener() {
-    return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         const state = getState();
         const lobbyEnabled = getLobbyEnabled(state);
 
@@ -366,7 +366,7 @@ export function maybeSetLobbyChatMessageListener() {
  * @returns {Function}
  */
 export function updateLobbyParticipantOnLeave(participantId: string) {
-    return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         const state = getState();
         const { knocking, knockingParticipants } = state['features/lobby'];
         const { lobbyMessageRecipient } = state['features/chat'];
@@ -400,7 +400,7 @@ export function updateLobbyParticipantOnLeave(participantId: string) {
  * @returns {Function}
  */
 export function setLobbyMessageListener() {
-    return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         const state = getState();
         const conference = getCurrentConference(state);
         const { enableChat = true } = getLobbyConfig(state);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/components/AudioDeviceToggleButton.ts b/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/components/AudioDeviceToggleButton.ts
index 475ec4c..9caf94f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/components/AudioDeviceToggleButton.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/components/AudioDeviceToggleButton.ts
@@ -11,20 +11,19 @@ import AudioRoutePickerDialog from './AudioRoutePickerDialog';
  * Implements an {@link AbstractButton} to open the audio device list.
  */
 class AudioDeviceToggleButton extends AbstractButton<AbstractButtonProps> {
-    accessibilityLabel = 'toolbar.accessibilityLabel.audioRoute';
-    icon = IconVolumeUp;
-    label = 'toolbar.accessibilityLabel.audioRoute';
+	accessibilityLabel = 'toolbar.accessibilityLabel.audioRoute';
+	icon = IconVolumeUp;
+	label = 'toolbar.accessibilityLabel.audioRoute';
 
-    /**
-     * Handles clicking / pressing the button, and opens the appropriate dialog.
-     *
-     * @private
-     * @returns {void}
-     */
-    _handleClick() {
-        this.props.dispatch(openSheet(AudioRoutePickerDialog));
-    }
+	/**
+	 * Handles clicking / pressing the button, and opens the appropriate dialog.
+	 *
+	 * @private
+	 * @returns {void}
+	 */
+	_handleClick() {
+		this.props.dispatch(openSheet(AudioRoutePickerDialog));
+	}
 }
 
-
 export default translate(connect()(AudioDeviceToggleButton));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/components/AudioRoutePickerDialog.tsx b/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/components/AudioRoutePickerDialog.tsx
index bb2078c..f85488f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/components/AudioRoutePickerDialog.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/components/AudioRoutePickerDialog.tsx
@@ -9,13 +9,7 @@ import BottomSheet from '../../../base/dialog/components/native/BottomSheet';
 import { bottomSheetStyles } from '../../../base/dialog/components/native/styles';
 import { translate } from '../../../base/i18n/functions';
 import Icon from '../../../base/icons/components/Icon';
-import {
-    IconBluetooth,
-    IconCar,
-    IconDeviceHeadphone,
-    IconPhoneRinging,
-    IconVolumeUp
-} from '../../../base/icons/svg';
+import { IconBluetooth, IconCar, IconDeviceHeadphone, IconPhoneRinging, IconVolumeUp } from '../../../base/icons/svg';
 import { StyleType } from '../../../base/styles/functions.any';
 import BaseTheme from '../../../base/ui/components/BaseTheme.native';
 
@@ -27,121 +21,118 @@ const { AudioMode } = NativeModules;
  * Type definition for a single entry in the device list.
  */
 interface IDevice {
-
-    /**
-     * Name of the icon which will be rendered on the right.
-     */
-    icon: Function;
-
-    /**
-     * True if the element is selected (will be highlighted in blue),
-     * false otherwise.
-     */
-    selected: boolean;
-
-    /**
-     * Text which will be rendered in the row.
-     */
-    text: string;
-
-    /**
-     * Device type.
-     */
-    type: string;
-
-    /**
-     * Unique device ID.
-     */
-    uid?: string;
+	/**
+	 * Name of the icon which will be rendered on the right.
+	 */
+	icon: Function;
+
+	/**
+	 * True if the element is selected (will be highlighted in blue),
+	 * false otherwise.
+	 */
+	selected: boolean;
+
+	/**
+	 * Text which will be rendered in the row.
+	 */
+	text: string;
+
+	/**
+	 * Device type.
+	 */
+	type: string;
+
+	/**
+	 * Unique device ID.
+	 */
+	uid?: string;
 }
 
 /**
  * "Raw" device, as returned by native.
  */
 export interface IRawDevice {
-
-    /**
-     * Display name for the device.
-     */
-    name?: string;
-
-    /**
-     * Is this device selected?
-     */
-    selected: boolean;
-
-    /**
-     * Device type.
-     */
-    type: string;
-
-    /**
-     * Unique device ID.
-     */
-    uid?: string;
+	/**
+	 * Display name for the device.
+	 */
+	name?: string;
+
+	/**
+	 * Is this device selected?
+	 */
+	selected: boolean;
+
+	/**
+	 * Device type.
+	 */
+	type: string;
+
+	/**
+	 * Unique device ID.
+	 */
+	uid?: string;
 }
 
 /**
  * {@code AudioRoutePickerDialog}'s React {@code Component} prop types.
  */
 interface IProps {
-
-    /**
-     * Object describing available devices.
-     */
-    _devices: Array<IRawDevice>;
-
-    /**
-     * Used for hiding the dialog when the selection was completed.
-     */
-    dispatch: IStore['dispatch'];
-
-    /**
-     * Invoked to obtain translated strings.
-     */
-    t: Function;
+	/**
+	 * Object describing available devices.
+	 */
+	_devices: Array<IRawDevice>;
+
+	/**
+	 * Used for hiding the dialog when the selection was completed.
+	 */
+	dispatch: IStore['dispatch'];
+
+	/**
+	 * Invoked to obtain translated strings.
+	 */
+	t: Function;
 }
 
 /**
  * {@code AudioRoutePickerDialog}'s React {@code Component} state types.
  */
 interface IState {
-
-    /**
-     * Array of available devices.
-     */
-    devices: Array<IDevice>;
+	/**
+	 * Array of available devices.
+	 */
+	devices: Array<IDevice>;
 }
 
 /**
  * Maps each device type to a display name and icon.
  */
 const deviceInfoMap = {
-    BLUETOOTH: {
-        icon: IconBluetooth,
-        text: 'audioDevices.bluetooth',
-        type: 'BLUETOOTH'
-    },
-    CAR: {
-        icon: IconCar,
-        text: 'audioDevices.car',
-        type: 'CAR'
-    },
-    EARPIECE: {
-        icon: IconPhoneRinging,
-        text: 'audioDevices.phone',
-        type: 'EARPIECE'
-    },
-    HEADPHONES: {
-        icon: IconDeviceHeadphone,
-        text: 'audioDevices.headphones',
-        type: 'HEADPHONES'
-    },
-    SPEAKER: {
-        icon: IconVolumeUp,
-        text: 'audioDevices.speaker',
-        type: 'SPEAKER'
-    }
+	BLUETOOTH: {
+		icon: IconBluetooth,
+		text: 'audioDevices.bluetooth',
+		type: 'BLUETOOTH'
+	},
+	CAR: {
+		icon: IconCar,
+		text: 'audioDevices.car',
+		type: 'CAR'
+	},
+	EARPIECE: {
+		icon: IconPhoneRinging,
+		text: 'audioDevices.phone',
+		type: 'EARPIECE',
+		selected: true
+	},
+	HEADPHONES: {
+		icon: IconDeviceHeadphone,
+		text: 'audioDevices.headphones',
+		type: 'HEADPHONES'
+	},
+	SPEAKER: {
+		icon: IconVolumeUp,
+		text: 'audioDevices.speaker',
+		type: 'SPEAKER'
+	}
 };
 
 /**
@@ -149,170 +140,159 @@ const deviceInfoMap = {
  * is required to join a conference.
  */
 class AudioRoutePickerDialog extends Component<IProps, IState> {
-    state = {
-        /**
-         * Available audio devices, it will be set in
-         * {@link #getDerivedStateFromProps()}.
-         */
-        devices: []
-    };
-
-    /**
-     * Implements React's {@link Component#getDerivedStateFromProps()}.
-     *
-     * @inheritdoc
-     */
-    static getDerivedStateFromProps(props: IProps) {
-        const { _devices: devices, t } = props;
-
-        if (!devices) {
-            return null;
-        }
-
-        const audioDevices = [];
-
-        for (const device of devices) {
-            const infoMap = deviceInfoMap[device.type as keyof typeof deviceInfoMap];
-
-            // Skip devices with unknown type.
-            if (!infoMap) {
-                // eslint-disable-next-line no-continue
-                continue;
-            }
-
-            let text = t(infoMap.text);
-
-            // iOS provides descriptive names for these, use it.
-            if ((device.type === 'BLUETOOTH' || device.type === 'CAR') && device.name) {
-                text = device.name;
-            }
-
-            if (infoMap) {
-                const info = {
-                    ...infoMap,
-                    selected: Boolean(device.selected),
-                    text,
-                    uid: device.uid
-                };
-
-                audioDevices.push(info);
-            }
-        }
-
-        // Make sure devices is alphabetically sorted.
-        return {
-            devices: _.sortBy(audioDevices, 'text')
-        };
-    }
-
-    /**
-     * Initializes a new {@code PasswordRequiredPrompt} instance.
-     *
-     * @param {IProps} props - The read-only React {@code Component} props with
-     * which the new instance is to be initialized.
-     */
-    constructor(props: IProps) {
-        super(props);
-
-        // Trigger an initial update.
-        AudioMode.updateDeviceList?.();
-    }
-
-    /**
-     * Builds and returns a function which handles the selection of a device
-     * on the sheet. The selected device will be used by {@code AudioMode}.
-     *
-     * @param {IDevice} device - Object representing the selected device.
-     * @private
-     * @returns {Function}
-     */
-    _onSelectDeviceFn(device: IDevice) {
-        return () => {
-            this.props.dispatch(hideSheet());
-            AudioMode.setAudioDevice(device.uid || device.type);
-        };
-    }
-
-    /**
-     * Renders a single device.
-     *
-     * @param {IDevice} device - Object representing a single device.
-     * @private
-     * @returns {ReactElement}
-     */
-    _renderDevice(device: IDevice) {
-        const { icon, selected, text } = device;
-        const selectedStyle = selected ? styles.selectedText : {};
-        const borderRadiusHighlightStyles = {
-            borderTopLeftRadius: 16,
-            borderTopRightRadius: 16
-        };
-        const speakerDeviceIsNotSelected = device.type !== 'SPEAKER';
-
-        return (
-            <TouchableHighlight
-                key = { device.type }
-                onPress = { this._onSelectDeviceFn(device) }
-                style = { speakerDeviceIsNotSelected && borderRadiusHighlightStyles }
-                underlayColor = { BaseTheme.palette.ui04 } >
-                <View style = { styles.deviceRow as ViewStyle } >
-                    <Icon
-                        src = { icon }
-                        style = { [ styles.deviceIcon, bottomSheetStyles.buttons.iconStyle, selectedStyle
-                        ] as StyleType[] } />
-                    <Text
-                        style = { [ styles.deviceText, bottomSheetStyles.buttons.labelStyle, selectedStyle
-                        ] as TextStyle[] } >
-                        { text }
-                    </Text>
-                </View>
-            </TouchableHighlight>
-        );
-    }
-
-    /**
-     * Renders a "fake" device row indicating there are no devices.
-     *
-     * @private
-     * @returns {ReactElement}
-     */
-    _renderNoDevices() {
-        const { t } = this.props;
-
-        return (
-            <View style = { styles.deviceRow as ViewStyle } >
-                <Icon
-                    src = { deviceInfoMap.SPEAKER.icon }
-                    style = { [ styles.deviceIcon, bottomSheetStyles.buttons.iconStyle ] as StyleType[] } />
-                <Text style = { [ styles.deviceText, bottomSheetStyles.buttons.labelStyle ] as TextStyle[] } >
-                    { t('audioDevices.none') }
-                </Text>
-            </View>
-        );
-    }
-
-    /**
-     * Implements React's {@link Component#render()}.
-     *
-     * @inheritdoc
-     * @returns {ReactElement}
-     */
-    render() {
-        const { devices } = this.state;
-        let content;
-
-        if (devices.length === 0) {
-            content = this._renderNoDevices();
-        } else {
-            content = this.state.devices.map(this._renderDevice, this);
-        }
-
-        return (
-            <BottomSheet>
-                { content }
-            </BottomSheet>
-        );
-    }
+	state = {
+		/**
+		 * Available audio devices, it will be set in
+		 * {@link #getDerivedStateFromProps()}.
+		 */
+		devices: []
+	};
+
+	/**
+	 * Implements React's {@link Component#getDerivedStateFromProps()}.
+	 *
+	 * @inheritdoc
+	 */
+	static getDerivedStateFromProps(props: IProps) {
+		const { _devices: devices, t } = props;
+		console.log('devisesssss', devices);
+
+		if (!devices) {
+			return null;
+		}
+
+		const audioDevices = [];
+
+		for (const device of devices) {
+			const infoMap = deviceInfoMap[device.type as keyof typeof deviceInfoMap];
+
+			// Skip devices with unknown type.
+			if (!infoMap) {
+				// eslint-disable-next-line no-continue
+				continue;
+			}
+
+			let text = t(infoMap.text);
+
+			// iOS provides descriptive names for these, use it.
+			if ((device.type === 'BLUETOOTH' || device.type === 'CAR') && device.name) {
+				text = device.name;
+			}
+
+			if (infoMap) {
+				const info = {
+					...infoMap,
+					selected: Boolean(device.selected),
+					text,
+					uid: device.uid
+				};
+
+				audioDevices.push(info);
+			}
+		}
+
+		console.log('devices_', audioDevices);
+
+		// Make sure devices is alphabetically sorted.
+		return {
+			devices: _.sortBy(audioDevices, 'text')
+		};
+	}
+
+	/**
+	 * Initializes a new {@code PasswordRequiredPrompt} instance.
+	 *
+	 * @param {IProps} props - The read-only React {@code Component} props with
+	 * which the new instance is to be initialized.
+	 */
+	constructor(props: IProps) {
+		super(props);
+
+		// Trigger an initial update.
+		AudioMode.updateDeviceList?.();
+	}
+
+	/**
+	 * Builds and returns a function which handles the selection of a device
+	 * on the sheet. The selected device will be used by {@code AudioMode}.
+	 *
+	 * @param {IDevice} device - Object representing the selected device.
+	 * @private
+	 * @returns {Function}
+	 */
+	_onSelectDeviceFn(device: IDevice) {
+		return () => {
+			this.props.dispatch(hideSheet());
+			AudioMode.setAudioDevice(device.uid || device.type);
+		};
+	}
+
+	/**
+	 * Renders a single device.
+	 *
+	 * @param {IDevice} device - Object representing a single device.
+	 * @private
+	 * @returns {ReactElement}
+	 */
+	_renderDevice(device: IDevice) {
+		const { icon, selected, text } = device;
+		const selectedStyle = selected ? styles.selectedText : {};
+		const borderRadiusHighlightStyles = {
+			borderTopLeftRadius: 16,
+			borderTopRightRadius: 16
+		};
+		const speakerDeviceIsNotSelected = device.type !== 'SPEAKER';
+
+		return (
+			<TouchableHighlight
+				key={device.type}
+				onPress={this._onSelectDeviceFn(device)}
+				style={speakerDeviceIsNotSelected && borderRadiusHighlightStyles}
+				underlayColor={BaseTheme.palette.ui04}>
+				<View style={styles.deviceRow as ViewStyle}>
+					<Icon src={icon} style={[styles.deviceIcon, bottomSheetStyles.buttons.iconStyle, selectedStyle] as StyleType[]} />
+					<Text style={[styles.deviceText, bottomSheetStyles.buttons.labelStyle, selectedStyle] as TextStyle[]}>{text}</Text>
+				</View>
+			</TouchableHighlight>
+		);
+	}
+
+	/**
+	 * Renders a "fake" device row indicating there are no devices.
+	 *
+	 * @private
+	 * @returns {ReactElement}
+	 */
+	_renderNoDevices() {
+		const { t } = this.props;
+
+		return (
+			<View style={styles.deviceRow as ViewStyle}>
+				<Icon src={deviceInfoMap.SPEAKER.icon} style={[styles.deviceIcon, bottomSheetStyles.buttons.iconStyle] as StyleType[]} />
+				<Text style={[styles.deviceText, bottomSheetStyles.buttons.labelStyle] as TextStyle[]}>{t('audioDevices.none')}</Text>
+			</View>
+		);
+	}
+
+	/**
+	 * Implements React's {@link Component#render()}.
+	 *
+	 * @inheritdoc
+	 * @returns {ReactElement}
+	 */
+	render() {
+		const { devices } = this.state;
+		let content;
+
+		if (devices.length === 0) {
+			content = this._renderNoDevices();
+		} else {
+			console.log('No devices found 1');
+			content = this.state.devices.map(this._renderDevice, this);
+		}
+
+		return <BottomSheet>{content}</BottomSheet>;
+	}
 }
 
 /**
@@ -322,9 +302,10 @@ class AudioRoutePickerDialog extends Component<IProps, IState> {
  * @returns {Object}
  */
 function _mapStateToProps(state: IReduxState) {
-    return {
-        _devices: state['features/mobile/audio-mode'].devices
-    };
+	console.log("state['features/mobile/audio-mode'].devices", state['features/mobile/audio-mode'].devices);
+	return {
+		_devices: state['features/mobile/audio-mode'].devices
+	};
 }
 
 export default translate(connect(_mapStateToProps)(AudioRoutePickerDialog));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/middleware.ts
index 0be196e..6431a1b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/middleware.ts
@@ -4,11 +4,7 @@ import { AnyAction } from 'redux';
 import { IStore } from '../../app/types';
 import { APP_WILL_MOUNT, APP_WILL_UNMOUNT } from '../../base/app/actionTypes';
 import { SET_AUDIO_ONLY } from '../../base/audio-only/actionTypes';
-import {
-    CONFERENCE_FAILED,
-    CONFERENCE_JOINED,
-    CONFERENCE_LEFT
-} from '../../base/conference/actionTypes';
+import { CONFERENCE_FAILED, CONFERENCE_JOINED, CONFERENCE_LEFT } from '../../base/conference/actionTypes';
 import { getCurrentConference } from '../../base/conference/functions';
 import { AUDIO_FOCUS_DISABLED } from '../../base/flags/constants';
 import { getFeatureFlag } from '../../base/flags/functions';
@@ -29,42 +25,41 @@ const AudioModeEmitter = new NativeEventEmitter(AudioMode);
  * @returns {Function}
  */
 MiddlewareRegistry.register(store => next => action => {
-    /* eslint-disable no-fallthrough */
-
-    switch (action.type) {
-    case _SET_AUDIOMODE_SUBSCRIPTIONS:
-        _setSubscriptions(store);
-        break;
-    case APP_WILL_UNMOUNT: {
-        store.dispatch({
-            type: _SET_AUDIOMODE_SUBSCRIPTIONS,
-            subscriptions: undefined
-        });
-        break;
-    }
-    case APP_WILL_MOUNT:
-        _appWillMount(store);
-    case CONFERENCE_FAILED: // eslint-disable-line no-fallthrough
-    case CONFERENCE_LEFT:
-
-    /*
-    * NOTE: We moved the audio mode setting from CONFERENCE_WILL_JOIN to
-    * CONFERENCE_JOINED because in case of a locked room, the app goes
-    * through CONFERENCE_FAILED state and gets to CONFERENCE_JOINED only
-    * after a correct password, so we want to make sure we have the correct
-    * audio mode set up when we finally get to the conf, but also make sure
-    * that the app is in the right audio mode if the user leaves the
-    * conference after the password prompt appears.
-    */
-    case CONFERENCE_JOINED:
-    case SET_AUDIO_ONLY:
-        return _updateAudioMode(store, next, action);
-
-    }
-
-    /* eslint-enable no-fallthrough */
-
-    return next(action);
+	/* eslint-disable no-fallthrough */
+
+	switch (action.type) {
+		case _SET_AUDIOMODE_SUBSCRIPTIONS:
+			_setSubscriptions(store);
+			break;
+		case APP_WILL_UNMOUNT: {
+			store.dispatch({
+				type: _SET_AUDIOMODE_SUBSCRIPTIONS,
+				subscriptions: undefined
+			});
+			break;
+		}
+		case APP_WILL_MOUNT:
+			_appWillMount(store);
+		case CONFERENCE_FAILED: // eslint-disable-line no-fallthrough
+		case CONFERENCE_LEFT:
+
+		/*
+		 * NOTE: We moved the audio mode setting from CONFERENCE_WILL_JOIN to
+		 * CONFERENCE_JOINED because in case of a locked room, the app goes
+		 * through CONFERENCE_FAILED state and gets to CONFERENCE_JOINED only
+		 * after a correct password, so we want to make sure we have the correct
+		 * audio mode set up when we finally get to the conf, but also make sure
+		 * that the app is in the right audio mode if the user leaves the
+		 * conference after the password prompt appears.
+		 */
+		case CONFERENCE_JOINED:
+		case SET_AUDIO_ONLY:
+			return _updateAudioMode(store, next, action);
+	}
+
+	/* eslint-enable no-fallthrough */
+
+	return next(action);
 });
 
 /**
@@ -77,14 +72,12 @@ MiddlewareRegistry.register(store => next => action => {
  * @returns {void}
  */
 function _appWillMount(store: IStore) {
-    const subscriptions = [
-        AudioModeEmitter.addListener(AudioMode.DEVICE_CHANGE_EVENT, _onDevicesUpdate, store)
-    ];
-
-    store.dispatch({
-        type: _SET_AUDIOMODE_SUBSCRIPTIONS,
-        subscriptions
-    });
+	const subscriptions = [AudioModeEmitter.addListener(AudioMode.DEVICE_CHANGE_EVENT, _onDevicesUpdate, store)];
+
+	store.dispatch({
+		type: _SET_AUDIOMODE_SUBSCRIPTIONS,
+		subscriptions
+	});
 }
 
 /**
@@ -95,13 +88,13 @@ function _appWillMount(store: IStore) {
  * @returns {void}
  */
 function _onDevicesUpdate(devices: any) {
-    // @ts-ignore
-    const { dispatch } = this; // eslint-disable-line @typescript-eslint/no-invalid-this
+	// @ts-ignore
+	const { dispatch } = this; // eslint-disable-line @typescript-eslint/no-invalid-this
 
-    dispatch({
-        type: _SET_AUDIOMODE_DEVICES,
-        devices
-    });
+	dispatch({
+		type: _SET_AUDIOMODE_DEVICES,
+		devices
+	});
 }
 
 /**
@@ -115,13 +108,13 @@ function _onDevicesUpdate(devices: any) {
  * @returns {void}
  */
 function _setSubscriptions({ getState }: IStore) {
-    const { subscriptions } = getState()['features/mobile/audio-mode'];
+	const { subscriptions } = getState()['features/mobile/audio-mode'];
 
-    if (subscriptions) {
-        for (const subscription of subscriptions) {
-            subscription.remove();
-        }
-    }
+	if (subscriptions) {
+		for (const subscription of subscriptions) {
+			subscription.remove();
+		}
+	}
 }
 
 /**
@@ -137,21 +130,22 @@ function _setSubscriptions({ getState }: IStore) {
  * @returns {*} The value returned by {@code next(action)}.
  */
 function _updateAudioMode({ getState }: IStore, next: Function, action: AnyAction) {
-    const result = next(action);
-    const state = getState();
-    const conference = getCurrentConference(state);
-    const { enabled: audioOnly } = state['features/base/audio-only'];
-    let mode: string;
-
-    if (getFeatureFlag(state, AUDIO_FOCUS_DISABLED, false)) {
-        return result;
-    } else if (conference) {
-        mode = audioOnly ? AudioMode.AUDIO_CALL : AudioMode.VIDEO_CALL;
-    } else {
-        mode = AudioMode.DEFAULT;
-    }
-
-    AudioMode.setMode(mode).catch((err: any) => logger.error(`Failed to set audio mode ${String(mode)}: ${err}`));
-
-    return result;
+	const result = next(action);
+	const state = getState();
+	const conference = getCurrentConference(state);
+	const { enabled: audioOnly } = state['features/base/audio-only'];
+	let mode: string;
+
+	if (getFeatureFlag(state, AUDIO_FOCUS_DISABLED, false)) {
+		return result;
+	} else if (conference) {
+		console.log('audioOnly ', audioOnly);
+		mode = audioOnly ? AudioMode.AUDIO_CALL : AudioMode.VIDEO_CALL;
+	} else {
+		mode = AudioMode.DEFAULT;
+	}
+
+	AudioMode.setMode(mode).catch((err: any) => logger.error(`Failed to set audio mode ${String(mode)}: ${err}`));
+
+	return result;
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/reducer.ts
index 929b922..30b04f4 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/audio-mode/reducer.ts
@@ -5,32 +5,35 @@ import { _SET_AUDIOMODE_DEVICES, _SET_AUDIOMODE_SUBSCRIPTIONS } from './actionTy
 import { IRawDevice } from './components/AudioRoutePickerDialog';
 
 export interface IMobileAudioModeState {
-    devices: IRawDevice[];
-    subscriptions: {
-        remove: Function;
-    }[];
+	devices: IRawDevice[];
+	subscriptions: {
+		remove: Function;
+	}[];
 }
 
 const DEFAULT_STATE = {
-    devices: [],
-    subscriptions: []
+	devices: [],
+	subscriptions: []
 };
 
-ReducerRegistry.register<IMobileAudioModeState>('features/mobile/audio-mode',
-(state = DEFAULT_STATE, action): IMobileAudioModeState => {
-    switch (action.type) {
-    case _SET_AUDIOMODE_DEVICES: {
-        const { devices } = action;
+ReducerRegistry.register<IMobileAudioModeState>(
+	'features/mobile/audio-mode',
+	(state = DEFAULT_STATE, action): IMobileAudioModeState => {
+		switch (action.type) {
+			case _SET_AUDIOMODE_DEVICES: {
+				const { devices } = action;
+				console.log('Devices:', devices);
 
-        if (equals(state.devices, devices)) {
-            return state;
-        }
+				if (equals(state.devices, devices)) {
+					return state;
+				}
 
-        return set(state, 'devices', devices);
-    }
-    case _SET_AUDIOMODE_SUBSCRIPTIONS:
-        return set(state, 'subscriptions', action.subscriptions);
-    }
+				return set(state, 'devices', devices);
+			}
+			case _SET_AUDIOMODE_SUBSCRIPTIONS:
+				return set(state, 'subscriptions', action.subscriptions);
+		}
 
-    return state;
-});
+		return state;
+	}
+);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/actionTypes.ts b/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/actionTypes.ts
index a672e62..8f19641 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/actionTypes.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/actionTypes.ts
@@ -18,14 +18,3 @@ export const READY_TO_CLOSE = 'READY_TO_CLOSE';
     */
 export const SCREEN_SHARE_PARTICIPANTS_UPDATED
     = 'SCREEN_SHARE_PARTICIPANTS_UPDATED';
-
-/**
- * The type of (redux) action which signals that a custom button from the overflow menu was pressed.
- *
- * @returns {{
- *      type: CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED,
- *      id: string,
- *      text: string
- * }}
- */
-export const CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED = 'CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/actions.ts
index 7614062..d9f9515 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/actions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/actions.ts
@@ -1,8 +1,4 @@
-import {
-    CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED,
-    READY_TO_CLOSE,
-    SCREEN_SHARE_PARTICIPANTS_UPDATED
-} from './actionTypes';
+import { READY_TO_CLOSE, SCREEN_SHARE_PARTICIPANTS_UPDATED } from './actionTypes';
 
 
 /**
@@ -35,22 +31,3 @@ export function setParticipantsWithScreenShare(participantIds: Array<string>) {
         participantIds
     };
 }
-
-/**
- * Creates a (redux) action which that a custom overflow menu button was pressed.
- *
- * @param {string} id - The id for the custom button.
- * @param {string} text - The label for the custom button.
- * @returns {{
- *     type: CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED,
- *     id: string,
- *     text: string
- * }}
- */
-export function customOverflowMenuButtonPressed(id: string, text: string) {
-    return {
-        type: CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED,
-        id,
-        text
-    };
-}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/middleware.ts
index 7c1c1f6..2ddf5d9 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/external-api/middleware.ts
@@ -52,15 +52,13 @@ import { ITrack } from '../../base/tracks/types';
 import { CLOSE_CHAT, OPEN_CHAT } from '../../chat/actionTypes';
 import { closeChat, openChat, sendMessage, setPrivateMessageRecipient } from '../../chat/actions.native';
 import { setRequestingSubtitles } from '../../subtitles/actions.any';
+import { CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED } from '../../toolbox/actionTypes';
 import { muteLocal } from '../../video-menu/actions.native';
 import { ENTER_PICTURE_IN_PICTURE } from '../picture-in-picture/actionTypes';
 // @ts-ignore
 import { isExternalAPIAvailable } from '../react-native-sdk/functions';
 
-import {
-    CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED,
-    READY_TO_CLOSE
-} from './actionTypes';
+import { READY_TO_CLOSE } from './actionTypes';
 import { setParticipantsWithScreenShare } from './actions';
 import { participantToParticipantInfo, sendEvent } from './functions';
 import logger from './logger';
@@ -82,12 +80,6 @@ const CHAT_TOGGLED = 'CHAT_TOGGLED';
  */
 const CONFERENCE_TERMINATED = 'CONFERENCE_TERMINATED';
 
-/**
- * Event which will be emitted on the native side to indicate that the custom overflow menu button was pressed.
- */
-const CUSTOM_MENU_BUTTON_PRESSED = 'CUSTOM_MENU_BUTTON_PRESSED';
-
-
 /**
  * Event which will be emitted on the native side to indicate a message was received
  * through the channel.
@@ -199,7 +191,7 @@ externalAPIEnabled && MiddlewareRegistry.register(store => next => action => {
 
         sendEvent(
             store,
-            CUSTOM_MENU_BUTTON_PRESSED,
+            CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED,
             {
                 id,
                 text
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/components/HeaderNavigationButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/components/HeaderNavigationButton.tsx
index c474fbe..0db3153 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/components/HeaderNavigationButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/components/HeaderNavigationButton.tsx
@@ -21,6 +21,11 @@ interface IProps {
      */
     disabled?: boolean;
 
+    /**
+     * ID of the header navigation button.
+     */
+    id?: string;
+
     /**
      * Label of the button.
      */
@@ -47,7 +52,7 @@ interface IProps {
     twoActions?: boolean;
 }
 
-const HeaderNavigationButton = ({ color, disabled, label, onPress, src, style, twoActions }: IProps) => {
+const HeaderNavigationButton = ({ color, id, disabled, label, onPress, src, style, twoActions }: IProps) => {
 
     let btnStyle;
     let labelStyle;
@@ -70,6 +75,7 @@ const HeaderNavigationButton = ({ color, disabled, label, onPress, src, style, t
                 src ? (
                     <IconButton
                         color = { color }
+                        id = { id }
                         onPress = { onPress }
                         size = { 24 }
                         src = { src }
@@ -80,6 +86,7 @@ const HeaderNavigationButton = ({ color, disabled, label, onPress, src, style, t
                 ) : (
                     <Button
                         disabled = { disabled }
+                        id = { id }
                         labelKey = { label }
                         labelStyle = { labelStyle }
                         onClick = { onPress }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/components/RootNavigationContainer.tsx b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/components/RootNavigationContainer.tsx
index 47e8b76..d09c29b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/components/RootNavigationContainer.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/components/RootNavigationContainer.tsx
@@ -9,6 +9,7 @@ import DialInSummary from '../../../invite/components/dial-in-summary/native/Dia
 import Prejoin from '../../../prejoin/components/native/Prejoin';
 import UnsafeRoomWarning from '../../../prejoin/components/native/UnsafeRoomWarning';
 import { isUnsafeRoomWarningEnabled } from '../../../prejoin/functions';
+import VisitorsQueue from '../../../visitors/components/native/VisitorsQueue';
 // eslint-disable-next-line
 // @ts-ignore
 import WelcomePage from '../../../welcome/components/WelcomePage';
@@ -23,6 +24,7 @@ import {
     navigationContainerTheme,
     preJoinScreenOptions,
     unsafeMeetingScreenOptions,
+    visitorsScreenOptions,
     welcomeScreenOptions
 } from '../screenOptions';
 
@@ -105,6 +107,10 @@ const RootNavigationContainer = ({ dispatch, isUnsafeRoomWarningAvailable, isWel
                         name = { screen.unsafeRoomWarning }
                         options = { unsafeMeetingScreenOptions } />
                 }
+                <RootStack.Screen
+                    component = { VisitorsQueue }
+                    name = { screen.visitorsQueue }
+                    options = { visitorsScreenOptions } />
                 <RootStack.Screen
                     component = { ConferenceNavigationContainer }
                     name = { screen.conference.root }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/functions.tsx b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/functions.tsx
index d080e76..48bafc4 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/functions.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/functions.tsx
@@ -11,7 +11,7 @@ import { getFeatureFlag } from '../../base/flags/functions';
 import { IconCloseLarge } from '../../base/icons/svg';
 import { toState } from '../../base/redux/functions';
 import { cancelKnocking } from '../../lobby/actions.native';
-import { isPrejoinEnabledInConfig } from '../../prejoin/functions';
+import { isPrejoinEnabledInConfig } from '../../prejoin/functions.native';
 
 import HeaderNavigationButton from './components/HeaderNavigationButton';
 
@@ -28,6 +28,7 @@ export function screenHeaderCloseButton(goBack: (e?: GestureResponderEvent | Rea
     if (Platform.OS === 'ios') {
         return (
             <HeaderNavigationButton
+                id = { 'close-screen-button' }
                 label = { t('dialog.close') }
                 onPress = { goBack } />
         );
@@ -35,6 +36,7 @@ export function screenHeaderCloseButton(goBack: (e?: GestureResponderEvent | Rea
 
     return (
         <HeaderNavigationButton
+            id = { 'close-screen-button' }
             onPress = { goBack }
             src = { IconCloseLarge } />
     );
@@ -71,6 +73,7 @@ export function lobbyScreenHeaderCloseButton() {
     if (Platform.OS === 'ios') {
         return (
             <HeaderNavigationButton
+                id = { 'close-screen-button' }
                 label = { t('dialog.close') }
                 onPress = { goBack } />
         );
@@ -78,27 +81,8 @@ export function lobbyScreenHeaderCloseButton() {
 
     return (
         <HeaderNavigationButton
+            id = { 'close-screen-button' }
             onPress = { goBack }
             src = { IconCloseLarge } />
     );
 }
-
-/**
- * Returns true if we should auto-knock in case prejoin is enabled for the room.
- *
- * @param {Function|Object} stateful - The redux state or {@link getState}
- * function.
- * @returns {boolean}
- */
-export function shouldEnableAutoKnock(stateful: IStateful) {
-    const state = toState(stateful);
-    const { displayName } = state['features/base/settings'];
-
-    if (isPrejoinPageEnabled(state)) {
-        if (displayName) {
-            return true;
-        }
-    } else {
-        return false;
-    }
-}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/routes.ts b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/routes.ts
index c2fb4b0..19faa61 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/routes.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/routes.ts
@@ -44,6 +44,7 @@ export const screen = {
         profile: 'Profile'
     },
     unsafeRoomWarning: 'Unsafe Room Warning',
+    visitorsQueue: 'Visitors Queue',
     welcome: {
         main: 'Welcome',
         tabs: {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/screenOptions.ts b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/screenOptions.ts
index 2eafbf0..93e91e8 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/screenOptions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/navigation/screenOptions.ts
@@ -55,6 +55,11 @@ export const welcomeScreenOptions = {
  */
 export const conferenceScreenOptions = fullScreenOptions;
 
+/**
+ * Screen options for visitors queue.
+ */
+export const visitorsScreenOptions = fullScreenOptions;
+
 /**
  * Tab bar options for chat screen.
  */
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/proximity/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/mobile/proximity/middleware.ts
index e11eb76..23703f3 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/proximity/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/proximity/middleware.ts
@@ -10,14 +10,14 @@ import StateListenerRegistry from '../../base/redux/StateListenerRegistry';
  * functionality is  enabled when the current audio device is the earpiece.
  */
 StateListenerRegistry.register(
-    /* selector */ state => {
-        const { devices } = state['features/mobile/audio-mode'];
-        const selectedDevice = devices.filter(d => d.selected)[0];
-        const conference = getCurrentConference(state);
+	/* selector */ state => {
+		const { devices } = state['features/mobile/audio-mode'];
+		const selectedDevice = devices.filter(d => d.selected)[0];
+		const conference = getCurrentConference(state);
 
-        return Boolean(conference && selectedDevice?.type === 'EARPIECE');
-    },
-    /* listener */ proximityEnabled => _setProximityEnabled(proximityEnabled)
+		return Boolean(conference && selectedDevice?.type === 'EARPIECE');
+	},
+	/* listener */ proximityEnabled => _setProximityEnabled(proximityEnabled)
 );
 
 /**
@@ -30,5 +30,5 @@ StateListenerRegistry.register(
  * @returns {void}
  */
 function _setProximityEnabled(enabled: boolean) {
-    NativeModules.Proximity.setEnabled(Boolean(enabled));
+	NativeModules.Proximity.setEnabled(Boolean(enabled));
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/mobile/react-native-sdk/middleware.js b/node_modules/@jitsi/react-native-sdk/react/features/mobile/react-native-sdk/middleware.js
index ab74289..a8922e7 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/mobile/react-native-sdk/middleware.js
+++ b/node_modules/@jitsi/react-native-sdk/react/features/mobile/react-native-sdk/middleware.js
@@ -4,7 +4,8 @@ import {
     CONFERENCE_FOCUSED,
     CONFERENCE_JOINED,
     CONFERENCE_LEFT,
-    CONFERENCE_WILL_JOIN
+    CONFERENCE_WILL_JOIN,
+    ENDPOINT_MESSAGE_RECEIVED
 } from '../../base/conference/actionTypes';
 import { SET_AUDIO_MUTED, SET_VIDEO_MUTED } from '../../base/media/actionTypes';
 import { PARTICIPANT_JOINED, PARTICIPANT_LEFT } from '../../base/participants/actionTypes';
@@ -29,34 +30,43 @@ const externalAPIEnabled = isExternalAPIAvailable();
 
     switch (type) {
     case SET_AUDIO_MUTED:
-        rnSdkHandlers?.onAudioMutedChanged && rnSdkHandlers?.onAudioMutedChanged(action.muted);
+        rnSdkHandlers?.onAudioMutedChanged?.(action.muted);
         break;
     case SET_VIDEO_MUTED:
-        rnSdkHandlers?.onVideoMutedChanged && rnSdkHandlers?.onVideoMutedChanged(Boolean(action.muted));
+        rnSdkHandlers?.onVideoMutedChanged?.(Boolean(action.muted));
         break;
     case CONFERENCE_BLURRED:
-        rnSdkHandlers?.onConferenceBlurred && rnSdkHandlers?.onConferenceBlurred();
+        rnSdkHandlers?.onConferenceBlurred?.();
         break;
     case CONFERENCE_FOCUSED:
-        rnSdkHandlers?.onConferenceFocused && rnSdkHandlers?.onConferenceFocused();
+        rnSdkHandlers?.onConferenceFocused?.();
         break;
     case CONFERENCE_JOINED:
-        rnSdkHandlers?.onConferenceJoined && rnSdkHandlers?.onConferenceJoined();
+        rnSdkHandlers?.onConferenceJoined?.();
         break;
     case CONFERENCE_LEFT:
         //  Props are torn down at this point, perhaps need to leave this one out
         break;
     case CONFERENCE_WILL_JOIN:
-        rnSdkHandlers?.onConferenceWillJoin && rnSdkHandlers?.onConferenceWillJoin();
+        rnSdkHandlers?.onConferenceWillJoin?.();
         break;
     case ENTER_PICTURE_IN_PICTURE:
-        rnSdkHandlers?.onEnterPictureInPicture && rnSdkHandlers?.onEnterPictureInPicture();
+        rnSdkHandlers?.onEnterPictureInPicture?.();
         break;
+    case ENDPOINT_MESSAGE_RECEIVED: {
+        const { data, participant } = action;
+
+        rnSdkHandlers?.onEndpointMessageReceived?.({
+            data,
+            participant
+        });
+        break;
+    }
     case PARTICIPANT_JOINED: {
         const { participant } = action;
         const participantInfo = participantToParticipantInfo(participant);
 
-        rnSdkHandlers?.onParticipantJoined && rnSdkHandlers?.onParticipantJoined(participantInfo);
+        rnSdkHandlers?.onParticipantJoined?.(participantInfo);
         break;
     }
     case PARTICIPANT_LEFT: {
@@ -64,11 +74,11 @@ const externalAPIEnabled = isExternalAPIAvailable();
 
         const { id } = participant ?? {};
 
-        rnSdkHandlers?.onParticipantLeft && rnSdkHandlers?.onParticipantLeft({ id });
+        rnSdkHandlers?.onParticipantLeft?.({ id });
         break;
     }
     case READY_TO_CLOSE:
-        rnSdkHandlers?.onReadyToClose && rnSdkHandlers?.onReadyToClose();
+        rnSdkHandlers?.onReadyToClose?.();
         break;
     }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/no-audio-signal/middleware.tsx b/node_modules/@jitsi/react-native-sdk/react/features/no-audio-signal/middleware.tsx
index 96afdb9..5ff5416 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/no-audio-signal/middleware.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/no-audio-signal/middleware.tsx
@@ -18,7 +18,7 @@ import DialInLink from './components/DialInLink';
 import { NO_AUDIO_SIGNAL_SOUND_ID } from './constants';
 import { NO_AUDIO_SIGNAL_SOUND_FILE } from './sounds';
 
-MiddlewareRegistry.register(store => next => async action => {
+MiddlewareRegistry.register(store => next => action => {
     const result = next(action);
     const { dispatch } = store;
 
@@ -107,7 +107,7 @@ async function _handleNoAudioSignalNotification({ dispatch, getState }: IStore,
             } ];
         }
 
-        const notification = await dispatch(showNotification({
+        const notification = dispatch(showNotification({
             titleKey: 'toolbar.noAudioSignalTitle',
             description: <DialInLink />,
             descriptionKey,
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/noise-detection/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/noise-detection/middleware.ts
index d41f87a..b144722 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/noise-detection/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/noise-detection/middleware.ts
@@ -36,8 +36,8 @@ MiddlewareRegistry.register(store => next => action => {
                 }
             });
         conference.on(
-            JitsiConferenceEvents.NOISY_MIC, async () => {
-                const notification = await dispatch(showNotification({
+            JitsiConferenceEvents.NOISY_MIC, () => {
+                const notification = dispatch(showNotification({
                     titleKey: 'toolbar.noisyAudioInputTitle',
                     descriptionKey: 'toolbar.noisyAudioInputDesc'
                 }, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/native/Notification.tsx b/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/native/Notification.tsx
index a218fe3..5aae11b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/native/Notification.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/native/Notification.tsx
@@ -14,6 +14,7 @@ import BaseTheme from '../../../base/ui/components/BaseTheme.native';
 import Button from '../../../base/ui/components/native/Button';
 import IconButton from '../../../base/ui/components/native/IconButton';
 import { BUTTON_MODES, BUTTON_TYPES } from '../../../base/ui/constants.native';
+import { CHAR_LIMIT } from '../../../chat/constants';
 import { replaceNonUnicodeEmojis } from '../../../chat/functions';
 import { NOTIFICATION_ICON, NOTIFICATION_TYPE } from '../../constants';
 import { INotificationProps } from '../../types';
@@ -152,15 +153,18 @@ const Notification = ({
         if (descriptionArray?.length) {
             return (
                 <>
-                    <Text style = { styles.contentTextTitle as TextStyle }>
-                        {titleText}
+                    <Text
+                        numberOfLines = { 1 }
+                        style = { styles.contentTextTitle as TextStyle }>
+                        { titleText }
                     </Text>
                     {
                         descriptionArray.map((line, index) => (
                             <Text
                                 key = { index }
+                                numberOfLines = { 3 }
                                 style = { styles.contentText }>
-                                {replaceNonUnicodeEmojis(line)}
+                                { line.length >= CHAR_LIMIT ? line : replaceNonUnicodeEmojis(line) }
                             </Text>
                         ))
                     }
@@ -169,8 +173,10 @@ const Notification = ({
         }
 
         return (
-            <Text style = { styles.contentTextTitle as TextStyle }>
-                {titleText}
+            <Text
+                numberOfLines = { 1 }
+                style = { styles.contentTextTitle as TextStyle }>
+                { titleText }
             </Text>
         );
     };
@@ -199,10 +205,10 @@ const Notification = ({
                 <View
                     pointerEvents = 'box-none'
                     style = { styles.contentContainer }>
-                    {_renderContent()}
+                    { _renderContent() }
                 </View>
                 <View style = { styles.btnContainer as ViewStyle }>
-                    {mapAppearanceToButtons()}
+                    { mapAppearanceToButtons() }
                 </View>
             </View>
             <IconButton
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/native/styles.ts b/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/native/styles.ts
index 6c56d12..e4a8ae5 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/native/styles.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/native/styles.ts
@@ -3,22 +3,19 @@ import BaseTheme from '../../../base/ui/components/BaseTheme.native';
 const contentColumn = {
     flex: 1,
     flexDirection: 'column',
-    marginLeft: BaseTheme.spacing[2]
+    paddingLeft: BaseTheme.spacing[2]
 };
 
 const notification = {
-    display: 'flex',
     backgroundColor: BaseTheme.palette.ui10,
     borderRadius: BaseTheme.shape.borderRadius,
     borderLeftColor: BaseTheme.palette.link01Active,
-    borderLeftWidth: 4,
+    borderLeftWidth: BaseTheme.spacing[1],
+    display: 'flex',
     flexDirection: 'row',
-    maxHeight: 120,
-    height: 'auto',
-    marginBottom: BaseTheme.spacing[2],
-    marginHorizontal: BaseTheme.spacing[2],
-    maxWidth: 400,
-    width: 'auto'
+    marginVertical: BaseTheme.spacing[1],
+    maxWidth: 416,
+    width: '100%'
 };
 
 /**
@@ -43,20 +40,20 @@ export default {
      */
 
     contentContainer: {
-        marginTop: BaseTheme.spacing[2]
+        paddingHorizontal: BaseTheme.spacing[2]
     },
 
     contentText: {
         color: BaseTheme.palette.text04,
-        marginLeft: BaseTheme.spacing[6],
-        marginTop: BaseTheme.spacing[1]
+        paddingLeft: BaseTheme.spacing[5],
+        paddingTop: BaseTheme.spacing[1]
     },
 
     contentTextTitle: {
         color: BaseTheme.palette.text04,
-        marginLeft: BaseTheme.spacing[6],
         fontWeight: 'bold',
-        marginTop: BaseTheme.spacing[1]
+        paddingLeft: BaseTheme.spacing[5],
+        paddingTop: BaseTheme.spacing[2]
     },
 
     /**
@@ -90,19 +87,20 @@ export default {
     },
 
     iconContainer: {
-        left: BaseTheme.spacing[1],
         position: 'absolute',
-        top: BaseTheme.spacing[2]
+        left: BaseTheme.spacing[2],
+        top: 12
     },
 
     btn: {
-        marginLeft: BaseTheme.spacing[4]
+        paddingLeft: BaseTheme.spacing[3]
     },
 
     btnContainer: {
         display: 'flex',
         flexDirection: 'row',
-        marginLeft: BaseTheme.spacing[1]
+        paddingLeft: BaseTheme.spacing[4],
+        paddingTop: BaseTheme.spacing[1]
     },
 
     withToolbox: {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/web/Notification.tsx b/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/web/Notification.tsx
index f61742a..bc27bd6 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/web/Notification.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/notifications/components/web/Notification.tsx
@@ -178,6 +178,7 @@ const Notification = ({
     description,
     descriptionArguments,
     descriptionKey,
+    disableClosing,
     hideErrorSupportLink,
     icon,
     onDismissed,
@@ -336,14 +337,16 @@ const Notification = ({
                         ))}
                     </div>
                 </div>
-                <Icon
-                    className = { classes.closeIcon }
-                    color = { theme.palette.icon04 }
-                    id = 'close-notification'
-                    onClick = { onDismiss }
-                    size = { 20 }
-                    src = { IconCloseLarge }
-                    testId = { `${titleKey || descriptionKey}-dismiss` } />
+                { !disableClosing && (
+                    <Icon
+                        className = { classes.closeIcon }
+                        color = { theme.palette.icon04 }
+                        id = 'close-notification'
+                        onClick = { onDismiss }
+                        size = { 20 }
+                        src = { IconCloseLarge }
+                        testId = { `${titleKey || descriptionKey}-dismiss` } />
+                )}
             </div>
         </div>
     );
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/notifications/constants.ts b/node_modules/@jitsi/react-native-sdk/react/features/notifications/constants.ts
index fae0995..7bf47d8 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/notifications/constants.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/notifications/constants.ts
@@ -11,12 +11,12 @@ export const NOTIFICATION_TIMEOUT = {
 /**
  * Notification timeout type.
  */
-export const NOTIFICATION_TIMEOUT_TYPE = {
-    SHORT: 'short',
-    MEDIUM: 'medium',
-    LONG: 'long',
-    STICKY: 'sticky'
-};
+export enum NOTIFICATION_TIMEOUT_TYPE {
+    LONG = 'long',
+    MEDIUM = 'medium',
+    SHORT = 'short',
+    STICKY = 'sticky'
+}
 
 /**
  * The set of possible notification types.
@@ -104,12 +104,19 @@ export const RAISE_HAND_NOTIFICATION_ID = 'RAISE_HAND_NOTIFICATION';
 export const SALESFORCE_LINK_NOTIFICATION_ID = 'SALESFORCE_LINK_NOTIFICATION';
 
 /**
- * The identifier of the lobby notification.
+ * The identifier of the visitors promotion notification.
  *
  * @type {string}
  */
 export const VISITORS_PROMOTION_NOTIFICATION_ID = 'VISITORS_PROMOTION_NOTIFICATION';
 
+/**
+ * The identifier of the visitors notification indicating the meeting is not live.
+ *
+ * @type {string}
+ */
+export const VISITORS_NOT_LIVE_NOTIFICATION_ID = 'VISITORS_NOT_LIVE_NOTIFICATION_ID';
+
 /**
  * Amount of participants beyond which no join notification will be emitted.
  */
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/notifications/types.ts b/node_modules/@jitsi/react-native-sdk/react/features/notifications/types.ts
index a60148b..224077d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/notifications/types.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/notifications/types.ts
@@ -9,6 +9,7 @@ export interface INotificationProps {
     description?: string | React.ReactNode;
     descriptionArguments?: Object;
     descriptionKey?: string;
+    disableClosing?: boolean;
     hideErrorSupportLink?: boolean;
     icon?: string;
     maxLines?: number;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/overlay/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/overlay/middleware.ts
index db70a7d..58df9ee 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/overlay/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/overlay/middleware.ts
@@ -1,5 +1,5 @@
 import { IStore } from '../app/types';
-import { JitsiConferenceErrors } from '../base/lib-jitsi-meet';
+import { JitsiConferenceErrors, JitsiConnectionErrors } from '../base/lib-jitsi-meet';
 import {
     isFatalJitsiConferenceError,
     isFatalJitsiConnectionError
@@ -8,7 +8,6 @@ import StateListenerRegistry from '../base/redux/StateListenerRegistry';
 
 import { openPageReloadDialog } from './actions';
 
-
 /**
  * Error type. Basically like Error, but augmented with a recoverable property.
  */
@@ -34,6 +33,7 @@ type ErrorType = {
  * List of errors that are not fatal (or handled differently) so then the page reload dialog won't kick in.
  */
 const RN_NO_RELOAD_DIALOG_ERRORS = [
+    JitsiConnectionErrors.NOT_LIVE_ERROR,
     JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED,
     JitsiConferenceErrors.CONFERENCE_DESTROYED,
     JitsiConferenceErrors.CONNECTION_ERROR,
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/ContextMenuMore.tsx b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/ContextMenuMore.tsx
index 9a39e73..08c04cd 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/ContextMenuMore.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/ContextMenuMore.tsx
@@ -15,12 +15,16 @@ import {
     isEnabled as isAvModerationEnabled,
     isSupported as isAvModerationSupported
 } from '../../../av-moderation/functions';
+import { getCurrentConference } from '../../../base/conference/functions';
 import { hideSheet, openDialog } from '../../../base/dialog/actions';
 import BottomSheet from '../../../base/dialog/components/native/BottomSheet';
 import Icon from '../../../base/icons/components/Icon';
-import { IconCheck, IconVideoOff } from '../../../base/icons/svg';
+import { IconCheck, IconRaiseHand, IconVideoOff } from '../../../base/icons/svg';
 import { MEDIA_TYPE } from '../../../base/media/constants';
-import { getParticipantCount, isEveryoneModerator } from '../../../base/participants/functions';
+import { raiseHand } from '../../../base/participants/actions';
+import { getParticipantCount, getRaiseHandsQueue, isEveryoneModerator, isLocalParticipantModerator }
+    from '../../../base/participants/functions';
+import { LOWER_HAND_MESSAGE } from '../../../base/tracks/constants';
 import MuteEveryonesVideoDialog
     from '../../../video-menu/components/native/MuteEveryonesVideoDialog';
 
@@ -32,6 +36,14 @@ export const ContextMenuMore = () => {
         dispatch(openDialog(MuteEveryonesVideoDialog));
         dispatch(hideSheet());
     }, [ dispatch ]);
+    const conference = useSelector(getCurrentConference);
+    const raisedHandsQueue = useSelector(getRaiseHandsQueue);
+    const moderator = useSelector(isLocalParticipantModerator);
+    const lowerAllHands = useCallback(() => {
+        dispatch(raiseHand(false));
+        conference?.sendEndpointMessage('', { name: LOWER_HAND_MESSAGE });
+        dispatch(hideSheet());
+    }, [ dispatch ]);
     const { t } = useTranslation();
 
     const isModerationSupported = useSelector((state: IReduxState) => isAvModerationSupported()(state));
@@ -59,6 +71,14 @@ export const ContextMenuMore = () => {
                     src = { IconVideoOff } />
                 <Text style = { styles.contextMenuItemText }>{t('participantsPane.actions.stopEveryonesVideo')}</Text>
             </TouchableOpacity>
+            { moderator && raisedHandsQueue.length !== 0 && <TouchableOpacity
+                onPress = { lowerAllHands }
+                style = { styles.contextMenuItem as ViewStyle }>
+                <Icon
+                    size = { 24 }
+                    src = { IconRaiseHand } />
+                <Text style = { styles.contextMenuItemText }>{t('participantsPane.actions.lowerAllHands')}</Text>
+            </TouchableOpacity> }
             {isModerationSupported && ((participantCount === 1 || !allModerators)) && <>
                 {/* @ts-ignore */}
                 <Divider style = { styles.divider } />
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/MeetingParticipantItem.tsx b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/MeetingParticipantItem.tsx
index 67c817f..8cacf7c 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/MeetingParticipantItem.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/MeetingParticipantItem.tsx
@@ -2,9 +2,12 @@ import React, { PureComponent } from 'react';
 import { connect } from 'react-redux';
 
 import { IReduxState, IStore } from '../../../app/types';
+import { getSsrcRewritingFeatureFlag } from '../../../base/config/functions.any';
 import { translate } from '../../../base/i18n/functions';
+import { MEDIA_TYPE } from '../../../base/media/constants';
 import {
     getLocalParticipant,
+    getMutedStateByParticipantAndMediaType,
     getParticipantById,
     getParticipantDisplayName,
     hasRaisedHand,
@@ -166,8 +169,12 @@ function mapStateToProps(state: IReduxState, ownProps: any) {
     const { participant } = ownProps;
     const { ownerId } = state['features/shared-video'];
     const localParticipantId = getLocalParticipant(state)?.id;
-    const _isAudioMuted = Boolean(participant && isParticipantAudioMuted(participant, state));
-    const _isVideoMuted = isParticipantVideoMuted(participant, state);
+    const _isAudioMuted = getSsrcRewritingFeatureFlag(state)
+        ? Boolean(participant && getMutedStateByParticipantAndMediaType(state, participant, MEDIA_TYPE.AUDIO))
+        : Boolean(participant && isParticipantAudioMuted(participant, state));
+    const _isVideoMuted = getSsrcRewritingFeatureFlag(state)
+        ? Boolean(participant && getMutedStateByParticipantAndMediaType(state, participant, MEDIA_TYPE.VIDEO))
+        : isParticipantVideoMuted(participant, state);
     const audioMediaState = getParticipantAudioMediaState(participant, _isAudioMuted, state);
     const videoMediaState = getParticipantVideoMediaState(participant, _isVideoMuted, state);
     const { disableModeratorIndicator } = state['features/base/config'];
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/MeetingParticipantList.tsx b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/MeetingParticipantList.tsx
index c539dae..6f16f9c 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/MeetingParticipantList.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/MeetingParticipantList.tsx
@@ -7,19 +7,16 @@ import { IReduxState } from '../../../app/types';
 import Icon from '../../../base/icons/components/Icon';
 import { IconAddUser } from '../../../base/icons/svg';
 import {
-    addPeopleFeatureControl,
-    getLocalParticipant,
-    getParticipantCountWithFake,
-    getRemoteParticipants,
-    setShareDialogVisiblity
+	addPeopleFeatureControl,
+	getLocalParticipant,
+	getParticipantCountWithFake,
+	getRemoteParticipants,
+	setShareDialogVisiblity
 } from '../../../base/participants/functions';
 import Button from '../../../base/ui/components/native/Button';
 import Input from '../../../base/ui/components/native/Input';
 import { BUTTON_TYPES } from '../../../base/ui/constants.native';
-import {
-    getBreakoutRooms,
-    getCurrentRoomId
-} from '../../../breakout-rooms/functions';
+import { getBreakoutRooms, getCurrentRoomId } from '../../../breakout-rooms/functions';
 import { doInvitePeople } from '../../../invite/actions.native';
 import { getInviteOthersControl } from '../../../share-room/functions';
 import { participantMatchesSearch, shouldRenderInviteButton } from '../../functions';
@@ -27,90 +24,73 @@ import { participantMatchesSearch, shouldRenderInviteButton } from '../../functi
 import MeetingParticipantItem from './MeetingParticipantItem';
 import styles from './styles';
 
-
 const MeetingParticipantList = () => {
-    const currentRoomId = useSelector(getCurrentRoomId);
-    const currentRoom = useSelector(getBreakoutRooms)[currentRoomId];
-    const dispatch = useDispatch();
-    const inviteOthersControl = useSelector(getInviteOthersControl);
-    const isAddPeopleFeatureEnabled = useSelector(addPeopleFeatureControl);
-    const keyExtractor
-        = useCallback((e: undefined, i: number) => i.toString(), []);
-    const localParticipant = useSelector(getLocalParticipant);
-    const onInvite = useCallback(() => {
-        setShareDialogVisiblity(isAddPeopleFeatureEnabled, dispatch);
-        dispatch(doInvitePeople());
-    }, [ dispatch ]);
-    const [ searchString, setSearchString ] = useState('');
-    const onSearchStringChange = useCallback((text: string) =>
-        setSearchString(text), []);
-    const participantsCount = useSelector(getParticipantCountWithFake);
-    const remoteParticipants = useSelector(getRemoteParticipants);
-    const renderParticipant = ({ item/* , index, separators */ }: any) => {
-        const participant = item === localParticipant?.id
-            ? localParticipant : remoteParticipants.get(item);
-
-        if (participantMatchesSearch(participant, searchString)) {
-            return (
-                <MeetingParticipantItem
-                    key = { item }
-                    participant = { participant } />
-            );
-        }
-
-        return null;
-    };
-    const showInviteButton = useSelector(shouldRenderInviteButton);
-    const sortedRemoteParticipants = useSelector(
-        (state: IReduxState) => state['features/filmstrip'].remoteParticipants);
-    const { t } = useTranslation();
-    const title = currentRoom?.name
-        ? `${currentRoom.name} (${participantsCount})`
-        : t('participantsPane.headings.participantsList',
-            { count: participantsCount });
-    const { color, shareDialogVisible } = inviteOthersControl;
+	const currentRoomId = useSelector(getCurrentRoomId);
+	const currentRoom = useSelector(getBreakoutRooms)[currentRoomId];
+	const dispatch = useDispatch();
+	const inviteOthersControl = useSelector(getInviteOthersControl);
+	const isAddPeopleFeatureEnabled = useSelector(addPeopleFeatureControl);
+	const keyExtractor = useCallback((e: undefined, i: number) => i.toString(), []);
+	const localParticipant = useSelector(getLocalParticipant);
+	const onInvite = useCallback(() => {
+		setShareDialogVisiblity(isAddPeopleFeatureEnabled, dispatch);
+		dispatch(doInvitePeople());
+	}, [dispatch]);
+	const [searchString, setSearchString] = useState('');
+	const onSearchStringChange = useCallback((text: string) => setSearchString(text), []);
+	const participantsCount = useSelector(getParticipantCountWithFake);
+	const remoteParticipants = useSelector(getRemoteParticipants);
+	const renderParticipant = ({ item /* , index, separators */ }: any) => {
+		const participant = item === localParticipant?.id ? localParticipant : remoteParticipants.get(item);
 
-    return (
-        <View style = { styles.meetingListContainer }>
-            <Text
-                style = { styles.meetingListDescription as TextStyle }>
-                { title }
-            </Text>
-            {
-                showInviteButton
-                && <Button
-                    accessibilityLabel = 'participantsPane.actions.invite'
-                    disabled = { shareDialogVisible }
+		if (participantMatchesSearch(participant, searchString)) {
+			return <MeetingParticipantItem key={item} participant={participant} />;
+		}
 
-                    // eslint-disable-next-line react/jsx-no-bind, no-confusing-arrow
-                    icon = { () => (
-                        <Icon
-                            color = { color }
-                            size = { 20 }
-                            src = { IconAddUser } />
-                    ) }
-                    labelKey = 'participantsPane.actions.invite'
-                    onClick = { onInvite }
-                    style = { styles.inviteButton }
-                    type = { BUTTON_TYPES.PRIMARY } />
-            }
-            <Input
-                clearable = { true }
-                customStyles = {{
-                    container: styles.inputContainer,
-                    input: styles.centerInput }}
-                onChange = { onSearchStringChange }
-                placeholder = { t('participantsPane.search') }
-                value = { searchString } />
-            <FlatList
-                data = { [ localParticipant?.id, ...sortedRemoteParticipants ] as Array<any> }
-                keyExtractor = { keyExtractor }
+		return null;
+	};
+	const showInviteButton = useSelector(shouldRenderInviteButton);
+	const sortedRemoteParticipants = useSelector((state: IReduxState) => state['features/filmstrip'].remoteParticipants);
+	const { t } = useTranslation();
+	const title = currentRoom?.name
+		? `${currentRoom.name} (${participantsCount})`
+		: t('participantsPane.headings.participantsList', { count: participantsCount });
+	const { color, shareDialogVisible } = inviteOthersControl;
 
-                /* eslint-disable react/jsx-no-bind */
-                renderItem = { renderParticipant }
-                windowSize = { 2 } />
-        </View>
-    );
+	return (
+		<View style={styles.meetingListContainer}>
+			<Text style={styles.meetingListDescription as TextStyle}>{title}</Text>
+			{showInviteButton && (
+				<Button
+					accessibilityLabel='participantsPane.actions.invite'
+					disabled={shareDialogVisible}
+					// eslint-disable-next-line react/jsx-no-bind, no-confusing-arrow
+					icon={() => <Icon color={color} size={20} src={IconAddUser} />}
+					labelKey='participantsPane.actions.invite'
+					onClick={onInvite}
+					style={styles.inviteButton}
+					type={BUTTON_TYPES.PRIMARY}
+				/>
+			)}
+			<Input
+				clearable={true}
+				customStyles={{
+					container: styles.inputContainer,
+					input: styles.centerInput
+				}}
+				onChange={onSearchStringChange}
+				placeholder={t('participantsPane.search')}
+				value={searchString}
+			/>
+			<FlatList
+				data={[localParticipant?.id, ...sortedRemoteParticipants] as Array<any>}
+				keyExtractor={keyExtractor}
+				/* eslint-disable react/jsx-no-bind */
+				renderItem={renderParticipant}
+				windowSize={2}
+			/>
+		</View>
+	);
 };
 
 export default MeetingParticipantList;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/ParticipantsPane.tsx b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/ParticipantsPane.tsx
index d2dfea5..85a88d4 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/ParticipantsPane.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/ParticipantsPane.tsx
@@ -11,39 +11,37 @@ import ParticipantsPaneFooter from './ParticipantsPaneFooter';
 import VisitorsList from './VisitorsList';
 import styles from './styles';
 
-
 /**
  * Participants pane.
  *
  * @returns {React$Element<any>}
  */
 const ParticipantsPane = () => {
-    const isLocalModerator = useSelector(isLocalParticipantModerator);
-    const keyExtractor
-        = useCallback((e: undefined, i: number) => i.toString(), []);
-
-    return (
-        <JitsiScreen
-            footerComponent = { isLocalModerator ? ParticipantsPaneFooter : undefined }
-            style = { styles.participantsPaneContainer }>
-
-            { /* Fixes warning regarding nested lists */ }
-            <FlatList
-
-                // eslint-disable-next-line react/jsx-no-bind
-                ListHeaderComponent = { () => (
-                    <>
-                        <VisitorsList />
-                        <LobbyParticipantList />
-                        <MeetingParticipantList />
-                    </>
-                ) }
-                data = { [] as ReadonlyArray<undefined> }
-                keyExtractor = { keyExtractor }
-                renderItem = { null }
-                windowSize = { 2 } />
-        </JitsiScreen>
-    );
+	const isLocalModerator = useSelector(isLocalParticipantModerator);
+	const keyExtractor = useCallback((e: undefined, i: number) => i.toString(), []);
+	const renderListHeaderComponent = () => (
+		<>
+			<VisitorsList />
+			<LobbyParticipantList />
+			<MeetingParticipantList />
+		</>
+	);
+
+	return (
+		<JitsiScreen
+			// footerComponent = { isLocalModerator ? ParticipantsPaneFooter : undefined }
+			style={styles.participantsPaneContainer}>
+			{/* Fixes warning regarding nested lists */}
+			<FlatList
+				// eslint-disable-next-line react/jsx-no-bind
+				ListHeaderComponent={renderListHeaderComponent}
+				data={[] as ReadonlyArray<undefined>}
+				keyExtractor={keyExtractor}
+				renderItem={null}
+				windowSize={2}
+			/>
+		</JitsiScreen>
+	);
 };
 
 export default ParticipantsPane;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/VisitorsList.tsx b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/VisitorsList.tsx
index 9c9a8c6..3ae7ad9 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/VisitorsList.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/native/VisitorsList.tsx
@@ -3,17 +3,21 @@ import { useTranslation } from 'react-i18next';
 import { Text, View, ViewStyle } from 'react-native';
 import { useDispatch, useSelector } from 'react-redux';
 
-import { IReduxState } from '../../../app/types';
 import Button from '../../../base/ui/components/native/Button';
 import { BUTTON_MODES, BUTTON_TYPES } from '../../../base/ui/constants.native';
-import { admitMultiple } from '../../../visitors/actions';
-import { getPromotionRequests } from '../../../visitors/functions';
+import { admitMultiple, goLive } from '../../../visitors/actions';
+import {
+    getPromotionRequests,
+    getVisitorsCount,
+    getVisitorsInQueueCount,
+    isVisitorsLive
+} from '../../../visitors/functions';
 
 import { VisitorsItem } from './VisitorsItem';
 import styles from './styles';
 
 const VisitorsList = () => {
-    const visitorsCount = useSelector((state: IReduxState) => state['features/visitors'].count || 0);
+    const visitorsCount = useSelector(getVisitorsCount);
 
     const dispatch = useDispatch();
 
@@ -22,9 +26,16 @@ const VisitorsList = () => {
     const admitAll = useCallback(() => {
         dispatch(admitMultiple(requests));
     }, [ dispatch, requests ]);
+    const goLiveCb = useCallback(() => {
+        dispatch(goLive());
+    }, [ dispatch ]);
     const { t } = useTranslation();
 
-    if (visitorsCount <= 0) {
+    const visitorsInQueueCount = useSelector(getVisitorsInQueueCount);
+    const isLive = useSelector(isVisitorsLive);
+    const showVisitorsInQueue = visitorsInQueueCount > 0 && isLive === false;
+
+    if (visitorsCount <= 0 && !showVisitorsInQueue) {
         return null;
     }
 
@@ -34,6 +45,10 @@ const VisitorsList = () => {
         title += t('participantsPane.headings.visitorRequests', { count: requests.length });
     }
 
+    if (showVisitorsInQueue) {
+        title += t('participantsPane.headings.visitorInQueue', { count: visitorsInQueueCount });
+    }
+
     return (
         <>
             <View style = { styles.listDetails as ViewStyle } >
@@ -41,7 +56,7 @@ const VisitorsList = () => {
                     { title }
                 </Text>
                 {
-                    requests.length > 1 && (
+                    requests.length > 1 && !showVisitorsInQueue && (
                         <Button
                             accessibilityLabel = 'participantsPane.actions.admitAll'
                             labelKey = 'participantsPane.actions.admitAll'
@@ -50,6 +65,16 @@ const VisitorsList = () => {
                             type = { BUTTON_TYPES.PRIMARY } />
                     )
                 }
+                {
+                    showVisitorsInQueue && (
+                        <Button
+                            accessibilityLabel = 'participantsPane.actions.goLive'
+                            labelKey = 'participantsPane.actions.goLive'
+                            mode = { BUTTON_MODES.TEXT }
+                            onClick = { goLiveCb }
+                            type = { BUTTON_TYPES.PRIMARY } />
+                    )
+                }
             </View>
             {
                 requests.map(r => (
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/FooterContextMenu.tsx b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/FooterContextMenu.tsx
index 75eaac6..a442305 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/FooterContextMenu.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/FooterContextMenu.tsx
@@ -23,6 +23,7 @@ import {
 import { MEDIA_TYPE } from '../../../base/media/constants';
 import {
     getParticipantCount,
+    getRaiseHandsQueue,
     isEveryoneModerator
 } from '../../../base/participants/functions';
 import { withPixelLineHeight } from '../../../base/styles/functions.web';
@@ -32,6 +33,7 @@ import { isInBreakoutRoom } from '../../../breakout-rooms/functions';
 import { openSettingsDialog } from '../../../settings/actions.web';
 import { SETTINGS_TABS } from '../../../settings/constants';
 import { shouldShowModeratorSettings } from '../../../settings/functions.web';
+import LowerHandButton from '../../../video-menu/components/web/LowerHandButton';
 import MuteEveryonesVideoDialog from '../../../video-menu/components/web/MuteEveryonesVideoDialog';
 
 const useStyles = makeStyles()(theme => {
@@ -85,6 +87,7 @@ interface IProps {
 export const FooterContextMenu = ({ isOpen, onDrawerClose, onMouseLeave }: IProps) => {
     const dispatch = useDispatch();
     const isModerationSupported = useSelector((state: IReduxState) => isAvModerationSupported()(state));
+    const raisedHandsQueue = useSelector(getRaiseHandsQueue);
     const allModerators = useSelector(isEveryoneModerator);
     const isModeratorSettingsTabEnabled = useSelector(shouldShowModeratorSettings);
     const participantCount = useSelector(getParticipantCount);
@@ -147,6 +150,7 @@ export const FooterContextMenu = ({ isOpen, onDrawerClose, onMouseLeave }: IProp
                     onClick: muteAllVideo,
                     text: t('participantsPane.actions.stopEveryonesVideo')
                 } ] } />
+            {raisedHandsQueue.length !== 0 && <LowerHandButton />}
             {!isBreakoutRoom && isModerationSupported && (participantCount === 1 || !allModerators) && (
                 <ContextMenuItemGroup actions = { actions }>
                     <div className = { classes.text }>
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/MeetingParticipantItem.tsx b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/MeetingParticipantItem.tsx
index fb2f259..68f78f1 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/MeetingParticipantItem.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/MeetingParticipantItem.tsx
@@ -2,10 +2,12 @@ import React, { useCallback, useEffect, useState } from 'react';
 import { connect } from 'react-redux';
 
 import { IReduxState } from '../../../app/types';
+import { getSsrcRewritingFeatureFlag } from '../../../base/config/functions.any';
 import { JitsiTrackEvents } from '../../../base/lib-jitsi-meet';
 import { MEDIA_TYPE } from '../../../base/media/constants';
 import {
     getLocalParticipant,
+    getMutedStateByParticipantAndMediaType,
     getParticipantByIdOrUndefined,
     getParticipantDisplayName,
     hasRaisedHand,
@@ -299,15 +301,15 @@ function _mapStateToProps(state: IReduxState, ownProps: any) {
     const { participantID, searchString } = ownProps;
     const { ownerId } = state['features/shared-video'];
     const localParticipantId = getLocalParticipant(state)?.id;
-
     const participant = getParticipantByIdOrUndefined(state, participantID);
-
     const _displayName = getParticipantDisplayName(state, participant?.id ?? '');
-
     const _matchesSearch = participantMatchesSearch(participant, searchString);
-
-    const _isAudioMuted = Boolean(participant && isParticipantAudioMuted(participant, state));
-    const _isVideoMuted = isParticipantVideoMuted(participant, state);
+    const _isAudioMuted = getSsrcRewritingFeatureFlag(state)
+        ? Boolean(participant && getMutedStateByParticipantAndMediaType(state, participant, MEDIA_TYPE.AUDIO))
+        : Boolean(participant && isParticipantAudioMuted(participant, state));
+    const _isVideoMuted = getSsrcRewritingFeatureFlag(state)
+        ? Boolean(participant && getMutedStateByParticipantAndMediaType(state, participant, MEDIA_TYPE.VIDEO))
+        : isParticipantVideoMuted(participant, state);
     const _audioMediaState = getParticipantAudioMediaState(participant, _isAudioMuted, state);
     const _videoMediaState = getParticipantVideoMediaState(participant, _isVideoMuted, state);
     const _quickActionButtonType = getQuickActionButtonType(participant, _isAudioMuted, _isVideoMuted, state);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/ParticipantsPaneButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/ParticipantsPaneButton.tsx
index 48677a9..b2e7ea5 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/ParticipantsPaneButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/ParticipantsPaneButton.tsx
@@ -9,6 +9,7 @@ import {
     close as closeParticipantsPane,
     open as openParticipantsPane
 } from '../../../participants-pane/actions.web';
+import { closeOverflowMenuIfOpen } from '../../../toolbox/actions.web';
 import { isParticipantsPaneEnabled } from '../../functions';
 
 import ParticipantsCounter from './ParticipantsCounter';
@@ -61,6 +62,7 @@ class ParticipantsPaneButton extends AbstractButton<IProps> {
     _handleClick() {
         const { dispatch, _isOpen } = this.props;
 
+        dispatch(closeOverflowMenuIfOpen());
         if (_isOpen) {
             dispatch(closeParticipantsPane());
         } else {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/VisitorsList.tsx b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/VisitorsList.tsx
index 16a3857..150d227 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/VisitorsList.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/components/web/VisitorsList.tsx
@@ -3,10 +3,14 @@ import { useTranslation } from 'react-i18next';
 import { useDispatch, useSelector } from 'react-redux';
 import { makeStyles } from 'tss-react/mui';
 
-import { IReduxState } from '../../../app/types';
 import { withPixelLineHeight } from '../../../base/styles/functions.web';
-import { admitMultiple } from '../../../visitors/actions';
-import { getPromotionRequests } from '../../../visitors/functions';
+import { admitMultiple, goLive } from '../../../visitors/actions';
+import {
+    getPromotionRequests,
+    getVisitorsCount,
+    getVisitorsInQueueCount,
+    isVisitorsLive
+} from '../../../visitors/functions';
 
 import { VisitorsItem } from './VisitorsItem';
 
@@ -66,7 +70,10 @@ const useStyles = makeStyles()(theme => {
  */
 export default function VisitorsList() {
     const requests = useSelector(getPromotionRequests);
-    const visitorsCount = useSelector((state: IReduxState) => state['features/visitors'].count || 0);
+    const visitorsCount = useSelector(getVisitorsCount);
+    const visitorsInQueueCount = useSelector(getVisitorsInQueueCount);
+    const isLive = useSelector(isVisitorsLive);
+    const showVisitorsInQueue = visitorsInQueueCount > 0 && isLive === false;
 
     const { t } = useTranslation();
     const { classes, cx } = useStyles();
@@ -76,7 +83,11 @@ export default function VisitorsList() {
         dispatch(admitMultiple(requests));
     }, [ dispatch, requests ]);
 
-    if (visitorsCount <= 0) {
+    const goLiveCb = useCallback(() => {
+        dispatch(goLive());
+    }, [ dispatch ]);
+
+    if (visitorsCount <= 0 && !showVisitorsInQueue) {
         return null;
     }
 
@@ -87,12 +98,20 @@ export default function VisitorsList() {
                     { t('participantsPane.headings.visitors', { count: visitorsCount })}
                     { requests.length > 0
                         && t('participantsPane.headings.visitorRequests', { count: requests.length }) }
+                    { showVisitorsInQueue
+                        && t('participantsPane.headings.visitorInQueue', { count: visitorsInQueueCount }) }
                 </div>
                 {
-                    requests.length > 1
+                    requests.length > 1 && !showVisitorsInQueue // Go live button is with higher priority
+                    && <div
+                        className = { classes.link }
+                        onClick = { admitAll }>{ t('participantsPane.actions.admitAll') }</div>
+                }
+                {
+                    showVisitorsInQueue
                     && <div
                         className = { classes.link }
-                        onClick = { admitAll }>{t('participantsPane.actions.admitAll')}</div>
+                        onClick = { goLiveCb }>{ t('participantsPane.actions.goLive') }</div>
                 }
             </div>
             <div
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/functions.ts
index c95698d..c30c6f5 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/functions.ts
@@ -63,6 +63,10 @@ export function getParticipantAudioMediaState(participant: IParticipant | undefi
         muted: Boolean, state: IReduxState) {
     const dominantSpeaker = getDominantSpeakerParticipant(state);
 
+    if (participant?.isSilent) {
+        return MEDIA_STATE.NONE;
+    }
+
     if (muted) {
         if (isForceMuted(participant, MEDIA_TYPE.AUDIO, state)) {
             return MEDIA_STATE.FORCE_MUTED;
@@ -146,9 +150,10 @@ export function getQuickActionButtonType(
         state: IReduxState) {
     // handled only by moderators
     const isVideoForceMuted = isForceMuted(participant, MEDIA_TYPE.VIDEO, state);
+    const isParticipantSilent = participant?.isSilent || false;
 
     if (isLocalParticipantModerator(state)) {
-        if (!isAudioMuted) {
+        if (!isAudioMuted && !isParticipantSilent) {
             return QUICK_ACTION_BUTTON.MUTE;
         }
         if (!isVideoMuted) {
@@ -157,7 +162,7 @@ export function getQuickActionButtonType(
         if (isVideoForceMuted) {
             return QUICK_ACTION_BUTTON.ALLOW_VIDEO;
         }
-        if (isSupported()(state)) {
+        if (isSupported()(state) && !isParticipantSilent) {
             return QUICK_ACTION_BUTTON.ASK_TO_UNMUTE;
         }
     }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/hooks.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/hooks.web.ts
index 6aedd26..e4bce73 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/hooks.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/participants-pane/hooks.web.ts
@@ -1,14 +1,23 @@
 import { useCallback, useState } from 'react';
-import { useDispatch } from 'react-redux';
+import { useDispatch, useSelector } from 'react-redux';
 
 import { handleLobbyChatInitialized } from '../chat/actions.web';
 import { approveKnockingParticipant, rejectKnockingParticipant } from '../lobby/actions.web';
 
+import ParticipantsPaneButton from './components/web/ParticipantsPaneButton';
+import { isParticipantsPaneEnabled } from './functions';
+
 interface IDrawerParticipant {
     displayName?: string;
     participantID: string;
 }
 
+const participants = {
+    key: 'participants-pane',
+    Content: ParticipantsPaneButton,
+    group: 2
+};
+
 /**
  * Hook used to create admit/reject lobby actions.
  *
@@ -57,3 +66,16 @@ export function useParticipantDrawer(): [
         openDrawerForParticipant
     ];
 }
+
+/**
+ * A hook that returns the participants pane button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useParticipantPaneButton() {
+    const participantsPaneEnabled = useSelector(isParticipantsPaneEnabled);
+
+    if (participantsPaneEnabled) {
+        return participants;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls-history/actionTypes.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls-history/actionTypes.ts
new file mode 100644
index 0000000..e02e7b0
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls-history/actionTypes.ts
@@ -0,0 +1,23 @@
+/**
+ * The type of the action which signals that we need to remove poll from the history(local storage).
+ *
+ * {
+ *     type: REMOVE_POLL_FROM_HISTORY,
+ *     meetingId: string,
+ *     pollId: string,
+ *     poll: IPoll
+ * }
+ */
+export const REMOVE_POLL_FROM_HISTORY = 'REMOVE_POLL_FROM_HISTORY';
+
+/**
+ * The type of the action triggered when the poll is saved in history(local storage).
+ *
+ * {
+ *     type: SAVE_POLL_IN_HISTORY,
+ *     poll: Poll,
+ *     pollId: string,
+ *     saved: boolean
+ * }
+ */
+export const SAVE_POLL_IN_HISTORY = 'SAVE_POLL_IN_HISTORY';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls-history/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls-history/actions.ts
new file mode 100644
index 0000000..fcda976
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls-history/actions.ts
@@ -0,0 +1,47 @@
+import { IPoll } from '../polls/types';
+
+import { REMOVE_POLL_FROM_HISTORY, SAVE_POLL_IN_HISTORY } from './actionTypes';
+
+/**
+ * Action to signal saving a poll in history(local storage).
+ *
+ * @param {string} meetingId - The id of the meeting in which polls get to be saved.
+ * @param {string} pollId - The id of the poll that gets to be saved.
+ * @param {IPoll} poll - The Poll object that gets to be saved.
+ * @returns {{
+ *     type: SAVE_POLL_IN_HISTORY,
+ *     meetingId: string,
+ *     pollId: string,
+ *     poll: IPoll
+ * }}
+ */
+export function savePollInHistory(meetingId: string | undefined, pollId: string, poll: IPoll) {
+    return {
+        type: SAVE_POLL_IN_HISTORY,
+        meetingId,
+        pollId,
+        poll
+    };
+}
+
+/**
+ * Action to signal that existing poll needs to be deleted from history(local storage).
+ *
+ * @param {string} meetingId - The id of the meeting in which poll gets to be removed.
+ * @param {string} pollId - The id of the poll that gets to be removed.
+ * @param {IPoll} poll - The incoming IPoll object.
+ * @returns {{
+ *     type: REMOVE_POLL_FROM_HISTORY,
+ *     meetingId: string,
+ *     pollId: string,
+ *     poll: IPoll
+ * }}
+ */
+export const removePollFromHistory = (meetingId: string | undefined, pollId: string, poll: IPoll) => {
+    return {
+        type: REMOVE_POLL_FROM_HISTORY,
+        meetingId,
+        pollId,
+        poll
+    };
+};
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls-history/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls-history/middleware.ts
new file mode 100644
index 0000000..05f673f
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls-history/middleware.ts
@@ -0,0 +1,46 @@
+import { CONFERENCE_JOINED } from '../base/conference/actionTypes';
+import MiddlewareRegistry from '../base/redux/MiddlewareRegistry';
+import { REMOVE_POLL, SAVE_POLL } from '../polls/actionTypes';
+import { savePoll } from '../polls/actions';
+
+import { removePollFromHistory, savePollInHistory } from './actions';
+
+MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
+    const result = next(action);
+    const { room: meetingId } = getState()['features/base/conference'];
+
+    switch (action.type) {
+
+    case CONFERENCE_JOINED: {
+        const state = getState();
+        const pollsHistory = meetingId && state['features/polls-history'].polls?.[meetingId];
+
+        if (!pollsHistory) {
+            return null;
+        }
+
+        for (const key in pollsHistory) {
+            if (pollsHistory.hasOwnProperty(key) && pollsHistory[key].saved) {
+                dispatch(savePoll(key, pollsHistory[key]));
+            }
+        }
+        break;
+    }
+
+    case REMOVE_POLL: {
+        const { poll, pollId } = action;
+
+        dispatch(removePollFromHistory(meetingId, pollId, poll));
+        break;
+    }
+
+    case SAVE_POLL: {
+        const { poll, pollId } = action;
+
+        dispatch(savePollInHistory(meetingId, pollId, poll));
+        break;
+    }
+    }
+
+    return result;
+});
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls-history/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls-history/reducer.ts
new file mode 100644
index 0000000..94e0af6
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls-history/reducer.ts
@@ -0,0 +1,52 @@
+import PersistenceRegistry from '../base/redux/PersistenceRegistry';
+import ReducerRegistry from '../base/redux/ReducerRegistry';
+import { IPoll } from '../polls/types';
+
+import { REMOVE_POLL_FROM_HISTORY, SAVE_POLL_IN_HISTORY } from './actionTypes';
+
+const INITIAL_STATE = {
+    polls: {}
+};
+
+export interface IPollsHistoryState {
+    polls: {
+        [meetingId: string]: {
+            [pollId: string]: IPoll;
+        };
+    };
+}
+
+const STORE_NAME = 'features/polls-history';
+
+PersistenceRegistry.register(STORE_NAME, INITIAL_STATE);
+
+ReducerRegistry.register<IPollsHistoryState>(STORE_NAME, (state = INITIAL_STATE, action): IPollsHistoryState => {
+    switch (action.type) {
+
+    case REMOVE_POLL_FROM_HISTORY: {
+        if (Object.keys(state.polls[action.meetingId] ?? {})?.length === 1) {
+            delete state.polls[action.meetingId];
+        } else {
+            delete state.polls[action.meetingId]?.[action.pollId];
+        }
+
+        return state;
+    }
+
+    case SAVE_POLL_IN_HISTORY: {
+        return {
+            ...state,
+            polls: {
+                ...state.polls,
+                [action.meetingId]: {
+                    ...state.polls[action.meetingId],
+                    [action.pollId]: action.poll
+                }
+            }
+        };
+    }
+
+    default:
+        return state;
+    }
+});
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/actionTypes.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls/actionTypes.ts
index f166103..d3b5a24 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/actionTypes.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/actionTypes.ts
@@ -10,7 +10,7 @@ export const CHANGE_VOTE = 'CHANGE_VOTE';
 
 /**
  * The type of the action which signals that we need to clear all polls from the state.
- * For example we are moving to another conference.
+ * For example, we are moving to another conference.
  *
  * {
  *     type: CLEAR_POLLS
@@ -18,6 +18,17 @@ export const CHANGE_VOTE = 'CHANGE_VOTE';
  */
 export const CLEAR_POLLS = 'CLEAR_POLLS';
 
+/**
+ * The type of the action triggered when the poll is editing.
+ *
+ * {
+ *     type: EDIT_POLL,
+ *     pollId: string,
+ *     editing: boolean
+ * }
+ */
+export const EDIT_POLL = 'EDIT_POLL';
+
 /**
  * The type of the action which signals that a new Poll was received.
  *
@@ -54,14 +65,15 @@ export const RECEIVE_ANSWER = 'RECEIVE_ANSWER';
 export const REGISTER_VOTE = 'REGISTER_VOTE';
 
 /**
- * The type of the action which retracts a vote.
+ * The type of the action which signals that we need to remove poll.
  *
  * {
- *     type: RETRACT_VOTE,
+ *     type: REMOVE_POLL,
  *     pollId: string,
+ *     poll: IPoll
  * }
  */
-export const RETRACT_VOTE = 'RETRACT_VOTE';
+export const REMOVE_POLL = 'REMOVE_POLL';
 
 /**
  * The type of the action triggered when the poll tab in chat pane is closed
@@ -71,3 +83,15 @@ export const RETRACT_VOTE = 'RETRACT_VOTE';
  * }
  */
 export const RESET_NB_UNREAD_POLLS = 'RESET_NB_UNREAD_POLLS';
+
+/**
+ * The type of the action triggered when the poll is saved.
+ *
+ * {
+ *     type: SAVE_POLL,
+ *     poll: Poll,
+ *     pollId: string,
+ *     saved: boolean
+ * }
+ */
+export const SAVE_POLL = 'SAVE_POLL';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls/actions.ts
index 84c72ac..2498773 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/actions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/actions.ts
@@ -1,11 +1,13 @@
 import {
     CHANGE_VOTE,
     CLEAR_POLLS,
+    EDIT_POLL,
     RECEIVE_ANSWER,
     RECEIVE_POLL,
     REGISTER_VOTE,
+    REMOVE_POLL,
     RESET_NB_UNREAD_POLLS,
-    RETRACT_VOTE
+    SAVE_POLL
 } from './actionTypes';
 import { IAnswer, IPoll } from './types';
 
@@ -17,7 +19,9 @@ import { IAnswer, IPoll } from './types';
  * }}
  */
 export const clearPolls = () => {
-    return { type: CLEAR_POLLS };
+    return {
+        type: CLEAR_POLLS
+    };
 };
 
 /**
@@ -48,16 +52,16 @@ export const setVoteChanging = (pollId: string, value: boolean) => {
  * @param {boolean} notify - Whether to send or not a notification.
  * @returns {{
  *     type: RECEIVE_POLL,
- *     poll: IPoll,
  *     pollId: string,
+ *     poll: IPoll,
  *     notify: boolean
  * }}
  */
 export const receivePoll = (pollId: string, poll: IPoll, notify: boolean) => {
     return {
         type: RECEIVE_POLL,
-        poll,
         pollId,
+        poll,
         notify
     };
 };
@@ -69,15 +73,15 @@ export const receivePoll = (pollId: string, poll: IPoll, notify: boolean) => {
  * @param {IAnswer} answer - The incoming Answer object.
  * @returns {{
  *     type: RECEIVE_ANSWER,
- *     answer: IAnswer,
- *     pollId: string
+ *     pollId: string,
+ *     answer: IAnswer
  * }}
  */
 export const receiveAnswer = (pollId: string, answer: IAnswer) => {
     return {
         type: RECEIVE_ANSWER,
-        answer,
-        pollId
+        pollId,
+        answer
     };
 };
 
@@ -88,43 +92,85 @@ export const receiveAnswer = (pollId: string, answer: IAnswer) => {
  * @param {?Array<boolean>} answers - The new answers.
  * @returns {{
  *     type: REGISTER_VOTE,
- *     answers: ?Array<boolean>,
- *     pollId: string
+ *     pollId: string,
+ *     answers: ?Array<boolean>
  * }}
  */
 export const registerVote = (pollId: string, answers: Array<boolean> | null) => {
     return {
         type: REGISTER_VOTE,
-        answers,
-        pollId
+        pollId,
+        answers
     };
 };
 
 /**
- * Action to retract a vote on a poll.
+ * Action to signal the number reset of unread polls.
  *
- * @param {string} pollId - The id of the poll.
  * @returns {{
- *     type: RETRACT_VOTE,
- *     pollId: string
+ *     type: RESET_NB_UNREAD_POLLS
  * }}
  */
-export const retractVote = (pollId: string) => {
+export function resetNbUnreadPollsMessages() {
     return {
-        type: RETRACT_VOTE,
-        pollId
+        type: RESET_NB_UNREAD_POLLS
     };
-};
+}
 
 /**
- * Action to signal the closing of the polls tab.
+ * Action to signal saving a poll.
  *
+ * @param {string} pollId - The id of the poll that gets to be saved.
+ * @param {IPoll} poll - The Poll object that gets to be saved.
  * @returns {{
- *     type: POLL_TAB_CLOSED
+ *     type: SAVE_POLL,
+ *     meetingId: string,
+ *     pollId: string,
+ *     poll: IPoll
  * }}
  */
-export function resetNbUnreadPollsMessages() {
+export function savePoll(pollId: string, poll: IPoll) {
     return {
-        type: RESET_NB_UNREAD_POLLS
+        type: SAVE_POLL,
+        pollId,
+        poll
+    };
+}
+
+/**
+ * Action to signal editing a poll.
+ *
+ * @param {string} pollId - The id of the poll that gets to be edited.
+ * @param {boolean} editing - Whether the poll is in edit mode or not.
+ * @returns {{
+ *     type: EDIT_POLL,
+ *     pollId: string,
+ *     editing: boolean
+ * }}
+ */
+export function editPoll(pollId: string, editing: boolean) {
+    return {
+        type: EDIT_POLL,
+        pollId,
+        editing
     };
 }
+
+/**
+ * Action to signal that existing polls needs to be removed.
+ *
+ * @param {string} pollId - The id of the poll that gets to be removed.
+ * @param {IPoll} poll - The incoming Poll object.
+ * @returns {{
+ *     type: REMOVE_POLL,
+ *     pollId: string,
+ *     poll: IPoll
+ * }}
+ */
+export const removePoll = (pollId: string, poll: IPoll) => {
+    return {
+        type: REMOVE_POLL,
+        pollId,
+        poll
+    };
+};
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollAnswer.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollAnswer.tsx
index f466856..a5ec770 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollAnswer.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollAnswer.tsx
@@ -7,8 +7,9 @@ import { sendAnalytics } from '../../analytics/functions';
 import { IReduxState } from '../../app/types';
 import { getParticipantDisplayName } from '../../base/participants/functions';
 import { useBoundSelector } from '../../base/util/hooks';
-import { registerVote, setVoteChanging } from '../actions';
-import { COMMAND_ANSWER_POLL } from '../constants';
+import { registerVote, removePoll, setVoteChanging } from '../actions';
+import { COMMAND_ANSWER_POLL, COMMAND_NEW_POLL } from '../constants';
+import { getPoll } from '../functions';
 import { IPoll } from '../types';
 
 /**
@@ -16,6 +17,7 @@ import { IPoll } from '../types';
  */
 type InputProps = {
     pollId: string;
+    setCreateMode: (mode: boolean) => void;
 };
 
 /*
@@ -26,7 +28,10 @@ export type AbstractProps = {
     checkBoxStates: boolean[];
     creatorName: string;
     poll: IPoll;
+    pollId: string;
+    sendPoll: () => void;
     setCheckbox: Function;
+    setCreateMode: (mode: boolean) => void;
     skipAnswer: () => void;
     skipChangeVote: () => void;
     submitAnswer: () => void;
@@ -42,21 +47,23 @@ export type AbstractProps = {
  */
 const AbstractPollAnswer = (Component: ComponentType<AbstractProps>) => (props: InputProps) => {
 
-    const { pollId } = props;
+    const { pollId, setCreateMode } = props;
+
+    const { conference } = useSelector((state: IReduxState) => state['features/base/conference']);
 
-    const conference: any = useSelector((state: IReduxState) => state['features/base/conference'].conference);
+    const poll: IPoll = useSelector(getPoll(pollId));
 
-    const poll: IPoll = useSelector((state: IReduxState) => state['features/polls'].polls[pollId]);
+    const { answers, lastVote, question, senderId } = poll;
 
     const [ checkBoxStates, setCheckBoxState ] = useState(() => {
-        if (poll.lastVote !== null) {
-            return [ ...poll.lastVote ];
+        if (lastVote !== null) {
+            return [ ...lastVote ];
         }
 
-        return new Array(poll.answers.length).fill(false);
+        return new Array(answers.length).fill(false);
     });
 
-    const participantName = useBoundSelector(getParticipantDisplayName, poll.senderId);
+    const participantName = useBoundSelector(getParticipantDisplayName, senderId);
 
     const setCheckbox = useCallback((index, state) => {
         const newCheckBoxStates = [ ...checkBoxStates ];
@@ -69,7 +76,7 @@ const AbstractPollAnswer = (Component: ComponentType<AbstractProps>) => (props:
     const dispatch = useDispatch();
 
     const submitAnswer = useCallback(() => {
-        conference.sendMessage({
+        conference?.sendMessage({
             type: COMMAND_ANSWER_POLL,
             pollId,
             answers: checkBoxStates
@@ -81,10 +88,20 @@ const AbstractPollAnswer = (Component: ComponentType<AbstractProps>) => (props:
         return false;
     }, [ pollId, checkBoxStates, conference ]);
 
+    const sendPoll = useCallback(() => {
+        conference?.sendMessage({
+            type: COMMAND_NEW_POLL,
+            pollId,
+            question,
+            answers: answers.map(answer => answer.name)
+        });
+
+        dispatch(removePoll(pollId, poll));
+    }, [ conference, question, answers ]);
+
     const skipAnswer = useCallback(() => {
         dispatch(registerVote(pollId, null));
         sendAnalytics(createPollEvent('vote.skipped'));
-
     }, [ pollId ]);
 
     const skipChangeVote = useCallback(() => {
@@ -97,7 +114,10 @@ const AbstractPollAnswer = (Component: ComponentType<AbstractProps>) => (props:
         checkBoxStates = { checkBoxStates }
         creatorName = { participantName }
         poll = { poll }
+        pollId = { pollId }
+        sendPoll = { sendPoll }
         setCheckbox = { setCheckbox }
+        setCreateMode = { setCreateMode }
         skipAnswer = { skipAnswer }
         skipChangeVote = { skipChangeVote }
         submitAnswer = { submitAnswer }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollCreate.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollCreate.tsx
index 03655d1..14f6e32 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollCreate.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollCreate.tsx
@@ -1,12 +1,16 @@
-import React, { ComponentType, FormEvent, useCallback, useState } from 'react';
+/* eslint-disable arrow-body-style */
+
+import React, { ComponentType, FormEvent, useCallback, useMemo, useState } from 'react';
 import { useTranslation } from 'react-i18next';
-import { useSelector } from 'react-redux';
+import { useDispatch, useSelector } from 'react-redux';
 
 import { createPollEvent } from '../../analytics/AnalyticsEvents';
 import { sendAnalytics } from '../../analytics/functions';
 import { IReduxState } from '../../app/types';
-import { COMMAND_NEW_POLL } from '../constants';
+import { getLocalParticipant } from '../../base/participants/functions';
+import { savePoll } from '../actions';
 import { hasIdenticalAnswers } from '../functions';
+import { IAnswerData, IPoll } from '../types';
 
 /**
  * The type of the React {@code Component} props of inheriting component.
@@ -21,12 +25,14 @@ type InputProps = {
  **/
 export type AbstractProps = InputProps & {
     addAnswer: (index?: number) => void;
-    answers: Array<string>;
+    answers: Array<IAnswerData>;
+    editingPoll: IPoll | undefined;
+    editingPollId: string | undefined;
     isSubmitDisabled: boolean;
     onSubmit: (event?: FormEvent<HTMLFormElement>) => void;
     question: string;
     removeAnswer: (index: number) => void;
-    setAnswer: (index: number, value: string) => void;
+    setAnswer: (index: number, value: IAnswerData) => void;
     setQuestion: (question: string) => void;
     t: Function;
 };
@@ -44,11 +50,45 @@ const AbstractPollCreate = (Component: ComponentType<AbstractProps>) => (props:
 
     const { setCreateMode } = props;
 
-    const [ question, setQuestion ] = useState('');
+    const pollState = useSelector((state: IReduxState) => state['features/polls'].polls);
+
+    const editingPoll: [ string, IPoll ] | null = useMemo(() => {
+        if (!pollState) {
+            return null;
+        }
+
+        for (const key in pollState) {
+            if (pollState.hasOwnProperty(key) && pollState[key].editing) {
+                return [ key, pollState[key] ];
+            }
+        }
+
+        return null;
+    }, [ pollState ]);
+
+    const answerResults = useMemo(() => {
+        return editingPoll
+            ? editingPoll[1].answers
+            : [
+                {
+                    name: '',
+                    voters: []
+                },
+                {
+                    name: '',
+                    voters: []
+                } ];
+    }, [ editingPoll ]);
+
+    const questionResult = useMemo(() => {
+        return editingPoll ? editingPoll[1].question : '';
+    }, [ editingPoll ]);
+
+    const [ question, setQuestion ] = useState(questionResult);
 
-    const [ answers, setAnswers ] = useState([ '', '' ]);
+    const [ answers, setAnswers ] = useState(answerResults);
 
-    const setAnswer = useCallback((i, answer) => {
+    const setAnswer = useCallback((i: number, answer: IAnswerData) => {
         setAnswers(currentAnswers => {
             const newAnswers = [ ...currentAnswers ];
 
@@ -59,10 +99,14 @@ const AbstractPollCreate = (Component: ComponentType<AbstractProps>) => (props:
     }, [ answers ]);
 
     const addAnswer = useCallback((i?: number) => {
-        const newAnswers = [ ...answers ];
+        const newAnswers: Array<IAnswerData> = [ ...answers ];
 
         sendAnalytics(createPollEvent('option.added'));
-        newAnswers.splice(typeof i === 'number' ? i : answers.length, 0, '');
+        newAnswers.splice(typeof i === 'number'
+            ? i : answers.length, 0, {
+            name: '',
+            voters: []
+        });
         setAnswers(newAnswers);
     }, [ answers ]);
 
@@ -77,25 +121,42 @@ const AbstractPollCreate = (Component: ComponentType<AbstractProps>) => (props:
         setAnswers(newAnswers);
     }, [ answers ]);
 
-    const conference = useSelector((state: IReduxState) => state['features/base/conference'].conference);
+    const { conference } = useSelector((state: IReduxState) => state['features/base/conference']);
+
+    const dispatch = useDispatch();
+
+    const pollId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36);
+
+    const localParticipant = useSelector(getLocalParticipant);
 
     const onSubmit = useCallback(ev => {
         if (ev) {
             ev.preventDefault();
         }
 
-        const filteredAnswers = answers.filter(answer => answer.trim().length > 0);
+        const filteredAnswers = answers.filter(answer => answer.name.trim().length > 0);
 
         if (filteredAnswers.length < 2) {
             return;
         }
 
-        conference?.sendMessage({
-            type: COMMAND_NEW_POLL,
-            pollId: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36),
+        const poll = {
+            changingVote: false,
+            senderId: localParticipant?.id,
+            showResults: false,
+            lastVote: null,
             question,
-            answers: filteredAnswers
-        });
+            answers: filteredAnswers,
+            saved: true,
+            editing: false
+        };
+
+        if (editingPoll) {
+            dispatch(savePoll(editingPoll[0], poll));
+        } else {
+            dispatch(savePoll(pollId, poll));
+        }
+
         sendAnalytics(createPollEvent('created'));
 
         setCreateMode(false);
@@ -105,7 +166,7 @@ const AbstractPollCreate = (Component: ComponentType<AbstractProps>) => (props:
     // Check if the poll create form can be submitted i.e. if the send button should be disabled.
     const isSubmitDisabled
         = question.trim().length <= 0 // If no question is provided
-        || answers.filter(answer => answer.trim().length > 0).length < 2 // If not enough options are provided
+        || answers.filter(answer => answer.name.trim().length > 0).length < 2 // If not enough options are provided
         || hasIdenticalAnswers(answers); // If duplicate options are provided
 
     const { t } = useTranslation();
@@ -113,6 +174,8 @@ const AbstractPollCreate = (Component: ComponentType<AbstractProps>) => (props:
     return (<Component
         addAnswer = { addAnswer }
         answers = { answers }
+        editingPoll = { editingPoll?.[1] }
+        editingPollId = { editingPoll?.[0] }
         isSubmitDisabled = { isSubmitDisabled }
         onSubmit = { onSubmit }
         question = { question }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollResults.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollResults.tsx
index 4c18d30..d9b377d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollResults.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/AbstractPollResults.tsx
@@ -10,6 +10,7 @@ import { getParticipantById, getParticipantDisplayName } from '../../base/partic
 import { useBoundSelector } from '../../base/util/hooks';
 import { setVoteChanging } from '../actions';
 import { getPoll } from '../functions';
+import { IPoll } from '../types';
 
 /**
  * The type of the React {@code Component} props of inheriting component.
@@ -53,8 +54,8 @@ export type AbstractProps = {
 const AbstractPollResults = (Component: ComponentType<AbstractProps>) => (props: InputProps) => {
     const { pollId } = props;
 
-    const pollDetails = useSelector(getPoll(pollId));
-    const participant = useBoundSelector(getParticipantById, pollDetails.senderId);
+    const poll: IPoll = useSelector(getPoll(pollId));
+    const participant = useBoundSelector(getParticipantById, poll.senderId);
     const reduxState = useSelector((state: IReduxState) => state);
 
     const [ showDetails, setShowDetails ] = useState(false);
@@ -67,14 +68,14 @@ const AbstractPollResults = (Component: ComponentType<AbstractProps>) => (props:
         const allVoters = new Set();
 
         // Getting every voters ID that participates to the poll
-        for (const answer of pollDetails.answers) {
+        for (const answer of poll.answers) {
             // checking if the voters is an array for supporting old structure model
-            const voters = answer.voters?.length ? answer.voters : Object.keys(answer.voters);
+            const voters: string[] = answer.voters.length ? answer.voters : Object.keys(answer.voters);
 
-            voters.forEach(voter => allVoters.add(voter));
+            voters.forEach((voter: string) => allVoters.add(voter));
         }
 
-        return pollDetails.answers.map(answer => {
+        return poll.answers.map(answer => {
             const nrOfVotersPerAnswer = answer.voters ? Object.keys(answer.voters).length : 0;
             const percentage = allVoters.size > 0 ? Math.round(nrOfVotersPerAnswer / allVoters.size * 100) : 0;
 
@@ -98,7 +99,7 @@ const AbstractPollResults = (Component: ComponentType<AbstractProps>) => (props:
                 voterCount: nrOfVotersPerAnswer
             };
         });
-    }, [ pollDetails.answers, showDetails ]);
+    }, [ poll.answers, showDetails ]);
 
     const dispatch = useDispatch();
     const changeVote = useCallback(() => {
@@ -113,8 +114,8 @@ const AbstractPollResults = (Component: ComponentType<AbstractProps>) => (props:
             answers = { answers }
             changeVote = { changeVote }
             creatorName = { participant ? participant.name : '' }
-            haveVoted = { pollDetails.lastVote !== null }
-            question = { pollDetails.question }
+            haveVoted = { poll.lastVote !== null }
+            question = { poll.question }
             showDetails = { showDetails }
             t = { t }
             toggleIsDetailed = { toggleIsDetailed } />
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollAnswer.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollAnswer.tsx
index c323e01..5411fda 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollAnswer.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollAnswer.tsx
@@ -1,66 +1,114 @@
+/* eslint-disable react/jsx-no-bind */
+
 import React from 'react';
 import { Text, TextStyle, View, ViewStyle } from 'react-native';
-import { useSelector } from 'react-redux';
+import { useDispatch, useSelector } from 'react-redux';
 
+import { IconCloseLarge } from '../../../base/icons/svg';
 import { getLocalParticipant } from '../../../base/participants/functions';
 import Button from '../../../base/ui/components/native/Button';
+import IconButton from '../../../base/ui/components/native/IconButton';
 import Switch from '../../../base/ui/components/native/Switch';
 import { BUTTON_TYPES } from '../../../base/ui/constants.native';
+import { editPoll, removePoll } from '../../actions';
 import { isSubmitAnswerDisabled } from '../../functions';
 import AbstractPollAnswer, { AbstractProps } from '../AbstractPollAnswer';
 
-import { chatStyles, dialogStyles } from './styles';
-
+import { dialogStyles, pollsStyles } from './styles';
 
 const PollAnswer = (props: AbstractProps) => {
     const {
         checkBoxStates,
         poll,
+        pollId,
+        sendPoll,
         setCheckbox,
+        setCreateMode,
         skipAnswer,
         skipChangeVote,
         submitAnswer,
         t
     } = props;
-    const { changingVote } = poll;
+    const { changingVote, saved: pollSaved } = poll;
+    const dispatch = useDispatch();
     const localParticipant = useSelector(getLocalParticipant);
     const { PRIMARY, SECONDARY } = BUTTON_TYPES;
 
     return (
         <>
-            <Text style = { dialogStyles.questionText as TextStyle } >{ poll.question }</Text>
-            <Text style = { dialogStyles.questionOwnerText as TextStyle } >{
-                t('polls.by', { name: localParticipant?.name })
-            }
-            </Text>
-            <View style = { chatStyles.answerContent as ViewStyle }>
-                {poll.answers.map((answer, index) => (
-                    <View
-                        key = { index }
-                        style = { chatStyles.switchRow as ViewStyle } >
-                        <Switch
-                            checked = { checkBoxStates[index] }
-                            /* eslint-disable-next-line react/jsx-no-bind */
-                            onChange = { state => setCheckbox(index, state) } />
-                        <Text style = { chatStyles.switchLabel as TextStyle }>{answer.name}</Text>
-                    </View>
-                ))}
+            <View style = { dialogStyles.headerContainer as ViewStyle }>
+                <View>
+                    <Text style = { dialogStyles.questionText as TextStyle } >{ poll.question }</Text>
+                    <Text style = { dialogStyles.questionOwnerText as TextStyle } >{
+                        t('polls.by', { name: localParticipant?.name })
+                    }
+                    </Text>
+                </View>
+                {
+                    pollSaved && <IconButton
+                        onPress = { () => dispatch(removePoll(pollId, poll)) }
+                        src = { IconCloseLarge } />
+                }
             </View>
-            <View style = { chatStyles.buttonRow as ViewStyle }>
-                <Button
-                    accessibilityLabel = 'polls.answer.skip'
-                    labelKey = 'polls.answer.skip'
-                    onClick = { changingVote ? skipChangeVote : skipAnswer }
-                    style = { chatStyles.pollCreateButton }
-                    type = { SECONDARY } />
-                <Button
-                    accessibilityLabel = 'polls.answer.submit'
-                    disabled = { isSubmitAnswerDisabled(checkBoxStates) }
-                    labelKey = 'polls.answer.submit'
-                    onClick = { submitAnswer }
-                    style = { chatStyles.pollCreateButton }
-                    type = { PRIMARY } />
+            <View
+                id = 'answer-content'
+                style = { pollsStyles.answerContent as ViewStyle }>
+                {
+                    poll.answers.map((answer, index: number) => (
+                        <View
+                            key = { index }
+                            style = { pollsStyles.switchRow as ViewStyle } >
+                            <Switch
+                                checked = { checkBoxStates[index] }
+                                disabled = { poll.saved }
+                                id = 'answer-switch'
+                                onChange = { state => setCheckbox(index, state) } />
+                            <Text style = { pollsStyles.switchLabel as TextStyle }>
+                                { answer.name }
+                            </Text>
+                        </View>
+                    ))
+                }
             </View>
+            {
+                pollSaved
+                    ? <View style = { pollsStyles.buttonRow as ViewStyle }>
+                        <Button
+                            accessibilityLabel = 'polls.answer.edit'
+                            id = { t('polls.answer.edit') }
+                            labelKey = 'polls.answer.edit'
+                            onClick = { () => {
+                                setCreateMode(true);
+                                dispatch(editPoll(pollId, true));
+                            } }
+                            style = { pollsStyles.pollCreateButton }
+                            type = { SECONDARY } />
+                        <Button
+                            accessibilityLabel = 'polls.answer.send'
+                            id = { t('polls.answer.send') }
+                            labelKey = 'polls.answer.send'
+                            onClick = { sendPoll }
+                            style = { pollsStyles.pollCreateButton }
+                            type = { PRIMARY } />
+                    </View>
+                    : <View style = { pollsStyles.buttonRow as ViewStyle }>
+                        <Button
+                            accessibilityLabel = 'polls.answer.skip'
+                            id = { t('polls.answer.skip') }
+                            labelKey = 'polls.answer.skip'
+                            onClick = { changingVote ? skipChangeVote : skipAnswer }
+                            style = { pollsStyles.pollCreateButton }
+                            type = { SECONDARY } />
+                        <Button
+                            accessibilityLabel = 'polls.answer.submit'
+                            disabled = { isSubmitAnswerDisabled(checkBoxStates) }
+                            id = { t('polls.answer.submit') }
+                            labelKey = 'polls.answer.submit'
+                            onClick = { submitAnswer }
+                            style = { pollsStyles.pollCreateButton }
+                            type = { PRIMARY } />
+                    </View>
+            }
         </>
     );
 };
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollCreate.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollCreate.tsx
index b0489f8..25ad59f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollCreate.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollCreate.tsx
@@ -1,22 +1,23 @@
-import React, { useCallback, useEffect, useRef, useState } from 'react';
-import { FlatList, Platform, View, ViewStyle } from 'react-native';
-import { TextInput } from 'react-native-gesture-handler';
+import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
+import { FlatList, Platform, TextInput, View, ViewStyle } from 'react-native';
 import { Divider } from 'react-native-paper';
+import { useDispatch } from 'react-redux';
 
 import Button from '../../../base/ui/components/native/Button';
 import Input from '../../../base/ui/components/native/Input';
 import { BUTTON_TYPES } from '../../../base/ui/constants.native';
-import styles
-    from '../../../settings/components/native/styles';
+import { editPoll } from '../../actions';
 import { ANSWERS_LIMIT, CHAR_LIMIT } from '../../constants';
 import AbstractPollCreate, { AbstractProps } from '../AbstractPollCreate';
 
-import { chatStyles, dialogStyles } from './styles';
+import { dialogStyles, pollsStyles } from './styles';
 
 const PollCreate = (props: AbstractProps) => {
     const {
         addAnswer,
         answers,
+        editingPoll,
+        editingPollId,
         isSubmitDisabled,
         onSubmit,
         question,
@@ -28,6 +29,7 @@ const PollCreate = (props: AbstractProps) => {
     } = props;
 
     const answerListRef = useRef<FlatList>(null);
+    const dispatch = useDispatch();
 
     /*
      * This ref stores the Array of answer input fields, allowing us to focus on them.
@@ -74,7 +76,7 @@ const PollCreate = (props: AbstractProps) => {
     // Called on keypress in answer fields
     const onAnswerKeyDown = useCallback((index: number, ev) => {
         const { key } = ev.nativeEvent;
-        const currentText = answers[index];
+        const currentText = answers[index].name;
 
         if (key === 'Backspace' && currentText === '' && answers.length > 1) {
             removeAnswer(index);
@@ -85,6 +87,7 @@ const PollCreate = (props: AbstractProps) => {
     /* eslint-disable react/no-multi-comp */
     const createRemoveOptionButton = (onPress: () => void) => (
         <Button
+            id = { t('polls.create.removeOption') }
             labelKey = 'polls.create.removeOption'
             labelStyle = { dialogStyles.optionRemoveButtonText }
             onClick = { onPress }
@@ -92,56 +95,74 @@ const PollCreate = (props: AbstractProps) => {
             type = { TERTIARY } />
     );
 
+    const pollCreateButtonsContainerStyles = Platform.OS === 'android'
+        ? pollsStyles.pollCreateButtonsContainerAndroid : pollsStyles.pollCreateButtonsContainerIos;
 
     /* eslint-disable react/jsx-no-bind */
-    const renderListItem = ({ index }: { index: number; }) =>
+    const renderListItem = ({ index }: { index: number; }) => {
+
+        const isIdenticalAnswer
+            = answers.slice(0, index).length === 0 ? false : answers.slice(0, index).some(prevAnswer =>
+                prevAnswer.name === answers[index].name
+                && prevAnswer.name !== '' && answers[index].name !== '');
 
-        // padding to take into account the two default options
-        (
+        return (
             <View
+                id = 'option-container'
                 style = { dialogStyles.optionContainer as ViewStyle }>
                 <Input
                     blurOnSubmit = { false }
+                    bottomLabel = { (
+                        isIdenticalAnswer ? t('polls.errors.notUniqueOption', { index: index + 1 }) : '') }
+                    error = { isIdenticalAnswer }
+                    id = { `polls-answer-input-${index}` }
                     label = { t('polls.create.pollOption', { index: index + 1 }) }
                     maxLength = { CHAR_LIMIT }
-                    multiline = { true }
-                    onChange = { text => setAnswer(index, text) }
+                    onChange = { name => setAnswer(index,
+                        {
+                            name,
+                            voters: []
+                        }) }
                     onKeyPress = { ev => onAnswerKeyDown(index, ev) }
                     placeholder = { t('polls.create.answerPlaceholder', { index: index + 1 }) }
 
                     // This is set to help the touch event not be propagated to any subviews.
                     pointerEvents = { 'auto' }
                     ref = { input => registerFieldRef(index, input) }
-                    value = { answers[index] } />
+                    value = { answers[index].name } />
                 {
                     answers.length > 2
                     && createRemoveOptionButton(() => removeAnswer(index))
                 }
             </View>
         );
-    const pollCreateButtonsContainerStyles = Platform.OS === 'android'
-        ? chatStyles.pollCreateButtonsContainerAndroid : chatStyles.pollCreateButtonsContainerIos;
+    };
+
+    const renderListHeaderComponent = useMemo(() => (
+        <>
+            <Input
+                autoFocus = { true }
+                blurOnSubmit = { false }
+                customStyles = {{ container: dialogStyles.customContainer }}
+                id = { t('polls.create.pollQuestion') }
+                label = { t('polls.create.pollQuestion') }
+                maxLength = { CHAR_LIMIT }
+                onChange = { setQuestion }
+                onSubmitEditing = { onQuestionKeyDown }
+                placeholder = { t('polls.create.questionPlaceholder') }
+
+                // This is set to help the touch event not be propagated to any subviews.
+                pointerEvents = { 'auto' }
+                value = { question } />
+            <Divider style = { pollsStyles.fieldSeparator as ViewStyle } />
+        </>
+    ), [ question ]);
 
     return (
-        <View style = { chatStyles.pollCreateContainer as ViewStyle }>
-            <View style = { chatStyles.pollCreateSubContainer as ViewStyle }>
-                <Input
-                    autoFocus = { true }
-                    blurOnSubmit = { false }
-                    customStyles = {{ container: dialogStyles.customContainer }}
-                    label = { t('polls.create.pollQuestion') }
-                    maxLength = { CHAR_LIMIT }
-                    multiline = { true }
-                    onChange = { setQuestion }
-                    onSubmitEditing = { onQuestionKeyDown }
-                    placeholder = { t('polls.create.questionPlaceholder') }
-
-                    // This is set to help the touch event not be propagated to any subviews.
-                    pointerEvents = { 'auto' }
-                    value = { question } />
-                {/* @ts-ignore */}
-                <Divider style = { styles.fieldSeparator } />
+        <View style = { pollsStyles.pollCreateContainer as ViewStyle }>
+            <View style = { pollsStyles.pollCreateSubContainer as ViewStyle }>
                 <FlatList
+                    ListHeaderComponent = { renderListHeaderComponent }
                     data = { answers }
                     extraData = { answers }
                     keyExtractor = { (item, index) => index.toString() }
@@ -151,28 +172,36 @@ const PollCreate = (props: AbstractProps) => {
                     <Button
                         accessibilityLabel = 'polls.create.addOption'
                         disabled = { answers.length >= ANSWERS_LIMIT }
+                        id = { t('polls.create.addOption') }
                         labelKey = 'polls.create.addOption'
                         onClick = { () => {
                             // adding and answer
                             addAnswer();
                             requestFocus(answers.length);
                         } }
-                        style = { chatStyles.pollCreateAddButton }
+                        style = { pollsStyles.pollCreateAddButton }
                         type = { SECONDARY } />
                     <View
-                        style = { chatStyles.buttonRow as ViewStyle }>
+                        style = { pollsStyles.buttonRow as ViewStyle }>
                         <Button
                             accessibilityLabel = 'polls.create.cancel'
+                            id = { t('polls.create.cancel') }
                             labelKey = 'polls.create.cancel'
-                            onClick = { () => setCreateMode(false) }
-                            style = { chatStyles.pollCreateButton }
+                            onClick = { () => {
+                                setCreateMode(false);
+                                editingPollId
+                                && editingPoll?.editing
+                                && dispatch(editPoll(editingPollId, false));
+                            } }
+                            style = { pollsStyles.pollCreateButton }
                             type = { SECONDARY } />
                         <Button
-                            accessibilityLabel = 'polls.create.send'
+                            accessibilityLabel = 'polls.create.save'
                             disabled = { isSubmitDisabled }
-                            labelKey = 'polls.create.send'
+                            id = { t('polls.create.save') }
+                            labelKey = 'polls.create.save'
                             onClick = { onSubmit }
-                            style = { chatStyles.pollCreateButton }
+                            style = { pollsStyles.pollCreateButton }
                             type = { PRIMARY } />
                     </View>
                 </View>
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollItem.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollItem.tsx
index c5a9f75..0e7daec 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollItem.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollItem.tsx
@@ -6,7 +6,7 @@ import { shouldShowResults } from '../../functions';
 
 import PollAnswer from './PollAnswer';
 import PollResults from './PollResults';
-import { chatStyles } from './styles';
+import { pollsStyles } from './styles';
 
 interface IProps {
 
@@ -15,20 +15,27 @@ interface IProps {
      */
     pollId: string;
 
+    /**
+     * Create mode control.
+     */
+    setCreateMode: (mode: boolean) => void;
+
 }
 
-const PollItem = ({ pollId }: IProps) => {
+const PollItem = ({ pollId, setCreateMode }: IProps) => {
     const showResults = useSelector(shouldShowResults(pollId));
 
     return (
         <View
-            style = { chatStyles.pollItemContainer as ViewStyle }>
+            id = 'poll-item-container'
+            style = { pollsStyles.pollItemContainer as ViewStyle }>
             { showResults
                 ? <PollResults
                     key = { pollId }
                     pollId = { pollId } />
                 : <PollAnswer
-                    pollId = { pollId } />
+                    pollId = { pollId }
+                    setCreateMode = { setCreateMode } />
             }
 
         </View>
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollResults.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollResults.tsx
index 83d19ee..18358fe 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollResults.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollResults.tsx
@@ -6,7 +6,7 @@ import { BUTTON_TYPES } from '../../../base/ui/constants.native';
 import AbstractPollResults from '../AbstractPollResults';
 import type { AbstractProps, AnswerInfo } from '../AbstractPollResults';
 
-import { chatStyles, dialogStyles, resultsStyles } from './styles';
+import { dialogStyles, pollsStyles, resultsStyles } from './styles';
 
 /**
  * Component that renders the poll results.
@@ -92,31 +92,45 @@ const PollResults = (props: AbstractProps) => {
     /* eslint-disable react/jsx-no-bind */
     return (
         <View>
-            <Text style = { dialogStyles.questionText as TextStyle } >{ question }</Text>
-            <Text style = { dialogStyles.questionOwnerText as TextStyle } >
+            <Text
+                id = 'question-text'
+                style = { dialogStyles.questionText as TextStyle } >{ question }</Text>
+            <Text
+                id = 'poll-owner-text'
+                style = { dialogStyles.questionOwnerText as TextStyle } >
                 { t('polls.by', { name: creatorName }) }
             </Text>
             <FlatList
                 data = { answers }
                 keyExtractor = { (item, index) => index.toString() }
                 renderItem = { answer => renderRow(answer.item) } />
-            <View style = { chatStyles.bottomLinks as ViewStyle }>
+            <View style = { pollsStyles.bottomLinks as ViewStyle }>
                 <Button
+                    id = {
+                        showDetails
+                            ? t('polls.results.hideDetailedResults')
+                            : t('polls.results.showDetailedResults')
+                    }
                     labelKey = {
                         showDetails
                             ? 'polls.results.hideDetailedResults'
                             : 'polls.results.showDetailedResults'
                     }
-                    labelStyle = { chatStyles.toggleText }
+                    labelStyle = { pollsStyles.toggleText }
                     onClick = { toggleIsDetailed }
                     type = { BUTTON_TYPES.TERTIARY } />
                 <Button
+                    id = {
+                        haveVoted
+                            ? t('polls.results.changeVote')
+                            : t('polls.results.vote')
+                    }
                     labelKey = {
                         haveVoted
                             ? 'polls.results.changeVote'
                             : 'polls.results.vote'
                     }
-                    labelStyle = { chatStyles.toggleText }
+                    labelStyle = { pollsStyles.toggleText }
                     onClick = { changeVote }
                     type = { BUTTON_TYPES.TERTIARY } />
             </View>
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollsList.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollsList.tsx
index 7cf2ef7..4e361c3 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollsList.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollsList.tsx
@@ -10,9 +10,13 @@ import { IconMessage } from '../../../base/icons/svg';
 import BaseTheme from '../../../base/ui/components/BaseTheme.native';
 
 import PollItem from './PollItem';
-import { chatStyles } from './styles';
+import { pollsStyles } from './styles';
 
-const PollsList = () => {
+interface IPollListProps {
+    setCreateMode: (mode: boolean) => void;
+}
+
+const PollsList = ({ setCreateMode }: IPollListProps) => {
     const polls = useSelector((state: IReduxState) => state['features/polls'].polls);
     const { t } = useTranslation();
     const listPolls = Object.keys(polls);
@@ -20,7 +24,8 @@ const PollsList = () => {
     const renderItem = useCallback(({ item }) => (
         <PollItem
             key = { item }
-            pollId = { item } />)
+            pollId = { item }
+            setCreateMode = { setCreateMode } />)
     , []);
 
     const flatlistRef = useRef<FlatList>(null);
@@ -37,12 +42,14 @@ const PollsList = () => {
         <>
             {
                 listPolls.length === 0
-                && <View style = { chatStyles.noPollContent as ViewStyle }>
+                && <View style = { pollsStyles.noPollContent as ViewStyle }>
                     <Icon
                         color = { BaseTheme.palette.icon03 }
                         size = { 160 }
                         src = { IconMessage } />
-                    <Text style = { chatStyles.noPollText as TextStyle } >
+                    <Text
+                        id = 'no-polls-text'
+                        style = { pollsStyles.noPollText as TextStyle } >
                         {
                             t('polls.results.empty')
                         }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollsPane.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollsPane.tsx
index a182739..cfa9cb8 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollsPane.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/PollsPane.tsx
@@ -17,7 +17,7 @@ import type { AbstractProps } from '../AbstractPollsPane';
 
 import PollCreate from './PollCreate';
 import PollsList from './PollsList';
-import { chatStyles } from './styles';
+import { pollsStyles } from './styles';
 
 const PollsPane = (props: AbstractProps) => {
     const { createMode, onCreate, setCreateMode, t } = props;
@@ -42,32 +42,32 @@ const PollsPane = (props: AbstractProps) => {
     }, [ isPollsTabFocused, nbUnreadPolls ]);
 
     const createPollButtonStyles = Platform.OS === 'android'
-        ? chatStyles.createPollButtonAndroid : chatStyles.createPollButtonIos;
+        ? pollsStyles.createPollButtonAndroid : pollsStyles.createPollButtonIos;
 
     return (
         <JitsiScreen
-            contentContainerStyle = { chatStyles.pollPane as StyleType }
+            contentContainerStyle = { pollsStyles.pollPane as StyleType }
             disableForcedKeyboardDismiss = { true }
             hasExtraHeaderHeight = { true }
-            style = { chatStyles.pollPaneContainer as StyleType }>
+            style = { pollsStyles.pollPaneContainer as StyleType }>
             {
                 createMode
                     ? <PollCreate setCreateMode = { setCreateMode } />
-                    : <PollsList />
-            }
-            {
-                !createMode && <Button
-                    accessibilityLabel = 'polls.create.create'
-                    labelKey = 'polls.create.create'
-                    onClick = { onCreate }
-                    style = { createPollButtonStyles }
-                    type = { BUTTON_TYPES.PRIMARY } />
+                    : <>
+                        <PollsList setCreateMode = { setCreateMode } />
+                        <Button
+                            accessibilityLabel = 'polls.create.create'
+                            id = { t('polls.create.create') }
+                            labelKey = 'polls.create.create'
+                            onClick = { onCreate }
+                            style = { createPollButtonStyles }
+                            type = { BUTTON_TYPES.PRIMARY } />
+                    </>
             }
         </JitsiScreen>
     );
 };
 
-
 /*
  * We apply AbstractPollsPane to fill in the AbstractProps common
  * to both the web and native implementations.
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/styles.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/styles.ts
index 10c4dba..cf64c04 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/styles.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/native/styles.ts
@@ -4,6 +4,12 @@ import BaseTheme from '../../../base/ui/components/BaseTheme.native';
 
 export const dialogStyles = createStyleSheet({
 
+    headerContainer: {
+        display: 'flex',
+        flexDirection: 'row',
+        justifyContent: 'space-between'
+    },
+
     customContainer: {
         marginBottom: BaseTheme.spacing[3],
         marginHorizontal: BaseTheme.spacing[3],
@@ -30,7 +36,6 @@ export const dialogStyles = createStyleSheet({
     },
 
     optionRemoveButton: {
-        marginTop: BaseTheme.spacing[2],
         width: 128
     },
 
@@ -110,7 +115,7 @@ export const resultsStyles = createStyleSheet({
     }
 });
 
-export const chatStyles = createStyleSheet({
+export const pollsStyles = createStyleSheet({
 
     noPollContent: {
         alignItems: 'center',
@@ -195,7 +200,6 @@ export const chatStyles = createStyleSheet({
 
     pollCreateButton: {
         marginHorizontal: BaseTheme.spacing[1],
-        maxWidth: 160,
         flex: 1
     },
 
@@ -209,7 +213,8 @@ export const chatStyles = createStyleSheet({
     },
 
     createPollButtonAndroid: {
-        marginHorizontal: 20
+        marginHorizontal: 20,
+        marginVertical: BaseTheme.spacing[5]
     },
 
     pollPane: {
@@ -228,26 +233,9 @@ export const chatStyles = createStyleSheet({
         marginHorizontal: BaseTheme.spacing[1]
     },
 
-    unreadPollsCounterContainer: {
-        display: 'flex',
-        flexDirection: 'row'
-    },
-
-    unreadPollsCounterDescription: {
-        color: BaseTheme.palette.text01
-    },
-
-    unreadPollsCounterCircle: {
-        backgroundColor: BaseTheme.palette.warning01,
-        borderRadius: BaseTheme.spacing[3] / 2,
-        height: BaseTheme.spacing[3],
-        justifyContent: 'center',
-        marginLeft: BaseTheme.spacing[2],
-        width: BaseTheme.spacing[3]
-    },
-
-    unreadPollsCounter: {
-        alignSelf: 'center',
-        color: BaseTheme.palette.text04
+    fieldSeparator: {
+        borderBottomWidth: 1,
+        borderColor: BaseTheme.palette.ui05,
+        marginTop: BaseTheme.spacing[3]
     }
 });
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollAnswer.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollAnswer.tsx
index b30b75e..bac4bd6 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollAnswer.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollAnswer.tsx
@@ -1,10 +1,16 @@
+/* eslint-disable react/jsx-no-bind */
+
 import React from 'react';
+import { useDispatch } from 'react-redux';
 import { makeStyles } from 'tss-react/mui';
 
+import Icon from '../../../base/icons/components/Icon';
+import { IconCloseLarge } from '../../../base/icons/svg';
 import { withPixelLineHeight } from '../../../base/styles/functions.web';
 import Button from '../../../base/ui/components/web/Button';
 import Checkbox from '../../../base/ui/components/web/Checkbox';
 import { BUTTON_TYPES } from '../../../base/ui/constants.web';
+import { editPoll, removePoll } from '../../actions';
 import { isSubmitAnswerDisabled } from '../../functions';
 import AbstractPollAnswer, { AbstractProps } from '../AbstractPollAnswer';
 
@@ -17,6 +23,10 @@ const useStyles = makeStyles()(theme => {
             borderRadius: '8px',
             wordBreak: 'break-word'
         },
+        closeBtn: {
+            cursor: 'pointer',
+            float: 'right'
+        },
         header: {
             marginBottom: '24px'
         },
@@ -53,17 +63,31 @@ const PollAnswer = ({
     creatorName,
     checkBoxStates,
     poll,
+    pollId,
     setCheckbox,
+    setCreateMode,
     skipAnswer,
     skipChangeVote,
+    sendPoll,
     submitAnswer,
     t
 }: AbstractProps) => {
-    const { changingVote } = poll;
+    const { changingVote, saved: pollSaved } = poll;
+    const dispatch = useDispatch();
+
     const { classes } = useStyles();
 
     return (
         <div className = { classes.container }>
+            {
+                pollSaved && <Icon
+                    ariaLabel = { t('polls.closeButton') }
+                    className = { classes.closeBtn }
+                    onClick = { () => dispatch(removePoll(pollId, poll)) }
+                    role = 'button'
+                    src = { IconCloseLarge }
+                    tabIndex = { 0 } />
+            }
             <div className = { classes.header }>
                 <div className = { classes.question }>
                     { poll.question }
@@ -74,32 +98,50 @@ const PollAnswer = ({
             </div>
             <ul className = { classes.answerList }>
                 {
-                    poll.answers.map((answer: any, index: number) => (
+                    poll.answers.map((answer, index: number) => (
                         <li
                             className = { classes.answer }
                             key = { index }>
                             <Checkbox
                                 checked = { checkBoxStates[index] }
+                                disabled = { poll.saved }
                                 key = { index }
                                 label = { answer.name }
-                                // eslint-disable-next-line react/jsx-no-bind
                                 onChange = { ev => setCheckbox(index, ev.target.checked) } />
                         </li>
                     ))
                 }
             </ul>
             <div className = { classes.footer } >
-                <Button
-                    accessibilityLabel = { t('polls.answer.skip') }
-                    className = { classes.buttonMargin }
-                    labelKey = { 'polls.answer.skip' }
-                    onClick = { changingVote ? skipChangeVote : skipAnswer }
-                    type = { BUTTON_TYPES.SECONDARY } />
-                <Button
-                    accessibilityLabel = { t('polls.answer.submit') }
-                    disabled = { isSubmitAnswerDisabled(checkBoxStates) }
-                    labelKey = { 'polls.answer.submit' }
-                    onClick = { submitAnswer } />
+                {
+                    pollSaved ? <>
+                        <Button
+                            accessibilityLabel = { t('polls.answer.edit') }
+                            className = { classes.buttonMargin }
+                            labelKey = { 'polls.answer.edit' }
+                            onClick = { () => {
+                                setCreateMode(true);
+                                dispatch(editPoll(pollId, true));
+                            } }
+                            type = { BUTTON_TYPES.SECONDARY } />
+                        <Button
+                            accessibilityLabel = { t('polls.answer.send') }
+                            labelKey = { 'polls.answer.send' }
+                            onClick = { sendPoll } />
+                    </> : <>
+                        <Button
+                            accessibilityLabel = { t('polls.answer.skip') }
+                            className = { classes.buttonMargin }
+                            labelKey = { 'polls.answer.skip' }
+                            onClick = { changingVote ? skipChangeVote : skipAnswer }
+                            type = { BUTTON_TYPES.SECONDARY } />
+                        <Button
+                            accessibilityLabel = { t('polls.answer.submit') }
+                            disabled = { isSubmitAnswerDisabled(checkBoxStates) }
+                            labelKey = { 'polls.answer.submit' }
+                            onClick = { submitAnswer } />
+                    </>
+                }
             </div>
         </div>
     );
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollCreate.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollCreate.tsx
index 6c1a283..43918a7 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollCreate.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollCreate.tsx
@@ -1,10 +1,12 @@
 import React, { useCallback, useEffect, useRef, useState } from 'react';
+import { useDispatch } from 'react-redux';
 import { makeStyles } from 'tss-react/mui';
 
 import { withPixelLineHeight } from '../../../base/styles/functions.web';
 import Button from '../../../base/ui/components/web/Button';
 import Input from '../../../base/ui/components/web/Input';
 import { BUTTON_TYPES } from '../../../base/ui/constants.web';
+import { editPoll } from '../../actions';
 import { ANSWERS_LIMIT, CHAR_LIMIT } from '../../constants';
 import AbstractPollCreate, { AbstractProps } from '../AbstractPollCreate';
 
@@ -64,6 +66,8 @@ const useStyles = makeStyles()(theme => {
 const PollCreate = ({
     addAnswer,
     answers,
+    editingPoll,
+    editingPollId,
     isSubmitDisabled,
     onSubmit,
     question,
@@ -74,6 +78,7 @@ const PollCreate = ({
     t
 }: AbstractProps) => {
     const { classes } = useStyles();
+    const dispatch = useDispatch();
 
     /*
      * This ref stores the Array of answer input fields, allowing us to focus on them.
@@ -201,11 +206,12 @@ const PollCreate = ({
                     value = { question } />
             </div>
             <ol className = { classes.answerList }>
-                {answers.map((answer: any, i: number) => {
+                {answers.map((answer, i: number) => {
 
                     const isIdenticalAnswer = answers.slice(0, i).length === 0 ? false
-                        : answers.slice(0, i).some((prevAnswer: string) =>
-                            prevAnswer === answer && prevAnswer !== '' && answer !== '');
+                        : answers.slice(0, i).some(prevAnswer =>
+                            prevAnswer.name === answer.name
+                            && prevAnswer.name !== '' && answer.name !== '');
 
                     return (<li
                         className = { classes.answer }
@@ -217,12 +223,15 @@ const PollCreate = ({
                             id = { `polls-answer-input-${i}` }
                             label = { t('polls.create.pollOption', { index: i + 1 }) }
                             maxLength = { CHAR_LIMIT }
-                            onChange = { val => setAnswer(i, val) }
+                            onChange = { name => setAnswer(i, {
+                                name,
+                                voters: []
+                            }) }
                             onKeyPress = { ev => onAnswerKeyDown(i, ev) }
                             placeholder = { t('polls.create.answerPlaceholder', { index: i + 1 }) }
                             ref = { r => registerFieldRef(i, r) }
                             textarea = { true }
-                            value = { answer } />
+                            value = { answer.name } />
 
                         { answers.length > 2
                         && <button
@@ -252,13 +261,18 @@ const PollCreate = ({
                 accessibilityLabel = { t('polls.create.cancel') }
                 className = { classes.buttonMargin }
                 labelKey = { 'polls.create.cancel' }
-                onClick = { () => setCreateMode(false) }
+                onClick = { () => {
+                    setCreateMode(false);
+                    editingPollId
+                    && editingPoll?.editing
+                    && dispatch(editPoll(editingPollId, false));
+                } }
                 type = { BUTTON_TYPES.SECONDARY } />
             <Button
-                accessibilityLabel = { t('polls.create.send') }
+                accessibilityLabel = { t('polls.create.save') }
                 disabled = { isSubmitDisabled }
                 isSubmit = { true }
-                labelKey = { 'polls.create.send' } />
+                labelKey = { 'polls.create.save' } />
         </div>
     </form>);
 };
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollItem.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollItem.tsx
index 867a056..3da1a08 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollItem.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollItem.tsx
@@ -14,9 +14,14 @@ interface IProps {
      */
     pollId: string;
 
+    /**
+     * Create mode control.
+     */
+    setCreateMode: (mode: boolean) => void;
+
 }
 
-const PollItem = React.forwardRef<HTMLDivElement, IProps>(({ pollId }: IProps, ref) => {
+const PollItem = React.forwardRef<HTMLDivElement, IProps>(({ pollId, setCreateMode }: IProps, ref) => {
     const showResults = useSelector(shouldShowResults(pollId));
 
     return (
@@ -26,7 +31,8 @@ const PollItem = React.forwardRef<HTMLDivElement, IProps>(({ pollId }: IProps, r
                     key = { pollId }
                     pollId = { pollId } />
                 : <PollAnswer
-                    pollId = { pollId } />
+                    pollId = { pollId }
+                    setCreateMode = { setCreateMode } />
             }
 
         </div>
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollsList.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollsList.tsx
index a2140ac..327e6f0 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollsList.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollsList.tsx
@@ -39,11 +39,15 @@ const useStyles = makeStyles()(theme => {
     };
 });
 
-const PollsList = () => {
+interface IPollListProps {
+    setCreateMode: (mode: boolean) => void;
+}
+
+const PollsList = ({ setCreateMode }: IPollListProps) => {
     const { t } = useTranslation();
     const { classes, theme } = useStyles();
+    const { polls } = useSelector((state: IReduxState) => state['features/polls']);
 
-    const polls = useSelector((state: IReduxState) => state['features/polls'].polls);
     const pollListEndRef = useRef<HTMLDivElement>(null);
 
     const scrollToBottom = useCallback(() => {
@@ -80,7 +84,8 @@ const PollsList = () => {
                     <PollItem
                         key = { id }
                         pollId = { id }
-                        ref = { listPolls.length - 1 === index ? pollListEndRef : null } />
+                        ref = { listPolls.length - 1 === index ? pollListEndRef : null }
+                        setCreateMode = { setCreateMode } />
                 ))}
         </>
     );
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollsPane.tsx b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollsPane.tsx
index c1cf624..8bee117 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollsPane.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/components/web/PollsPane.tsx
@@ -35,7 +35,7 @@ const PollsPane = ({ createMode, onCreate, setCreateMode, t }: AbstractProps) =>
         ? <PollCreate setCreateMode = { setCreateMode } />
         : <div className = { classes.container }>
             <div className = { classes.listContainer } >
-                <PollsList />
+                <PollsList setCreateMode = { setCreateMode } />
             </div>
             <div className = { classes.footer }>
                 <Button
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls/functions.ts
index fdfd8ed..43f4ad5 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/functions.ts
@@ -1,5 +1,7 @@
 import { IReduxState } from '../app/types';
 
+import { IAnswerData } from './types';
+
 /**
  * Selector creator for determining if poll results should be displayed or not.
  *
@@ -49,14 +51,14 @@ export function isSubmitAnswerDisabled(checkBoxStates: Array<boolean>) {
 /**
  * Check if the input array has identical answers.
  *
- * @param {Array<string>} currentAnswers - The array of current answers to compare.
+ * @param {Array<IAnswerData>} currentAnswers - The array of current answers to compare.
  * @returns {boolean} - Returns true if the answers are identical.
  */
-export function hasIdenticalAnswers(currentAnswers: Array<string>): boolean {
+export function hasIdenticalAnswers(currentAnswers: Array<IAnswerData>): boolean {
 
-    const nonEmptyCurrentAnswers = currentAnswers.filter((answer: string): boolean => answer !== '');
+    const nonEmptyCurrentAnswers = currentAnswers.filter((answer): boolean => answer.name !== '');
 
-    const currentAnswersSet = new Set(nonEmptyCurrentAnswers);
+    const currentAnswersSet = new Set(nonEmptyCurrentAnswers.map(answer => answer.name));
 
     return currentAnswersSet.size !== nonEmptyCurrentAnswers.length;
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls/middleware.ts
index 459aaa7..d988cf9 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/middleware.ts
@@ -25,10 +25,8 @@ import { IAnswer, IPoll, IPollData } from './types';
  */
 StateListenerRegistry.register(
     state => getCurrentConference(state),
-    (conference, { dispatch }, previousConference) => {
+    (conference, { dispatch }, previousConference): void => {
         if (conference !== previousConference) {
-            // conference changed, left or failed...
-            // clean old polls
             dispatch(clearPolls());
         }
     });
@@ -50,7 +48,9 @@ const parsePollData = (pollData: IPollData): IPoll | null => {
         question,
         showResults: true,
         lastVote: null,
-        answers
+        answers,
+        saved: false,
+        editing: false
     };
 };
 
@@ -99,7 +99,6 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
         }
         break;
     }
-
     }
 
     return result;
@@ -120,8 +119,9 @@ function _handleReceivePollsMessage(data: any, dispatch: IStore['dispatch'], get
     }
 
     switch (data.type) {
+
     case COMMAND_NEW_POLL: {
-        const { question, answers, pollId, senderId } = data;
+        const { pollId, answers, senderId, question } = data;
 
         const poll = {
             changingVote: false,
@@ -129,12 +129,14 @@ function _handleReceivePollsMessage(data: any, dispatch: IStore['dispatch'], get
             showResults: false,
             lastVote: null,
             question,
-            answers: answers.map((answer: IAnswer) => {
+            answers: answers.map((answer: string) => {
                 return {
                     name: answer,
                     voters: []
                 };
-            })
+            }),
+            saved: false,
+            editing: false
         };
 
         dispatch(receivePoll(pollId, poll, true));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls/reducer.ts
index 6d73316..eaf7b52 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/reducer.ts
@@ -3,11 +3,13 @@ import ReducerRegistry from '../base/redux/ReducerRegistry';
 import {
     CHANGE_VOTE,
     CLEAR_POLLS,
+    EDIT_POLL,
     RECEIVE_ANSWER,
     RECEIVE_POLL,
     REGISTER_VOTE,
+    REMOVE_POLL,
     RESET_NB_UNREAD_POLLS,
-    RETRACT_VOTE
+    SAVE_POLL
 } from './actionTypes';
 import { IAnswer, IPoll } from './types';
 
@@ -25,7 +27,9 @@ export interface IPollsState {
     };
 }
 
-ReducerRegistry.register<IPollsState>('features/polls', (state = INITIAL_STATE, action): IPollsState => {
+const STORE_NAME = 'features/polls';
+
+ReducerRegistry.register<IPollsState>(STORE_NAME, (state = INITIAL_STATE, action): IPollsState => {
     switch (action.type) {
 
     case CHANGE_VOTE: {
@@ -51,20 +55,26 @@ ReducerRegistry.register<IPollsState>('features/polls', (state = INITIAL_STATE,
         };
     }
 
-    // Reducer triggered when a poll is received
+    // Reducer triggered when a poll is received or saved.
     case RECEIVE_POLL: {
-        const newState = {
+        return {
             ...state,
             polls: {
                 ...state.polls,
-
-                // The poll is added to the dictionary of received polls
                 [action.pollId]: action.poll
             },
             nbUnreadPolls: state.nbUnreadPolls + 1
         };
+    }
 
-        return newState;
+    case SAVE_POLL: {
+        return {
+            ...state,
+            polls: {
+                ...state.polls,
+                [action.pollId]: action.poll
+            }
+        };
     }
 
     // Reducer triggered when an answer is received
@@ -140,25 +150,42 @@ ReducerRegistry.register<IPollsState>('features/polls', (state = INITIAL_STATE,
         };
     }
 
-    case RETRACT_VOTE: {
-        const { pollId }: { pollId: string; } = action;
+    case RESET_NB_UNREAD_POLLS: {
+        return {
+            ...state,
+            nbUnreadPolls: 0
+        };
+    }
 
+    case EDIT_POLL: {
         return {
             ...state,
             polls: {
                 ...state.polls,
-                [pollId]: {
-                    ...state.polls[pollId],
-                    showResults: false
+                [action.pollId]: {
+                    ...state.polls[action.pollId],
+                    editing: action.editing
                 }
             }
         };
     }
 
-    case RESET_NB_UNREAD_POLLS: {
+    case REMOVE_POLL: {
+        if (Object.keys(state.polls ?? {})?.length === 1) {
+            return {
+                ...state,
+                ...INITIAL_STATE
+            };
+        }
+
+        // eslint-disable-next-line @typescript-eslint/no-unused-vars
+        const { [action.pollId]: _removedPoll, ...newState } = state.polls;
+
         return {
             ...state,
-            nbUnreadPolls: 0
+            polls: {
+                ...newState
+            }
         };
     }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/polls/types.ts b/node_modules/@jitsi/react-native-sdk/react/features/polls/types.ts
index 4015c04..b59723b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/polls/types.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/polls/types.ts
@@ -27,13 +27,18 @@ export interface IPoll {
      * An array of answers:
      * the name of the answer name and a map of ids and names of voters voting for this option.
      */
-    answers: Array<{ name: string; voters: Array<string>; }>;
+    answers: Array<IAnswerData>;
 
     /**
      * Whether the poll vote is being edited/changed.
      */
     changingVote: boolean;
 
+    /**
+     * Whether poll is in edit mode or not?.
+     */
+    editing: boolean;
+
     /**
      * The last sent votes for this poll, or null if voting was skipped
      * Note: This is reset when voting/skipping, not when clicking "Change vote".
@@ -45,10 +50,15 @@ export interface IPoll {
      */
     question: string;
 
+    /**
+     * Whether poll is saved or not?.
+     */
+    saved: boolean;
+
     /**
      * ID of the sender of this poll.
      */
-    senderId: string;
+    senderId: string | undefined;
 
     /**
      * Whether the results should be shown instead of the answer form.
@@ -59,3 +69,16 @@ export interface IPoll {
 export interface IPollData extends IPoll {
     id: string;
 }
+
+export interface IAnswerData {
+
+    /**
+     * The answer name chosen for the poll.
+     */
+    name: string;
+
+    /**
+     * An array of voters.
+     */
+    voters: Array<string>;
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/actions.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/actions.native.ts
index af07437..ca31d80 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/actions.native.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/actions.native.ts
@@ -1,4 +1,8 @@
 import { IStore } from '../app/types';
+import { connect } from '../base/connection/actions.native';
+import { navigateRoot } from '../mobile/navigation/rootNavigationContainerRef';
+import { screen } from '../mobile/navigation/routes';
+import { showVisitorsQueue } from '../visitors/functions';
 
 /**
  * Action used to start the conference.
@@ -8,7 +12,12 @@ import { IStore } from '../app/types';
  * @returns {Function}
  */
 export function joinConference(options?: Object, _ignoreJoiningInProgress = false) {
-    // eslint-disable-next-line @typescript-eslint/no-empty-function
-    return async function(_dispatch: IStore['dispatch'], _getState: IStore['getState']) {
+    return async function(dispatch: IStore['dispatch'], getState: IStore['getState']) {
+        const _showVisitorsQueue = showVisitorsQueue(getState);
+
+        if (_showVisitorsQueue) {
+            dispatch(connect());
+            navigateRoot(screen.conference.root);
+        }
     };
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/actions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/actions.web.ts
index 21e1266..5cafbc4 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/actions.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/actions.web.ts
@@ -4,16 +4,13 @@ import { IStore } from '../app/types';
 import { updateConfig } from '../base/config/actions';
 import { getDialOutStatusUrl, getDialOutUrl } from '../base/config/functions';
 import { connect } from '../base/connection/actions';
-import { browser } from '../base/lib-jitsi-meet';
 import { createLocalTrack } from '../base/lib-jitsi-meet/functions';
-import { MEDIA_TYPE } from '../base/media/constants';
 import { isVideoMutedByUser } from '../base/media/functions';
 import { updateSettings } from '../base/settings/actions';
-import { replaceLocalTrack, trackAdded } from '../base/tracks/actions';
+import { replaceLocalTrack } from '../base/tracks/actions';
 import {
     createLocalTracksF,
     getLocalAudioTrack,
-    getLocalTracks,
     getLocalVideoTrack
 } from '../base/tracks/functions';
 import { openURLInBrowser } from '../base/util/openURLInBrowser';
@@ -23,7 +20,6 @@ import { NOTIFICATION_TIMEOUT_TYPE } from '../notifications/constants';
 import { INotificationProps } from '../notifications/types';
 
 import {
-    PREJOIN_INITIALIZED,
     PREJOIN_JOINING_IN_PROGRESS,
     SET_DEVICE_STATUS,
     SET_DIALOUT_COUNTRY,
@@ -39,7 +35,7 @@ import {
     getDialOutCountry,
     getFullDialOutNumber,
     isJoinByPhoneDialogVisible
-} from './functions';
+} from './functions.any';
 import logger from './logger';
 
 const dialOutStatusToKeyMap = {
@@ -188,23 +184,6 @@ export function dialOut(onSuccess: Function, onFail: Function) {
     };
 }
 
-/**
- * Adds all the newly created tracks to store on init.
- *
- * @param {Object[]} tracks - The newly created tracks.
- * @param {Object} errors - The errors from creating the tracks.
- *
- * @returns {Function}
- */
-export function initPrejoin(tracks: Object[], errors: Object) {
-    return async function(dispatch: IStore['dispatch']) {
-        dispatch(setPrejoinDeviceErrors(errors));
-        dispatch(prejoinInitialized());
-
-        tracks.forEach(track => dispatch(trackAdded(track)));
-    };
-}
-
 /**
  * Action used to start the conference.
  *
@@ -216,7 +195,7 @@ export function initPrejoin(tracks: Object[], errors: Object) {
  */
 export function joinConference(options?: Object, ignoreJoiningInProgress = false,
         jid?: string, password?: string) {
-    return async function(dispatch: IStore['dispatch'], getState: IStore['getState']) {
+    return function(dispatch: IStore['dispatch'], getState: IStore['getState']) {
         if (!ignoreJoiningInProgress) {
             const state = getState();
             const { joiningInProgress } = state['features/prejoin'];
@@ -230,35 +209,7 @@ export function joinConference(options?: Object, ignoreJoiningInProgress = false
 
         options && dispatch(updateConfig(options));
 
-        dispatch(connect(jid, password)).then(async () => {
-            // TODO keep this here till we move tracks and conference management from
-            // conference.js to react.
-            const state = getState();
-            let localTracks = getLocalTracks(state['features/base/tracks']);
-
-            // Do not signal audio/video tracks if the user joins muted.
-            for (const track of localTracks) {
-                // Always add the audio track on Safari because of a known issue where audio playout doesn't happen
-                // if the user joins audio and video muted.
-                if (track.muted && !(browser.isWebKitBased() && track.jitsiTrack
-                        && track.jitsiTrack.getType() === MEDIA_TYPE.AUDIO)) {
-                    try {
-                        await dispatch(replaceLocalTrack(track.jitsiTrack, null));
-                    } catch (error) {
-                        logger.error(`Failed to replace local track (${track.jitsiTrack}) with null: ${error}`);
-                    }
-                }
-            }
-
-            // Re-fetch the local tracks after muted tracks have been removed above.
-            // This is needed, because the tracks are effectively disposed by the replaceLocalTrack and should not be
-            // used anymore.
-            localTracks = getLocalTracks(getState()['features/base/tracks']);
-
-            const jitsiTracks = localTracks.map((t: any) => t.jitsiTrack);
-
-            APP.conference.startConference(jitsiTracks).catch(logger.error);
-        })
+        dispatch(connect(jid, password))
         .catch(() => {
             // There is nothing to do here. This is handled and dispatched in base/connection/actions.
         });
@@ -325,17 +276,6 @@ export function openDialInPage() {
     };
 }
 
-/**
- * Action used to signal that the prejoin page has been initialized.
- *
- * @returns {Object}
- */
-function prejoinInitialized() {
-    return {
-        type: PREJOIN_INITIALIZED
-    };
-}
-
 /**
  * Creates a new audio track based on a device id and replaces the current one.
  *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/components/web/PrejoinApp.tsx b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/components/web/PrejoinApp.tsx
index 899592a..0b1e0dd 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/components/web/PrejoinApp.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/components/web/PrejoinApp.tsx
@@ -1,5 +1,4 @@
 import React, { ComponentType } from 'react';
-import { batch } from 'react-redux';
 
 import BaseApp from '../../../base/app/components/BaseApp';
 import { setConfig } from '../../../base/config/actions';
@@ -8,7 +7,7 @@ import GlobalStyles from '../../../base/ui/components/GlobalStyles.web';
 import JitsiThemeProvider from '../../../base/ui/components/JitsiThemeProvider.web';
 import DialogContainer from '../../../base/ui/components/web/DialogContainer';
 import { setupInitialDevices } from '../../../conference/actions.web';
-import { initPrejoin } from '../../actions.web';
+import { initPrejoin } from '../../functions.web';
 
 import PrejoinThirdParty from './PrejoinThirdParty';
 
@@ -50,9 +49,6 @@ export default class PrejoinApp extends BaseApp<Props> {
             ? store.getState()['features/base/settings']
             : { startWithAudioMuted: undefined,
                 startWithVideoMuted: undefined };
-        const { locationURL } = store
-            ? store.getState()['features/base/connection']
-            : { locationURL: undefined };
 
         dispatch?.(setConfig({
             prejoinConfig: {
@@ -60,16 +56,14 @@ export default class PrejoinApp extends BaseApp<Props> {
             },
             startWithAudioMuted,
             startWithVideoMuted
-        }, locationURL));
+        }));
 
         await dispatch?.(setupInitialDevices());
         const { tryCreateLocalTracks, errors } = createPrejoinTracks();
 
         const tracks = await tryCreateLocalTracks;
 
-        batch(() => {
-            dispatch?.(initPrejoin(tracks, errors));
-        });
+        initPrejoin(tracks, errors, dispatch);
     }
 
     /**
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/functions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/functions.any.ts
new file mode 100644
index 0000000..06bbced
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/functions.any.ts
@@ -0,0 +1,211 @@
+import { IReduxState } from '../app/types';
+import { getRoomName } from '../base/conference/functions';
+import { getDialOutStatusUrl, getDialOutUrl } from '../base/config/functions.any';
+import {
+    MEETING_NAME_ENABLED,
+    UNSAFE_ROOM_WARNING
+} from '../base/flags/constants';
+import { getFeatureFlag } from '../base/flags/functions';
+import { isAudioMuted, isVideoMutedByUser } from '../base/media/functions';
+import { getLobbyConfig } from '../lobby/functions';
+
+
+/**
+ * Selector for the visibility of the 'join by phone' button.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isJoinByPhoneButtonVisible(state: IReduxState): boolean {
+    return Boolean(getDialOutUrl(state) && getDialOutStatusUrl(state));
+}
+
+/**
+ * Selector for determining if the device status strip is visible or not.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isDeviceStatusVisible(state: IReduxState): boolean {
+    return !(isAudioMuted(state) && isVideoMutedByUser(state))
+    && !state['features/base/config'].startSilent;
+}
+
+/**
+ * Selector for determining if the display name is mandatory.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isDisplayNameRequired(state: IReduxState): boolean {
+    return Boolean(state['features/lobby']?.isDisplayNameRequiredError
+        || state['features/base/config']?.requireDisplayName);
+}
+
+/**
+ * Selector for determining if the prejoin page is enabled in config. Defaults to `true`.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isPrejoinEnabledInConfig(state: IReduxState): boolean {
+    return state['features/base/config'].prejoinConfig?.enabled ?? true;
+}
+
+/**
+ * Selector for determining if the prejoin display name field is visible.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isPrejoinDisplayNameVisible(state: IReduxState): boolean {
+    return !state['features/base/config'].prejoinConfig?.hideDisplayName;
+}
+
+/**
+ * Returns the text for the prejoin status bar.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {string}
+ */
+export function getDeviceStatusText(state: IReduxState): string {
+    return state['features/prejoin']?.deviceStatusText;
+}
+
+/**
+ * Returns the type of the prejoin status bar: 'ok'|'warning'.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {string}
+ */
+export function getDeviceStatusType(state: IReduxState): string {
+    return state['features/prejoin']?.deviceStatusType;
+}
+
+/**
+ * Returns the 'conferenceUrl' used for dialing out.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {string}
+ */
+export function getDialOutConferenceUrl(state: IReduxState): string {
+    return `${getRoomName(state)}@${state['features/base/config'].hosts?.muc}`;
+}
+
+/**
+ * Selector for getting the dial out country.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {Object}
+ */
+export function getDialOutCountry(state: IReduxState) {
+    return state['features/prejoin'].dialOutCountry;
+}
+
+/**
+ * Selector for getting the dial out number (without prefix).
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {string}
+ */
+export function getDialOutNumber(state: IReduxState): string {
+    return state['features/prejoin'].dialOutNumber;
+}
+
+/**
+ * Selector for getting the dial out status while calling.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {string}
+ */
+export function getDialOutStatus(state: IReduxState): string {
+    return state['features/prejoin'].dialOutStatus;
+}
+
+/**
+ * Returns the full dial out number (containing country code and +).
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {string}
+ */
+export function getFullDialOutNumber(state: IReduxState): string {
+    const dialOutNumber = getDialOutNumber(state);
+    const country = getDialOutCountry(state);
+
+    return `+${country.dialCode}${dialOutNumber}`;
+}
+
+/**
+ * Selector for getting the error if any while creating streams.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {string}
+ */
+export function getRawError(state: IReduxState): string {
+    return state['features/prejoin']?.rawError;
+}
+
+/**
+ * Selector for getting the visibility state for the 'JoinByPhoneDialog'.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isJoinByPhoneDialogVisible(state: IReduxState): boolean {
+    return state['features/prejoin']?.showJoinByPhoneDialog;
+}
+
+/**
+ * Returns true if the prejoin page is enabled and no flag
+ * to bypass showing the page is present.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isPrejoinPageVisible(state: IReduxState): boolean {
+    return Boolean(navigator.product !== 'ReactNative'
+        && isPrejoinEnabledInConfig(state)
+        && state['features/prejoin']?.showPrejoin
+        && !(state['features/base/config'].enableForcedReload && state['features/prejoin'].skipPrejoinOnReload));
+}
+
+/**
+ * Returns true if we should auto-knock in case lobby is enabled for the room.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function shouldAutoKnock(state: IReduxState): boolean {
+    const { iAmRecorder, iAmSipGateway } = state['features/base/config'];
+    const { userSelectedSkipPrejoin } = state['features/base/settings'];
+    const { autoKnock } = getLobbyConfig(state);
+
+    return Boolean(((isPrejoinEnabledInConfig(state) && !userSelectedSkipPrejoin)
+            || autoKnock || (iAmRecorder && iAmSipGateway))
+        && !state['features/lobby'].knocking);
+}
+
+/**
+ * Returns true if the unsafe room warning flag is enabled.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isUnsafeRoomWarningEnabled(state: IReduxState): boolean {
+    const { enableInsecureRoomNameWarning = false } = state['features/base/config'];
+
+    return getFeatureFlag(state, UNSAFE_ROOM_WARNING, enableInsecureRoomNameWarning);
+}
+
+/**
+ * Returns true if the room name is enabled.
+ *
+ * @param {IReduxState} state - The state of the app.
+ * @returns {boolean}
+ */
+export function isRoomNameEnabled(state: IReduxState): boolean {
+    const { hideConferenceSubject = false } = state['features/base/config'];
+
+    return getFeatureFlag(state, MEETING_NAME_ENABLED, true)
+        && !hideConferenceSubject;
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/functions.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/functions.native.ts
new file mode 100644
index 0000000..fb2a6bc
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/functions.native.ts
@@ -0,0 +1 @@
+export * from './functions.any';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/functions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/functions.web.ts
new file mode 100644
index 0000000..675eba7
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/functions.web.ts
@@ -0,0 +1,32 @@
+import { batch } from 'react-redux';
+
+import { IStore } from '../app/types';
+import { trackAdded } from '../base/tracks/actions.any';
+
+import { PREJOIN_INITIALIZED } from './actionTypes';
+import { setPrejoinDeviceErrors } from './actions.web';
+
+export * from './functions.any';
+
+/**
+ * Adds all the newly created tracks to store on init.
+ *
+ * @param {Object[]} tracks - The newly created tracks.
+ * @param {Object} errors - The errors from creating the tracks.
+ * @param {Function} dispatch - The redux dispatch function.
+ * @returns {void}
+ */
+export function initPrejoin(tracks: Object[], errors: Object, dispatch?: IStore['dispatch']) {
+    if (!dispatch) {
+        return;
+    }
+
+    batch(() => {
+        dispatch(setPrejoinDeviceErrors(errors));
+        dispatch({
+            type: PREJOIN_INITIALIZED
+        });
+
+        tracks.forEach(track => dispatch(trackAdded(track)));
+    });
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/middleware.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/middleware.web.ts
index 32369fa..8f7cfb9 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/prejoin/middleware.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/prejoin/middleware.web.ts
@@ -16,7 +16,7 @@ import {
     setDeviceStatusWarning,
     setJoiningInProgress
 } from './actions';
-import { isPrejoinPageVisible } from './functions';
+import { isPrejoinPageVisible } from './functions.any';
 
 /**
  * The redux middleware for {@link PrejoinPage}.
@@ -24,7 +24,7 @@ import { isPrejoinPageVisible } from './functions';
  * @param {Store} store - The redux store.
  * @returns {Function}
  */
-MiddlewareRegistry.register(store => next => async action => {
+MiddlewareRegistry.register(store => next => action => {
     switch (action.type) {
     case SET_AUDIO_MUTED: {
         if (isPrejoinPageVisible(store.getState())) {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/reactions/components/native/RaiseHandButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/reactions/components/native/RaiseHandButton.tsx
index fafe68f..6cc94f5 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/reactions/components/native/RaiseHandButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/reactions/components/native/RaiseHandButton.tsx
@@ -40,6 +40,11 @@ interface IProps extends AbstractButtonProps {
      */
     _raisedHand: boolean;
 
+    /**
+     * Whether or not the click is disabled.
+     */
+    disableClick?: boolean;
+
     /**
      * Used to close the overflow menu after raise hand is clicked.
      */
@@ -75,8 +80,14 @@ class RaiseHandButton extends Component<IProps> {
      * @returns {void}
      */
     _onClick() {
+        const { disableClick, onCancel } = this.props;
+
+        if (disableClick) {
+            return;
+        }
+
         this._toggleRaisedHand();
-        this.props.onCancel();
+        onCancel();
     }
 
     /**
@@ -159,4 +170,23 @@ function _mapStateToProps(state: IReduxState) {
     };
 }
 
+/**
+ * Maps part of the Redux state to the props of this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @private
+ * @returns {IProps}
+ */
+function _standaloneMapStateToProps(state: IReduxState) {
+    const _enabled = getFeatureFlag(state, RAISE_HAND_ENABLED, true);
+
+    return {
+        _enabled
+    };
+}
+
+const StandaloneRaiseHandButton = translate(connect(_standaloneMapStateToProps)(RaiseHandButton));
+
+export { StandaloneRaiseHandButton };
+
 export default translate(connect(_mapStateToProps)(RaiseHandButton));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/reactions/components/web/RaiseHandButton.ts b/node_modules/@jitsi/react-native-sdk/react/features/reactions/components/web/RaiseHandButton.ts
index f4dd2fd..d71f26b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/reactions/components/web/RaiseHandButton.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/reactions/components/web/RaiseHandButton.ts
@@ -2,7 +2,7 @@ import { connect } from 'react-redux';
 
 import { createToolbarEvent } from '../../../analytics/AnalyticsEvents';
 import { sendAnalytics } from '../../../analytics/functions';
-import { IReduxState } from '../../../app/types';
+import { IReduxState, IStore } from '../../../app/types';
 import { translate } from '../../../base/i18n/functions';
 import { IconRaiseHand } from '../../../base/icons/svg';
 import { raiseHand } from '../../../base/participants/actions';
@@ -15,6 +15,16 @@ import AbstractButton, { IProps as AbstractButtonProps } from '../../../base/too
  */
 interface IProps extends AbstractButtonProps {
 
+    /**
+     * Whether or not the click is disabled.
+     */
+    disableClick?: boolean;
+
+    /**
+     * Redux dispatch function.
+     */
+    dispatch: IStore['dispatch'];
+
     /**
      * Whether or not the hand is raised.
      */
@@ -51,7 +61,11 @@ class RaiseHandButton extends AbstractButton<IProps> {
      * @returns {void}
      */
     _handleClick() {
-        const { dispatch, raisedHand } = this.props;
+        const { disableClick, dispatch, raisedHand } = this.props;
+
+        if (disableClick) {
+            return;
+        }
 
         sendAnalytics(createToolbarEvent(
             'raise.hand',
@@ -76,4 +90,6 @@ const mapStateToProps = (state: IReduxState) => {
     };
 };
 
+export { RaiseHandButton };
+
 export default translate(connect(mapStateToProps)(RaiseHandButton));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/reactions/hooks.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/reactions/hooks.web.ts
new file mode 100644
index 0000000..e49d569
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/reactions/hooks.web.ts
@@ -0,0 +1,23 @@
+import { useSelector } from 'react-redux';
+
+import ReactionsMenuButton from './components/web/ReactionsMenuButton';
+import { isReactionsButtonEnabled } from './functions';
+
+const reactions = {
+    key: 'reactions',
+    Content: ReactionsMenuButton,
+    group: 2
+};
+
+/**
+ * A hook that returns the reactions button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useReactionsButton() {
+    const reactionsButtonEnabled = useSelector(isReactionsButtonEnabled);
+
+    if (reactionsButtonEnabled) {
+        return reactions;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/actions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/actions.any.ts
index ac10025..77975fa 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/actions.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/actions.any.ts
@@ -32,7 +32,10 @@ import {
     START_LOCAL_RECORDING,
     STOP_LOCAL_RECORDING
 } from './actionTypes';
-import { START_RECORDING_NOTIFICATION_ID } from './constants';
+import {
+    RECORDING_METADATA_ID,
+    START_RECORDING_NOTIFICATION_ID
+} from './constants';
 import {
     getRecordButtonProps,
     getRecordingLink,
@@ -135,7 +138,7 @@ export function setLiveStreamKey(streamKey: string) {
  * @returns {Function}
  */
 export function showPendingRecordingNotification(streamType: string) {
-    return async (dispatch: IStore['dispatch']) => {
+    return (dispatch: IStore['dispatch']) => {
         const isLiveStreaming
             = streamType === JitsiMeetJS.constants.recording.mode.STREAM;
         const dialogProps = isLiveStreaming ? {
@@ -145,7 +148,7 @@ export function showPendingRecordingNotification(streamType: string) {
             descriptionKey: 'recording.pending',
             titleKey: 'dialog.recording'
         };
-        const notification = await dispatch(showNotification({
+        const notification = dispatch(showNotification({
             ...dialogProps
         }, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
 
@@ -451,6 +454,9 @@ export function showStartRecordingNotificationWithCallback(openRecordingDialog:
                     });
 
                     if (autoTranscribeOnRecord) {
+                        conference?.getMetadataHandler().setMetadata(RECORDING_METADATA_ID, {
+                            isTranscribingEnabled: true
+                        });
                         dispatch(setRequestingSubtitles(true, false, null));
                     }
                 } else {
@@ -460,6 +466,6 @@ export function showStartRecordingNotificationWithCallback(openRecordingDialog:
                 dispatch(hideNotification(START_RECORDING_NOTIFICATION_ID));
             } ],
             appearance: NOTIFICATION_TYPE.NORMAL
-        }, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
+        }, NOTIFICATION_TIMEOUT_TYPE.LONG));
     };
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/AbstractRecordingLabel.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/AbstractRecordingLabel.ts
index 74a28a2..42a8b22 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/AbstractRecordingLabel.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/AbstractRecordingLabel.ts
@@ -5,8 +5,8 @@ import { IReduxState } from '../../app/types';
 import { JitsiRecordingConstants } from '../../base/lib-jitsi-meet';
 import { isRecorderTranscriptionsRunning } from '../../transcribing/functions';
 import {
-    getActiveSession,
     getSessionStatusToShow,
+    isLiveStreamingRunning,
     isRecordingRunning,
     isRemoteParticipantRecordingLocally
 } from '../functions';
@@ -81,9 +81,9 @@ export function _mapStateToProps(state: IReduxState, ownProps: any) {
     const { mode } = ownProps;
     const isLiveStreamingLabel = mode === JitsiRecordingConstants.mode.STREAM;
     const _isTranscribing = isRecorderTranscriptionsRunning(state);
-    const isLivestreamingRunning = Boolean(getActiveSession(state, JitsiRecordingConstants.mode.STREAM));
+    const _isLivestreamingRunning = isLiveStreamingRunning(state);
     const _isVisible = isLiveStreamingLabel
-        ? isLivestreamingRunning // this is the livestreaming label
+        ? _isLivestreamingRunning // this is the livestreaming label
         : isRecordingRunning(state) || isRemoteParticipantRecordingLocally(state)
             || _isTranscribing; // this is the recording label
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/LiveStream/AbstractLiveStreamButton.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/LiveStream/AbstractLiveStreamButton.ts
index d3b93b5..ffb162d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/LiveStream/AbstractLiveStreamButton.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/LiveStream/AbstractLiveStreamButton.ts
@@ -2,13 +2,12 @@ import { IReduxState } from '../../../app/types';
 import { IconSites } from '../../../base/icons/svg';
 import { MEET_FEATURES } from '../../../base/jwt/constants';
 import { isJwtFeatureEnabled } from '../../../base/jwt/functions';
-import { JitsiRecordingConstants } from '../../../base/lib-jitsi-meet';
 import { isLocalParticipantModerator } from '../../../base/participants/functions';
 import AbstractButton, { IProps as AbstractButtonProps } from '../../../base/toolbox/components/AbstractButton';
 import { isInBreakoutRoom } from '../../../breakout-rooms/functions';
 import { maybeShowPremiumFeatureDialog } from '../../../jaas/actions';
 import { isRecorderTranscriptionsRunning } from '../../../transcribing/functions';
-import { getActiveSession, isCloudRecordingRunning } from '../../functions';
+import { isCloudRecordingRunning, isLiveStreamingButtonVisible, isLiveStreamingRunning } from '../../functions';
 
 import { getLiveStreaming } from './functions';
 
@@ -73,10 +72,10 @@ export default class AbstractLiveStreamButton<P extends IProps> extends Abstract
      * @protected
      * @returns {void}
      */
-    async _handleClick() {
+    _handleClick() {
         const { dispatch } = this.props;
 
-        const dialogShown = await dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
+        const dialogShown = dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
 
         if (!dialogShown) {
             this._onHandleClick();
@@ -133,11 +132,12 @@ export function _mapStateToProps(state: IReduxState, ownProps: IProps) {
         const isModerator = isLocalParticipantModerator(state);
         const liveStreaming = getLiveStreaming(state);
 
-        if (isModerator) {
-            visible = liveStreaming.enabled ? isJwtFeatureEnabled(state, 'livestreaming', true) : false;
-        } else {
-            visible = false;
-        }
+        visible = isLiveStreamingButtonVisible({
+            localParticipantIsModerator: isModerator,
+            liveStreamingEnabled: liveStreaming?.enabled,
+            liveStreamingEnabledInJwt: isJwtFeatureEnabled(state, 'livestreaming', true),
+            isInBreakoutRoom: isInBreakoutRoom(state)
+        });
     }
 
     // disable the button if the recording is running.
@@ -149,12 +149,11 @@ export function _mapStateToProps(state: IReduxState, ownProps: IProps) {
     // disable the button if we are in a breakout room.
     if (isInBreakoutRoom(state)) {
         _disabled = true;
-        visible = false;
     }
 
     return {
         _disabled,
-        _isLiveStreamRunning: Boolean(getActiveSession(state, JitsiRecordingConstants.mode.STREAM)),
+        _isLiveStreamRunning: isLiveStreamingRunning(state),
         _tooltip,
         visible
     };
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/AbstractHighlightButton.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/AbstractHighlightButton.ts
index 184475f..f449897 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/AbstractHighlightButton.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/AbstractHighlightButton.ts
@@ -77,9 +77,9 @@ export default class AbstractHighlightButton<P extends IProps, S={}> extends Com
                 titleKey: 'recording.highlightMoment',
                 uid: PROMPT_RECORDING_NOTIFICATION_ID,
                 customActionNameKey: [ 'localRecording.start' ],
-                customActionHandler: [ async () => {
+                customActionHandler: [ () => {
                     dispatch(hideNotification(PROMPT_RECORDING_NOTIFICATION_ID));
-                    const dialogShown = await dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
+                    const dialogShown = dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
 
                     if (!dialogShown) {
                         dispatch(openDialog(StartRecordingDialog));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/AbstractRecordButton.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/AbstractRecordButton.ts
index dd434fc..a606e9d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/AbstractRecordButton.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/AbstractRecordButton.ts
@@ -69,7 +69,7 @@ export default class AbstractRecordButton<P extends IProps> extends AbstractButt
      * @protected
      * @returns {void}
      */
-    async _handleClick() {
+    _handleClick() {
         const { _isRecordingRunning, dispatch } = this.props;
 
         sendAnalytics(createToolbarEvent(
@@ -78,7 +78,7 @@ export default class AbstractRecordButton<P extends IProps> extends AbstractButt
                 'is_recording': _isRecordingRunning,
                 type: JitsiRecordingConstants.mode.FILE
             }));
-        const dialogShown = await dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
+        const dialogShown = dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
 
         if (!dialogShown) {
             this._onHandleClick();
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/LocalRecordingManager.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/LocalRecordingManager.native.ts
index 8c48289..4547640 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/LocalRecordingManager.native.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/LocalRecordingManager.native.ts
@@ -7,7 +7,7 @@ interface ILocalRecordingManager {
         on: boolean;
         withVideo: boolean;
     };
-    startLocalRecording: (store: IStore, onlySelf: boolean) => void;
+    startLocalRecording: (store: IStore, onlySelf: boolean) => Promise<void>;
     stopLocalRecording: () => void;
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/LocalRecordingManager.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/LocalRecordingManager.web.ts
index 6cd9959..a9f5610 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/LocalRecordingManager.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/LocalRecordingManager.web.ts
@@ -28,7 +28,7 @@ interface ILocalRecordingManager {
     roomName: string;
     saveRecording: (recordingData: Blob[], filename: string) => void;
     selfRecording: ISelfRecording;
-    startLocalRecording: (store: IStore, onlySelf: boolean) => void;
+    startLocalRecording: (store: IStore, onlySelf: boolean) => Promise<void>;
     stopLocalRecording: () => void;
     stream: MediaStream | undefined;
     totalSize: number;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/web/HighlightButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/web/HighlightButton.tsx
index 55e055b..5284a64 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/web/HighlightButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/components/Recording/web/HighlightButton.tsx
@@ -133,9 +133,9 @@ export class HighlightButton extends AbstractHighlightButton<IProps, IState> {
     *
     * @returns {void}
     */
-    async _onOpenDialog() {
+    _onOpenDialog() {
         const { dispatch } = this.props;
-        const dialogShown = await dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
+        const dialogShown = dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
 
         if (!dialogShown) {
             dispatch(openDialog(StartRecordingDialog));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/functions.ts
index e759083..b7adffa 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/functions.ts
@@ -11,7 +11,7 @@ import {
     isLocalParticipantModerator
 } from '../base/participants/functions';
 import { registerSound, unregisterSound } from '../base/sounds/actions';
-import { isInBreakoutRoom } from '../breakout-rooms/functions';
+import { isInBreakoutRoom as isInBreakoutRoomF } from '../breakout-rooms/functions';
 import { isEnabled as isDropboxEnabled } from '../dropbox/functions';
 import { extractFqnFromPath } from '../dynamic-branding/functions.any';
 import { canAddTranscriber, isRecorderTranscriptionsRunning } from '../transcribing/functions';
@@ -168,6 +168,16 @@ export function isCloudRecordingRunning(state: IReduxState) {
     return Boolean(getActiveSession(state, JitsiRecordingConstants.mode.FILE));
 }
 
+/**
+ * Returns true if there is a live streaming running.
+ *
+ * @param {IReduxState} state - The redux state to search in.
+ * @returns {boolean}
+ */
+export function isLiveStreamingRunning(state: IReduxState) {
+    return Boolean(getActiveSession(state, JitsiRecordingConstants.mode.STREAM));
+}
+
 /**
  * Returns true if there is a recording session running.
  *
@@ -262,13 +272,13 @@ export function getRecordButtonProps(state: IReduxState) {
     }
 
     // disable the button if the livestreaming is running.
-    if (visible && getActiveSession(state, JitsiRecordingConstants.mode.STREAM)) {
+    if (visible && isLiveStreamingRunning(state)) {
         disabled = true;
         tooltip = 'dialog.recordingDisabledBecauseOfActiveLiveStreamingTooltip';
     }
 
     // disable the button if we are in a breakout room.
-    if (isInBreakoutRoom(state)) {
+    if (isInBreakoutRoomF(state)) {
         disabled = true;
         visible = false;
     }
@@ -404,3 +414,31 @@ export function registerRecordingAudioFiles(dispatch: IStore['dispatch'], should
         RECORDING_ON_SOUND_ID,
         getSoundFileSrc(RECORDING_ON_SOUND_FILE, language)));
 }
+
+/**
+ * Returns true if the live streaming button should be visible.
+ *
+ * @param {boolean} localParticipantIsModerator - True if the local participant is moderator.
+ * @param {boolean} liveStreamingEnabled - True if the live streaming is enabled.
+ * @param {boolean} liveStreamingEnabledInJwt - True if the lives treaming feature is enabled in JWT.
+ * @returns {boolean}
+ */
+export function isLiveStreamingButtonVisible({
+    localParticipantIsModerator,
+    liveStreamingEnabled,
+    liveStreamingEnabledInJwt,
+    isInBreakoutRoom
+}: {
+    isInBreakoutRoom: boolean;
+    liveStreamingEnabled: boolean;
+    liveStreamingEnabledInJwt: boolean;
+    localParticipantIsModerator: boolean;
+}) {
+    let visible = false;
+
+    if (localParticipantIsModerator && !isInBreakoutRoom) {
+        visible = liveStreamingEnabled ? liveStreamingEnabledInJwt : false;
+    }
+
+    return visible;
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/hooks.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/hooks.web.ts
new file mode 100644
index 0000000..3ae4baf
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/hooks.web.ts
@@ -0,0 +1,63 @@
+import { useSelector } from 'react-redux';
+
+import { IReduxState } from '../app/types';
+import { isJwtFeatureEnabled } from '../base/jwt/functions';
+import { isLocalParticipantModerator } from '../base/participants/functions';
+import { isInBreakoutRoom } from '../breakout-rooms/functions';
+
+import { getLiveStreaming } from './components/LiveStream/functions';
+import LiveStreamButton from './components/LiveStream/web/LiveStreamButton';
+import RecordButton from './components/Recording/web/RecordButton';
+import { getRecordButtonProps, isLiveStreamingButtonVisible } from './functions';
+
+
+const recording = {
+    key: 'recording',
+    Content: RecordButton,
+    group: 2
+};
+
+const livestreaming = {
+    key: 'livestreaming',
+    Content: LiveStreamButton,
+    group: 2
+};
+
+/**
+ * A hook that returns the recording button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useRecordingButton() {
+    const recordingProps = useSelector(getRecordButtonProps);
+    const toolbarButtons = useSelector((state: IReduxState) => state['features/toolbox'].toolbarButtons);
+
+    if (toolbarButtons?.includes('recording') && recordingProps.visible) {
+        return recording;
+    }
+
+}
+
+/**
+ * A hook that returns the livestreaming button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useLiveStreamingButton() {
+    const toolbarButtons = useSelector((state: IReduxState) => state['features/toolbox'].toolbarButtons);
+    const localParticipantIsModerator = useSelector(isLocalParticipantModerator);
+    const liveStreaming = useSelector(getLiveStreaming);
+    const liveStreamingEnabledInJwt
+        = useSelector((state: IReduxState) => isJwtFeatureEnabled(state, 'livestreaming', true));
+    const _isInBreakoutRoom = useSelector(isInBreakoutRoom);
+
+    if (toolbarButtons?.includes('recording')
+            && isLiveStreamingButtonVisible({
+                localParticipantIsModerator,
+                liveStreamingEnabled: liveStreaming?.enabled,
+                liveStreamingEnabledInJwt,
+                isInBreakoutRoom: _isInBreakoutRoom
+            })) {
+        return livestreaming;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/recording/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/recording/middleware.ts
index a82828f..bc95aa5 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/recording/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/recording/middleware.ts
@@ -72,7 +72,7 @@ StateListenerRegistry.register(
  * @param {Store} store - The redux store.
  * @returns {Function}
  */
-MiddlewareRegistry.register(({ dispatch, getState }) => next => async action => {
+MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
     let oldSessionData;
 
     if (action.type === RECORDING_SESSION_UPDATED) {
@@ -101,7 +101,7 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => async action =>
             (recorderSession: any) => {
                 if (recorderSession) {
                     recorderSession.getID() && dispatch(updateRecordingSessionData(recorderSession));
-                    recorderSession.getError() && _showRecordingErrorNotification(recorderSession, dispatch);
+                    recorderSession.getError() && _showRecordingErrorNotification(recorderSession, dispatch, getState);
                 }
 
                 return;
@@ -114,9 +114,11 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => async action =>
         const { localRecording } = getState()['features/base/config'];
         const { onlySelf } = action;
 
-        try {
-            await LocalRecordingManager.startLocalRecording({ dispatch,
-                getState }, action.onlySelf);
+        LocalRecordingManager.startLocalRecording({
+            dispatch,
+            getState
+        }, action.onlySelf)
+        .then(() => {
             const props = {
                 descriptionKey: 'recording.on',
                 titleKey: 'dialog.recording'
@@ -133,9 +135,11 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => async action =>
             dispatch(updateLocalRecordingStatus(true, onlySelf));
             sendAnalytics(createRecordingEvent('started', `local${onlySelf ? '.self' : ''}`));
             if (typeof APP !== 'undefined') {
-                APP.API.notifyRecordingStatusChanged(true, 'local');
+                APP.API.notifyRecordingStatusChanged(
+                    true, 'local', undefined, isRecorderTranscriptionsRunning(getState()));
             }
-        } catch (err: any) {
+        })
+        .catch(err => {
             logger.error('Capture failed', err);
 
             let descriptionKey = 'recording.error';
@@ -154,11 +158,12 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => async action =>
             };
 
             if (typeof APP !== 'undefined') {
-                APP.API.notifyRecordingStatusChanged(false, 'local', err.message);
+                APP.API.notifyRecordingStatusChanged(
+                    false, 'local', err.message, isRecorderTranscriptionsRunning(getState()));
             }
 
             dispatch(showErrorNotification(props, NOTIFICATION_TIMEOUT_TYPE.MEDIUM));
-        }
+        });
         break;
     }
 
@@ -172,7 +177,8 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => async action =>
                 dispatch(playSound(RECORDING_OFF_SOUND_ID));
             }
             if (typeof APP !== 'undefined') {
-                APP.API.notifyRecordingStatusChanged(false, 'local');
+                APP.API.notifyRecordingStatusChanged(
+                    false, 'local', undefined, isRecorderTranscriptionsRunning(getState()));
             }
         }
         break;
@@ -202,76 +208,79 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => async action =>
         if (updatedSessionData?.status === PENDING && oldSessionData?.status !== PENDING) {
             dispatch(showPendingRecordingNotification(mode));
             dispatch(hideNotification(START_RECORDING_NOTIFICATION_ID));
-        } else {
-            dispatch(hidePendingRecordingNotification(mode));
-
-            if (updatedSessionData?.status === ON) {
-
-                // We receive 2 updates of the session status ON. The first one is from jibri when it joins.
-                // The second one is from jicofo which will deliever the initiator value. Since the start
-                // recording notification uses the initiator value we skip the jibri update and show the
-                // notification on the update from jicofo.
-                // FIXE: simplify checks when the backend start sending only one status ON update containing the
-                // initiator.
-                if (initiator && !oldSessionData?.initiator) {
-                    if (typeof recordingLimit === 'object') {
-                        dispatch(showRecordingLimitNotification(mode));
-                    } else {
-                        dispatch(showStartedRecordingNotification(mode, initiator, action.sessionData.id));
-                    }
-                }
-
-                if (oldSessionData?.status !== ON) {
-                    sendAnalytics(createRecordingEvent('start', mode));
-
-                    let soundID;
-
-                    if (mode === JitsiRecordingConstants.mode.FILE && !isRecorderTranscriptionsRunning(state)) {
-                        soundID = RECORDING_ON_SOUND_ID;
-                    } else if (mode === JitsiRecordingConstants.mode.STREAM) {
-                        soundID = LIVE_STREAMING_ON_SOUND_ID;
-                    }
-
-                    if (soundID) {
-                        dispatch(playSound(soundID));
-                    }
+            break;
+        }
 
-                    if (typeof APP !== 'undefined') {
-                        APP.API.notifyRecordingStatusChanged(true, mode);
-                    }
-                }
-            } else if (updatedSessionData?.status === OFF && oldSessionData?.status !== OFF) {
-                if (terminator) {
-                    dispatch(
-                        showStoppedRecordingNotification(
-                            mode, getParticipantDisplayName(state, getResourceId(terminator))));
+        dispatch(hidePendingRecordingNotification(mode));
+
+        if (updatedSessionData?.status === ON) {
+
+            // We receive 2 updates of the session status ON. The first one is from jibri when it joins.
+            // The second one is from jicofo which will deliever the initiator value. Since the start
+            // recording notification uses the initiator value we skip the jibri update and show the
+            // notification on the update from jicofo.
+            // FIXE: simplify checks when the backend start sending only one status ON update containing the
+            // initiator.
+            if (initiator && !oldSessionData?.initiator) {
+                if (typeof recordingLimit === 'object') {
+                    dispatch(showRecordingLimitNotification(mode));
+                } else {
+                    dispatch(showStartedRecordingNotification(mode, initiator, action.sessionData.id));
                 }
+            }
 
-                let duration = 0, soundOff, soundOn;
+            if (oldSessionData?.status !== ON) {
+                sendAnalytics(createRecordingEvent('start', mode));
 
-                if (oldSessionData?.timestamp) {
-                    duration
-                        = (Date.now() / 1000) - oldSessionData.timestamp;
-                }
-                sendAnalytics(createRecordingEvent('stop', mode, duration));
+                let soundID;
 
                 if (mode === JitsiRecordingConstants.mode.FILE && !isRecorderTranscriptionsRunning(state)) {
-                    soundOff = RECORDING_OFF_SOUND_ID;
-                    soundOn = RECORDING_ON_SOUND_ID;
+                    soundID = RECORDING_ON_SOUND_ID;
                 } else if (mode === JitsiRecordingConstants.mode.STREAM) {
-                    soundOff = LIVE_STREAMING_OFF_SOUND_ID;
-                    soundOn = LIVE_STREAMING_ON_SOUND_ID;
+                    soundID = LIVE_STREAMING_ON_SOUND_ID;
                 }
 
-                if (soundOff && soundOn) {
-                    dispatch(stopSound(soundOn));
-                    dispatch(playSound(soundOff));
+                if (soundID) {
+                    dispatch(playSound(soundID));
                 }
 
                 if (typeof APP !== 'undefined') {
-                    APP.API.notifyRecordingStatusChanged(false, mode);
+                    APP.API.notifyRecordingStatusChanged(
+                        true, mode, undefined, isRecorderTranscriptionsRunning(state));
                 }
             }
+        } else if (updatedSessionData?.status === OFF && oldSessionData?.status !== OFF) {
+            if (terminator) {
+                dispatch(
+                    showStoppedRecordingNotification(
+                        mode, getParticipantDisplayName(state, getResourceId(terminator))));
+            }
+
+            let duration = 0, soundOff, soundOn;
+
+            if (oldSessionData?.timestamp) {
+                duration
+                    = (Date.now() / 1000) - oldSessionData.timestamp;
+            }
+            sendAnalytics(createRecordingEvent('stop', mode, duration));
+
+            if (mode === JitsiRecordingConstants.mode.FILE && !isRecorderTranscriptionsRunning(state)) {
+                soundOff = RECORDING_OFF_SOUND_ID;
+                soundOn = RECORDING_ON_SOUND_ID;
+            } else if (mode === JitsiRecordingConstants.mode.STREAM) {
+                soundOff = LIVE_STREAMING_OFF_SOUND_ID;
+                soundOn = LIVE_STREAMING_ON_SOUND_ID;
+            }
+
+            if (soundOff && soundOn) {
+                dispatch(stopSound(soundOn));
+                dispatch(playSound(soundOff));
+            }
+
+            if (typeof APP !== 'undefined') {
+                APP.API.notifyRecordingStatusChanged(
+                    false, mode, undefined, isRecorderTranscriptionsRunning(state));
+            }
         }
 
         break;
@@ -312,14 +321,15 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => async action =>
  * in recording session.
  *
  * @private
- * @param {Object} recorderSession - The recorder session model from the
+ * @param {Object} session - The recorder session model from the
  * lib.
  * @param {Dispatch} dispatch - The Redux Dispatch function.
+ * @param {Function} getState - The Redux getState function.
  * @returns {void}
  */
-function _showRecordingErrorNotification(recorderSession: any, dispatch: IStore['dispatch']) {
-    const mode = recorderSession.getMode();
-    const error = recorderSession.getError();
+function _showRecordingErrorNotification(session: any, dispatch: IStore['dispatch'], getState: IStore['getState']) {
+    const mode = session.getMode();
+    const error = session.getError();
     const isStreamMode = mode === JitsiMeetJS.constants.recording.mode.STREAM;
 
     switch (error) {
@@ -367,6 +377,6 @@ function _showRecordingErrorNotification(recorderSession: any, dispatch: IStore[
     }
 
     if (typeof APP !== 'undefined') {
-        APP.API.notifyRecordingStatusChanged(false, mode, error);
+        APP.API.notifyRecordingStatusChanged(false, mode, error, isRecorderTranscriptionsRunning(getState()));
     }
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/remote-control/keycodes.ts b/node_modules/@jitsi/react-native-sdk/react/features/remote-control/keycodes.ts
index 55f4b95..39a4b23 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/remote-control/keycodes.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/remote-control/keycodes.ts
@@ -40,7 +40,7 @@ export const KEYS = {
     ALT: 'alt',
     CONTROL: 'control',
     SHIFT: 'shift',
-    CAPS_LOCK: 'caps_lock', // not supported by robotjs
+    CAPS_LOCK: 'capslock',
     SPACE: 'space',
     PRINTSCREEN: 'printscreen',
     INSERT: 'insert',
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/remote-control/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/remote-control/middleware.ts
index f160a37..d7cce22 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/remote-control/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/remote-control/middleware.ts
@@ -19,7 +19,7 @@ import './subscriber';
  * @param {Store} store - The redux store.
  * @returns {Function}
  */
-MiddlewareRegistry.register(store => next => async action => {
+MiddlewareRegistry.register(store => next => action => {
     switch (action.type) {
     case APP_WILL_MOUNT: {
         const { dispatch } = store;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/room-lock/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/room-lock/middleware.ts
index b83c813..61a24e2 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/room-lock/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/room-lock/middleware.ts
@@ -1,7 +1,5 @@
 import { AnyAction } from 'redux';
 
-// @ts-expect-error
-import UIEvents from '../../../service/UI/UIEvents';
 import { IStore } from '../app/types';
 import {
     CONFERENCE_FAILED,
@@ -36,12 +34,6 @@ MiddlewareRegistry.register(store => next => action => {
         return _conferenceJoined(store, next, action);
 
     case LOCK_STATE_CHANGED: {
-        // TODO Remove this logic when all components interested in the lock
-        // state change event are moved into react/redux.
-        if (typeof APP !== 'undefined') {
-            APP.UI.emitEvent(UIEvents.TOGGLE_ROOM_LOCK, action.locked);
-        }
-
         const previousLockedState = store.getState()['features/base/conference'].locked;
 
         const result = next(action);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/rtcstats/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/rtcstats/middleware.ts
index 46f838c..41f975f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/rtcstats/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/rtcstats/middleware.ts
@@ -3,7 +3,6 @@ import { AnyAction } from 'redux';
 import { IStore } from '../app/types';
 import {
     CONFERENCE_JOINED,
-    CONFERENCE_TIMESTAMP_CHANGED,
     E2E_RTT_CHANGED
 } from '../base/conference/actionTypes';
 import { DOMINANT_SPEAKER_CHANGED } from '../base/participants/actionTypes';
@@ -124,14 +123,6 @@ MiddlewareRegistry.register((store: IStore) => (next: Function) => (action: AnyA
         }
         break;
     }
-    case CONFERENCE_TIMESTAMP_CHANGED: {
-        if (isRTCStatsEnabled(state)) {
-            const { conferenceTimestamp } = action;
-
-            RTCStats.sendConferenceTimestamp(conferenceTimestamp);
-        }
-        break;
-    }
     }
 
     return next(action);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/security/components/security-dialog/AbstractSecurityDialogButton.ts b/node_modules/@jitsi/react-native-sdk/react/features/security/components/security-dialog/AbstractSecurityDialogButton.ts
index cfaa8e2..1032067 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/security/components/security-dialog/AbstractSecurityDialogButton.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/security/components/security-dialog/AbstractSecurityDialogButton.ts
@@ -7,6 +7,7 @@ import { getFeatureFlag } from '../../../base/flags/functions';
 import { IconSecurityOff, IconSecurityOn } from '../../../base/icons/svg';
 import { isLocalParticipantModerator } from '../../../base/participants/functions';
 import AbstractButton, { IProps as AbstractButtonProps } from '../../../base/toolbox/components/AbstractButton';
+import { isSecurityDialogButtonVisible } from '../../functions';
 
 export interface IProps extends AbstractButtonProps {
 
@@ -71,17 +72,21 @@ export default class AbstractSecurityDialogButton<P extends IProps, S>
  */
 export function _mapStateToProps(state: IReduxState) {
     const { conference } = state['features/base/conference'];
-    const { hideLobbyButton } = getSecurityUiConfig(state);
     const { locked } = state['features/base/conference'];
     const { lobbyEnabled } = state['features/lobby'];
-    const lobbySupported = conference?.isLobbySupported();
-    const lobby = lobbySupported && isLocalParticipantModerator(state) && !hideLobbyButton;
-    const enabledFlag = getFeatureFlag(state, SECURITY_OPTIONS_ENABLED, true);
-    const enabledLobbyModeFlag = getFeatureFlag(state, LOBBY_MODE_ENABLED, true) && lobby;
+    const enabledSecurityOptionsFlag = getFeatureFlag(state, SECURITY_OPTIONS_ENABLED, true);
+    const enabledLobbyModeFlag = getFeatureFlag(state, LOBBY_MODE_ENABLED, true);
     const enabledMeetingPassFlag = getFeatureFlag(state, MEETING_PASSWORD_ENABLED, true);
 
     return {
         _locked: Boolean(locked || lobbyEnabled),
-        visible: enabledFlag && (enabledLobbyModeFlag || enabledMeetingPassFlag)
+        visible: isSecurityDialogButtonVisible({
+            conference,
+            securityUIConfig: getSecurityUiConfig(state),
+            isModerator: isLocalParticipantModerator(state),
+            enabledLobbyModeFlag,
+            enabledMeetingPassFlag,
+            enabledSecurityOptionsFlag
+        })
     };
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/security/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/security/functions.ts
new file mode 100644
index 0000000..ce2526e
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/security/functions.ts
@@ -0,0 +1,28 @@
+/**
+ * Returns true if the security dialog button should be visible and false otherwise.
+ *
+ * @param {Object} options - The parameters needed to determine the security dialog button visibility.
+ * @returns {boolean}
+ */
+export function isSecurityDialogButtonVisible({
+    conference,
+    securityUIConfig,
+    isModerator,
+    enabledLobbyModeFlag,
+    enabledSecurityOptionsFlag,
+    enabledMeetingPassFlag
+}: {
+    conference: any;
+    enabledLobbyModeFlag: boolean;
+    enabledMeetingPassFlag: boolean;
+    enabledSecurityOptionsFlag: boolean;
+    isModerator: boolean;
+    securityUIConfig: { hideLobbyButton?: boolean; };
+}) {
+    const { hideLobbyButton } = securityUIConfig;
+    const lobbySupported = conference?.isLobbySupported();
+    const lobby = lobbySupported && isModerator && !hideLobbyButton;
+
+
+    return enabledSecurityOptionsFlag && ((enabledLobbyModeFlag && lobby) || enabledMeetingPassFlag);
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/security/hooks.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/security/hooks.web.ts
new file mode 100644
index 0000000..73e49a0
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/security/hooks.web.ts
@@ -0,0 +1,45 @@
+import { useSelector } from 'react-redux';
+
+import { IReduxState } from '../app/types';
+import { getSecurityUiConfig } from '../base/config/functions.any';
+import { LOBBY_MODE_ENABLED, MEETING_PASSWORD_ENABLED, SECURITY_OPTIONS_ENABLED } from '../base/flags/constants';
+import { getFeatureFlag } from '../base/flags/functions';
+import { isLocalParticipantModerator } from '../base/participants/functions';
+
+import SecurityDialogButton from './components/security-dialog/web/SecurityDialogButton';
+import { isSecurityDialogButtonVisible } from './functions';
+
+const security = {
+    key: 'security',
+    alias: 'info',
+    Content: SecurityDialogButton,
+    group: 2
+};
+
+/**
+ * A hook that returns the security dialog button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useSecurityDialogButton() {
+    const conference = useSelector((state: IReduxState) => state['features/base/conference'].conference);
+    const securityUIConfig = useSelector(getSecurityUiConfig);
+    const isModerator = useSelector(isLocalParticipantModerator);
+    const enabledLobbyModeFlag
+        = useSelector((state: IReduxState) => getFeatureFlag(state, LOBBY_MODE_ENABLED, true));
+    const enabledSecurityOptionsFlag
+        = useSelector((state: IReduxState) => getFeatureFlag(state, SECURITY_OPTIONS_ENABLED, true));
+    const enabledMeetingPassFlag
+        = useSelector((state: IReduxState) => getFeatureFlag(state, MEETING_PASSWORD_ENABLED, true));
+
+    if (isSecurityDialogButtonVisible({
+        conference,
+        securityUIConfig,
+        isModerator,
+        enabledLobbyModeFlag,
+        enabledSecurityOptionsFlag,
+        enabledMeetingPassFlag
+    })) {
+        return security;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/settings/actions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/settings/actions.web.ts
index 65e2f4a..bcc5a5d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/settings/actions.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/settings/actions.web.ts
@@ -12,6 +12,7 @@ import { hangup } from '../base/connection/actions.web';
 import { openDialog } from '../base/dialog/actions';
 import i18next from '../base/i18n/i18next';
 import { browser } from '../base/lib-jitsi-meet';
+import { getNormalizedDisplayName } from '../base/participants/functions';
 import { updateSettings } from '../base/settings/actions';
 import { getLocalVideoTrack } from '../base/tracks/functions.web';
 import { appendURLHashParam } from '../base/util/uri';
@@ -191,7 +192,7 @@ export function submitProfileTab(newState: any) {
         const currentState = getProfileTabProps(getState());
 
         if (newState.displayName !== currentState.displayName) {
-            APP.conference.changeLocalDisplayName(newState.displayName);
+            dispatch(updateSettings({ displayName: getNormalizedDisplayName(newState.displayName) }));
         }
 
         if (newState.email !== currentState.email) {
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/speaker-stats/hooks.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/speaker-stats/hooks.web.ts
new file mode 100644
index 0000000..04be28e
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/speaker-stats/hooks.web.ts
@@ -0,0 +1,23 @@
+import { useSelector } from 'react-redux';
+
+import SpeakerStatsButton from './components/web/SpeakerStatsButton';
+import { isSpeakerStatsDisabled } from './functions';
+
+const speakerStats = {
+    key: 'stats',
+    Content: SpeakerStatsButton,
+    group: 3
+};
+
+/**
+ * A hook that returns the speaker stats button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useSpeakerStatsButton() {
+    const disabled = useSelector(isSpeakerStatsDisabled);
+
+    if (!disabled) {
+        return speakerStats;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/subtitles/components/AbstractClosedCaptionButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/subtitles/components/AbstractClosedCaptionButton.tsx
index e9e75d4..bfda49a 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/subtitles/components/AbstractClosedCaptionButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/subtitles/components/AbstractClosedCaptionButton.tsx
@@ -49,7 +49,7 @@ export class AbstractClosedCaptionButton
      * @protected
      * @returns {void}
      */
-    async _handleClick() {
+    _handleClick() {
         const { _requestingSubtitles, dispatch } = this.props;
 
         sendAnalytics(createToolbarEvent('transcribing.ccButton',
@@ -57,7 +57,7 @@ export class AbstractClosedCaptionButton
                 'requesting_subtitles': Boolean(_requestingSubtitles)
             }));
 
-        const dialogShown = await dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
+        const dialogShown = dispatch(maybeShowPremiumFeatureDialog(MEET_FEATURES.RECORDING));
 
         if (!dialogShown) {
             this._handleClickOpenLanguageSelector();
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/subtitles/hooks.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/subtitles/hooks.web.ts
new file mode 100644
index 0000000..078693f
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/subtitles/hooks.web.ts
@@ -0,0 +1,23 @@
+import { useSelector } from 'react-redux';
+
+import ClosedCaptionButton from './components/web/ClosedCaptionButton';
+import { canStartSubtitles } from './functions.any';
+
+const cc = {
+    key: 'closedcaptions',
+    Content: ClosedCaptionButton,
+    group: 2
+};
+
+/**
+ * A hook that returns the CC button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useClosedCaptionButton() {
+    const isStartSubtitlesButtonVisible = useSelector(canStartSubtitles);
+
+    if (isStartSubtitlesButtonVisible) {
+        return cc;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/subtitles/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/subtitles/middleware.ts
index 4971a47..07a29e8 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/subtitles/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/subtitles/middleware.ts
@@ -172,8 +172,11 @@ function _endpointMessageReceived(store: IStore, next: Function, action: AnyActi
             }
         }
 
-        // If the suer is not requesting transcriptions just bail.
-        if (json.language.slice(0, 2) !== language) {
+        // If the user is not requesting transcriptions just bail.
+        // Regex to filter out all possible country codes after language code:
+        // this should catch all notations like 'en-GB' 'en_GB' and 'enGB'
+        // and be independent of the country code length
+        if (json.language.replace(/[-_A-Z].*/, '') !== language) {
             return next(action);
         }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/talk-while-muted/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/talk-while-muted/middleware.ts
index 4f2e5fe..0582aed 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/talk-while-muted/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/talk-while-muted/middleware.ts
@@ -41,14 +41,14 @@ MiddlewareRegistry.register(store => next => action => {
                 }
             });
         conference.on(
-            JitsiConferenceEvents.TALK_WHILE_MUTED, async () => {
+            JitsiConferenceEvents.TALK_WHILE_MUTED, () => {
                 const state = getState();
                 const local = getLocalParticipant(state);
 
                 // Display the talk while muted notification only when the audio button is not disabled.
                 if (!isAudioMuteButtonDisabled(state)) {
                     const forceMuted = isForceMuted(local, MEDIA_TYPE.AUDIO, state);
-                    const notification = await dispatch(showNotification({
+                    const notification = dispatch(showNotification({
                         titleKey: 'toolbar.talkWhileMutedPopup',
                         customActionNameKey: [ forceMuted ? 'notify.raiseHandAction' : 'notify.unmute' ],
                         customActionHandler: [ () => dispatch(forceMuted ? raiseHand(true) : setAudioMuted(false)) ]
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actionTypes.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actionTypes.ts
index ed7ba15..7803a11 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actionTypes.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actionTypes.ts
@@ -7,6 +7,17 @@
  */
 export const CLEAR_TOOLBOX_TIMEOUT = 'CLEAR_TOOLBOX_TIMEOUT';
 
+/**
+ * The type of (redux) action which signals that a custom button from the overflow menu was pressed.
+ *
+ * @returns {{
+ *      type: CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED,
+ *      id: string,
+ *      text: string
+ * }}
+ */
+export const CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED = 'CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED';
+
 /**
  * The type of (redux) action which updates whether the conference is or is not
  * currently in full screen view.
@@ -59,6 +70,16 @@ export const SET_FULL_SCREEN = 'SET_FULL_SCREEN';
  */
 export const SET_HANGUP_MENU_VISIBLE = 'SET_HANGUP_MENU_VISIBLE';
 
+/**
+ * The type of the (redux) action which sets the main toolbar thresholds.
+ *
+ * {
+ *     type: SET_MAIN_TOOLBAR_BUTTONS_THRESHOLDS,
+ *     mainToolbarButtonsThresholds: IMainToolbarButtonThresholds
+ * }
+ */
+export const SET_MAIN_TOOLBAR_BUTTONS_THRESHOLDS = 'SET_MAIN_TOOLBAR_BUTTONS_THRESHOLDS';
+
 /**
  * The type of the redux action that toggles whether the overflow menu(s) should be shown as drawers.
  */
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.any.ts
index 972fd38..a89fa55 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.any.ts
@@ -1,5 +1,3 @@
-// @ts-expect-error
-import UIEvents from '../../../service/UI/UIEvents';
 import { VIDEO_MUTE, createToolbarEvent } from '../analytics/AnalyticsEvents';
 import { sendAnalytics } from '../analytics/functions';
 import { IStore } from '../app/types';
@@ -103,7 +101,7 @@ export function handleToggleVideoMuted(muted: boolean, showUI: boolean, ensureTr
         // FIXME: The old conference logic still relies on this event being
         // emitted.
         typeof APP === 'undefined'
-            || APP.UI.emitEvent(UIEvents.VIDEO_MUTED, muted, showUI);
+            || APP.conference.muteVideo(muted, showUI);
 
     };
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.native.ts
index 7f84c56..568d932 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.native.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.native.ts
@@ -1,3 +1,5 @@
+import { CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED } from './actionTypes';
+
 export * from './actions.any';
 
 /**
@@ -22,3 +24,22 @@ export function showToolbox(_timeout?: number): any {
 export function setOverflowMenuVisible(_visible: boolean): any {
     return {};
 }
+
+/**
+ * Creates a (redux) action which that a custom overflow menu button was pressed.
+ *
+ * @param {string} id - The id for the custom button.
+ * @param {string} text - The label for the custom button.
+ * @returns {{
+ *     type: CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED,
+ *     id: string,
+ *     text: string
+ * }}
+ */
+export function customOverflowMenuButtonPressed(id: string, text: string) {
+    return {
+        type: CUSTOM_OVERFLOW_MENU_BUTTON_PRESSED,
+        id,
+        text
+    };
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.web.ts
index 7d94aca..ea9c2d0 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/actions.web.ts
@@ -8,13 +8,16 @@ import {
     FULL_SCREEN_CHANGED,
     SET_FULL_SCREEN,
     SET_HANGUP_MENU_VISIBLE,
+    SET_MAIN_TOOLBAR_BUTTONS_THRESHOLDS,
     SET_OVERFLOW_DRAWER,
     SET_OVERFLOW_MENU_VISIBLE,
     SET_TOOLBAR_HOVERED,
     SET_TOOLBOX_TIMEOUT
 } from './actionTypes';
 import { setToolboxVisible } from './actions.web';
+import { THRESHOLDS } from './constants';
 import { getToolbarTimeout } from './functions.web';
+import { IMainToolbarButtonThresholds } from './types';
 
 export * from './actions.any';
 
@@ -121,6 +124,56 @@ export function setFullScreen(fullScreen: boolean) {
     };
 }
 
+/**
+ * Sets the mainToolbarButtonsThresholds.
+ *
+ * @returns {Function}
+ */
+export function setMainToolbarThresholds() {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+        const { mainToolbarButtons } = getState()['features/base/config'];
+
+        if (!mainToolbarButtons || !Array.isArray(mainToolbarButtons) || mainToolbarButtons.length === 0) {
+            return;
+        }
+
+        const mainToolbarButtonsThresholds: IMainToolbarButtonThresholds = [];
+
+        const mainToolbarButtonsLenghtMap = new Map();
+        let orderIsChanged = false;
+
+        mainToolbarButtons.forEach(buttons => {
+            if (!Array.isArray(buttons) || buttons.length === 0) {
+                return;
+            }
+
+            mainToolbarButtonsLenghtMap.set(buttons.length, buttons);
+        });
+
+        THRESHOLDS.forEach(({ width, order }) => {
+            let finalOrder = mainToolbarButtonsLenghtMap.get(order.length);
+
+            if (finalOrder) {
+                orderIsChanged = true;
+            } else {
+                finalOrder = order;
+            }
+
+            mainToolbarButtonsThresholds.push({
+                order: finalOrder,
+                width
+            });
+        });
+
+        if (orderIsChanged) {
+            dispatch({
+                type: SET_MAIN_TOOLBAR_BUTTONS_THRESHOLDS,
+                mainToolbarButtonsThresholds
+            });
+        }
+    };
+}
+
 /**
  * Shows the toolbox for specified timeout.
  *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/HangupButton.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/HangupButton.ts
index db0c09f..97cf488 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/HangupButton.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/HangupButton.ts
@@ -3,7 +3,7 @@ import { connect } from 'react-redux';
 
 import { createToolbarEvent } from '../../analytics/AnalyticsEvents';
 import { sendAnalytics } from '../../analytics/functions';
-import { leaveConference } from '../../base/conference/actions';
+import { leaveConference } from '../../base/conference/actions.any';
 import { translate } from '../../base/i18n/functions';
 import { IProps as AbstractButtonProps } from '../../base/toolbox/components/AbstractButton';
 import AbstractHangupButton from '../../base/toolbox/components/AbstractHangupButton';
@@ -14,37 +14,38 @@ import AbstractHangupButton from '../../base/toolbox/components/AbstractHangupBu
  * @augments AbstractHangupButton
  */
 class HangupButton extends AbstractHangupButton<AbstractButtonProps> {
-    _hangup: Function;
+	_hangup: Function;
 
-    accessibilityLabel = 'toolbar.accessibilityLabel.hangup';
-    label = 'toolbar.hangup';
-    tooltip = 'toolbar.hangup';
+	accessibilityLabel = 'toolbar.accessibilityLabel.hangup';
+	label = 'toolbar.hangup';
+	tooltip = 'toolbar.hangup';
 
-    /**
-     * Initializes a new HangupButton instance.
-     *
-     * @param {Props} props - The read-only properties with which the new
-     * instance is to be initialized.
-     */
-    constructor(props: AbstractButtonProps) {
-        super(props);
+	/**
+	 * Initializes a new HangupButton instance.
+	 *
+	 * @param {Props} props - The read-only properties with which the new
+	 * instance is to be initialized.
+	 */
+	constructor(props: AbstractButtonProps) {
+		super(props);
 
-        this._hangup = _.once(() => {
-            sendAnalytics(createToolbarEvent('hangup'));
-            this.props.dispatch(leaveConference());
-        });
-    }
+		this._hangup = _.once(() => {
+			sendAnalytics(createToolbarEvent('hangup'));
+			console.log('hanggggguuup');
+			this.props.dispatch(leaveConference());
+		});
+	}
 
-    /**
-     * Helper function to perform the actual hangup action.
-     *
-     * @override
-     * @protected
-     * @returns {void}
-     */
-    _doHangup() {
-        this._hangup();
-    }
+	/**
+	 * Helper function to perform the actual hangup action.
+	 *
+	 * @override
+	 * @protected
+	 * @returns {void}
+	 */
+	_doHangup() {
+		this._hangup();
+	}
 }
 
 export default translate(connect()(HangupButton));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/index.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/index.native.ts
new file mode 100644
index 0000000..2674176
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/index.native.ts
@@ -0,0 +1 @@
+export { default as CustomOptionButton } from './native/CustomOptionButton';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/index.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/index.web.ts
new file mode 100644
index 0000000..43259b2
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/index.web.ts
@@ -0,0 +1 @@
+export { default as CustomOptionButton } from './web/CustomOptionButton';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/HangupMenuButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/HangupMenuButton.tsx
index f51e363..cf50aa6 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/HangupMenuButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/HangupMenuButton.tsx
@@ -14,19 +14,20 @@ import HangupMenu from './HangupMenu';
  * @returns {JSX.Element} - The hangup menu button.
  */
 const HangupMenuButton = (): JSX.Element => {
-    const dispatch = useDispatch();
+	const dispatch = useDispatch();
 
-    const onSelect = useCallback(() => {
-        dispatch(openSheet(HangupMenu));
-    }, [ dispatch ]);
+	const onSelect = useCallback(() => {
+		dispatch(openSheet(HangupMenu));
+	}, [dispatch]);
 
-    return (
-        <IconButton
-            accessibilityLabel = 'toolbar.accessibilityLabel.hangup'
-            onPress = { onSelect }
-            src = { IconHangup }
-            type = { BUTTON_TYPES.PRIMARY } />
-    );
+	return (
+		<IconButton
+			accessibilityLabel='toolbar.accessibilityLabel.hangup'
+			onPress={onSelect}
+			src={IconHangup}
+			type={BUTTON_TYPES.PRIMARY}
+		/>
+	);
 };
 
 export default HangupMenuButton;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/OverflowMenu.tsx b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/OverflowMenu.tsx
index 480ba5d..4186a43 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/OverflowMenu.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/OverflowMenu.tsx
@@ -11,7 +11,6 @@ import SettingsButton from '../../../base/settings/components/native/SettingsBut
 import BreakoutRoomsButton
     from '../../../breakout-rooms/components/native/BreakoutRoomsButton';
 import SharedDocumentButton from '../../../etherpad/components/SharedDocumentButton.native';
-import { customOverflowMenuButtonPressed } from '../../../mobile/external-api/actions';
 import ReactionMenu from '../../../reactions/components/native/ReactionMenu';
 import { shouldDisplayReactionsButtons } from '../../../reactions/functions.any';
 import LiveStreamButton from '../../../recording/components/LiveStream/native/LiveStreamButton';
@@ -25,6 +24,7 @@ import ClosedCaptionButton from '../../../subtitles/components/native/ClosedCapt
 import TileViewButton from '../../../video-layout/components/TileViewButton';
 import styles from '../../../video-menu/components/native/styles';
 import WhiteboardButton from '../../../whiteboard/components/native/WhiteboardButton';
+import { customOverflowMenuButtonPressed } from '../../actions.native';
 import { getMovableButtons } from '../../functions.native';
 
 import AudioOnlyButton from './AudioOnlyButton';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/Toolbox.tsx b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/Toolbox.tsx
index c752d69..6b09c35 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/Toolbox.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/native/Toolbox.tsx
@@ -26,36 +26,35 @@ import styles from './styles';
  * The type of {@link Toolbox}'s React {@code Component} props.
  */
 interface IProps {
-
-    /**
-     * Whether the end conference feature is supported.
-     */
-    _endConferenceSupported: boolean;
-
-    /**
-     * Whether we are in visitors mode.
-     */
-    _iAmVisitor: boolean;
-
-    /**
-     * Whether or not any reactions buttons should be visible.
-     */
-    _shouldDisplayReactionsButtons: boolean;
-
-    /**
-     * The color-schemed stylesheet of the feature.
-     */
-    _styles: any;
-
-    /**
-     * The indicator which determines whether the toolbox is visible.
-     */
-    _visible: boolean;
-
-    /**
-     * The width of the screen.
-     */
-    _width: number;
+	/**
+	 * Whether the end conference feature is supported.
+	 */
+	_endConferenceSupported: boolean;
+
+	/**
+	 * Whether we are in visitors mode.
+	 */
+	_iAmVisitor: boolean;
+
+	/**
+	 * Whether or not any reactions buttons should be visible.
+	 */
+	_shouldDisplayReactionsButtons: boolean;
+
+	/**
+	 * The color-schemed stylesheet of the feature.
+	 */
+	_styles: any;
+
+	/**
+	 * The indicator which determines whether the toolbox is visible.
+	 */
+	_visible: boolean;
+
+	/**
+	 * The width of the screen.
+	 */
+	_width: number;
 }
 
 /**
@@ -65,75 +64,51 @@ interface IProps {
  * @returns {React$Element}
  */
 function Toolbox(props: IProps) {
-    const { _endConferenceSupported, _shouldDisplayReactionsButtons, _styles, _visible, _iAmVisitor, _width } = props;
-
-    if (!_visible) {
-        return null;
-    }
-
-    const bottomEdge = Platform.OS === 'ios' && _visible;
-    const { buttonStylesBorderless, hangupButtonStyles, toggledButtonStyles } = _styles;
-    const additionalButtons = getMovableButtons(_width);
-    const backgroundToggledStyle = {
-        ...toggledButtonStyles,
-        style: [
-            toggledButtonStyles.style,
-            _styles.backgroundToggle
-        ]
-    };
-    const style = { ...styles.toolbox };
-
-    // we have only hangup and raisehand button in _iAmVisitor mode
-    if (_iAmVisitor) {
-        additionalButtons.add('raisehand');
-        style.justifyContent = 'center';
-    }
-
-    return (
-        <View
-            style = { styles.toolboxContainer as ViewStyle }>
-            <SafeAreaView
-                accessibilityRole = 'toolbar'
-
-                // @ts-ignore
-                edges = { [ bottomEdge && 'bottom' ].filter(Boolean) }
-                pointerEvents = 'box-none'
-                style = { style as ViewStyle }>
-                {!_iAmVisitor && <AudioMuteButton
-                    styles = { buttonStylesBorderless }
-                    toggledStyles = { toggledButtonStyles } />
-                }
-                {!_iAmVisitor && <VideoMuteButton
-                    styles = { buttonStylesBorderless }
-                    toggledStyles = { toggledButtonStyles } />
-                }
-                {additionalButtons.has('chat')
-                    && <ChatButton
-                        styles = { buttonStylesBorderless }
-                        toggledStyles = { backgroundToggledStyle } />
-                }
-                {!_iAmVisitor && additionalButtons.has('screensharing')
-                    && <ScreenSharingButton styles = { buttonStylesBorderless } />}
-                {additionalButtons.has('raisehand') && (_shouldDisplayReactionsButtons
-                    ? <ReactionsMenuButton
-                        styles = { buttonStylesBorderless }
-                        toggledStyles = { backgroundToggledStyle } />
-                    : <RaiseHandButton
-                        styles = { buttonStylesBorderless }
-                        toggledStyles = { backgroundToggledStyle } />)}
-                {additionalButtons.has('tileview') && <TileViewButton styles = { buttonStylesBorderless } />}
-                {!_iAmVisitor && <OverflowMenuButton
-                    styles = { buttonStylesBorderless }
-                    toggledStyles = { toggledButtonStyles } />
-                }
-                { _endConferenceSupported
-                    ? <HangupMenuButton />
-                    : <HangupButton
-                        styles = { hangupButtonStyles } />
-                }
-            </SafeAreaView>
-        </View>
-    );
+	const { _endConferenceSupported, _shouldDisplayReactionsButtons, _styles, _visible, _iAmVisitor, _width } = props;
+
+	if (!_visible) {
+		return null;
+	}
+
+	const bottomEdge = Platform.OS === 'ios' && _visible;
+	const { buttonStylesBorderless, hangupButtonStyles, toggledButtonStyles } = _styles;
+	const additionalButtons = getMovableButtons(_width);
+	const backgroundToggledStyle = {
+		...toggledButtonStyles,
+		style: [toggledButtonStyles.style, _styles.backgroundToggle]
+	};
+	const style = { ...styles.toolbox };
+
+	// we have only hangup and raisehand button in _iAmVisitor mode
+	if (_iAmVisitor) {
+		additionalButtons.add('raisehand');
+		style.justifyContent = 'center';
+	}
+
+	return (
+		<View style={styles.toolboxContainer as ViewStyle}>
+			<SafeAreaView
+				accessibilityRole='toolbar'
+				// @ts-ignore
+				edges={[bottomEdge && 'bottom'].filter(Boolean)}
+				pointerEvents='box-none'
+				style={style as ViewStyle}>
+				{!_iAmVisitor && <AudioMuteButton styles={buttonStylesBorderless} toggledStyles={toggledButtonStyles} />}
+				{!_iAmVisitor && <VideoMuteButton styles={buttonStylesBorderless} toggledStyles={toggledButtonStyles} />}
+				{additionalButtons.has('chat') && <ChatButton styles={buttonStylesBorderless} toggledStyles={backgroundToggledStyle} />}
+				{!_iAmVisitor && additionalButtons.has('screensharing') && <ScreenSharingButton styles={buttonStylesBorderless} />}
+				{additionalButtons.has('raisehand') &&
+					(_shouldDisplayReactionsButtons ? (
+						<ReactionsMenuButton styles={buttonStylesBorderless} toggledStyles={backgroundToggledStyle} />
+					) : (
+						<RaiseHandButton styles={buttonStylesBorderless} toggledStyles={backgroundToggledStyle} />
+					))}
+				{additionalButtons.has('tileview') && <TileViewButton styles={buttonStylesBorderless} />}
+				{!_iAmVisitor && <OverflowMenuButton styles={buttonStylesBorderless} toggledStyles={toggledButtonStyles} />}
+				{_endConferenceSupported ? <HangupMenuButton /> : <HangupButton styles={hangupButtonStyles} />}
+			</SafeAreaView>
+		</View>
+	);
 }
 
 /**
@@ -146,17 +121,17 @@ function Toolbox(props: IProps) {
  * @returns {IProps}
  */
 function _mapStateToProps(state: IReduxState) {
-    const { conference } = state['features/base/conference'];
-    const endConferenceSupported = conference?.isEndConferenceSupported();
-
-    return {
-        _endConferenceSupported: Boolean(endConferenceSupported),
-        _styles: ColorSchemeRegistry.get(state, 'Toolbox'),
-        _visible: isToolboxVisible(state),
-        _iAmVisitor: iAmVisitor(state),
-        _width: state['features/base/responsive-ui'].clientWidth,
-        _shouldDisplayReactionsButtons: shouldDisplayReactionsButtons(state)
-    };
+	const { conference } = state['features/base/conference'];
+	const endConferenceSupported = conference?.isEndConferenceSupported();
+
+	return {
+		_endConferenceSupported: Boolean(endConferenceSupported),
+		_styles: ColorSchemeRegistry.get(state, 'Toolbox'),
+		_visible: isToolboxVisible(state),
+		_iAmVisitor: iAmVisitor(state),
+		_width: state['features/base/responsive-ui'].clientWidth,
+		_shouldDisplayReactionsButtons: shouldDisplayReactionsButtons(state)
+	};
 }
 
 export default connect(_mapStateToProps)(Toolbox);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/JitsiPortal.tsx b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/JitsiPortal.tsx
index 462db39..5dbf868 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/JitsiPortal.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/JitsiPortal.tsx
@@ -31,7 +31,7 @@ const useStyles = makeStyles()(theme => {
             },
 
             '&::after': {
-                content: '',
+                content: '""',
                 backgroundColor: theme.palette.ui01,
                 marginBottom: 'env(safe-area-inset-bottom, 0)'
             }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/LeaveConferenceButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/LeaveConferenceButton.tsx
index d5bdee5..0f4f4eb 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/LeaveConferenceButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/LeaveConferenceButton.tsx
@@ -13,20 +13,18 @@ import { HangupContextMenuItem } from './HangupContextMenuItem';
  * The type of the React {@code Component} props of {@link LeaveConferenceButton}.
  */
 interface IProps {
-
-    /**
-     * Key to use for toolbarButtonClicked event.
-     */
-    buttonKey: string;
-
-    /**
-     * Notify mode for `toolbarButtonClicked` event -
-     * whether to only notify or to also prevent button click routine.
-     */
-    notifyMode?: string;
+	/**
+	 * Key to use for toolbarButtonClicked event.
+	 */
+	buttonKey: string;
+
+	/**
+	 * Notify mode for `toolbarButtonClicked` event -
+	 * whether to only notify or to also prevent button click routine.
+	 */
+	notifyMode?: string;
 }
 
-
 /**
  * Button to leave the conference.
  *
@@ -34,21 +32,22 @@ interface IProps {
  * @returns {JSX.Element} - The leave conference button.
  */
 export const LeaveConferenceButton = (props: IProps) => {
-    const { t } = useTranslation();
-    const dispatch = useDispatch();
-
-    const onLeaveConference = useCallback(() => {
-        sendAnalytics(createToolbarEvent('hangup'));
-        dispatch(leaveConference());
-    }, [ dispatch ]);
-
-    return (
-        <HangupContextMenuItem
-            accessibilityLabel = { t('toolbar.accessibilityLabel.leaveConference') }
-            buttonKey = { props.buttonKey }
-            buttonType = { BUTTON_TYPES.SECONDARY }
-            label = { t('toolbar.leaveConference') }
-            notifyMode = { props.notifyMode }
-            onClick = { onLeaveConference } />
-    );
+	const { t } = useTranslation();
+	const dispatch = useDispatch();
+
+	const onLeaveConference = useCallback(() => {
+		sendAnalytics(createToolbarEvent('hangup'));
+		dispatch(leaveConference());
+	}, [dispatch]);
+
+	return (
+		<HangupContextMenuItem
+			accessibilityLabel={t('toolbar.accessibilityLabel.leaveConference')}
+			buttonKey={props.buttonKey}
+			buttonType={BUTTON_TYPES.SECONDARY}
+			label={t('toolbar.leaveConference')}
+			notifyMode={props.notifyMode}
+			onClick={onLeaveConference}
+		/>
+	);
 };
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/Toolbox.tsx b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/Toolbox.tsx
index 82343a8..d5adec8 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/Toolbox.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/components/web/Toolbox.tsx
@@ -1,12 +1,11 @@
 import React, { useCallback, useEffect, useRef } from 'react';
-import { WithTranslation } from 'react-i18next';
-import { connect } from 'react-redux';
+import { useTranslation } from 'react-i18next';
+import { useDispatch, useSelector } from 'react-redux';
 import { makeStyles } from 'tss-react/mui';
 
-import { IReduxState, IStore } from '../../../app/types';
+import { IReduxState } from '../../../app/types';
 import { isMobileBrowser } from '../../../base/environment/utils';
-import { translate } from '../../../base/i18n/functions';
-import { isLocalParticipantModerator } from '../../../base/participants/functions';
+import { getLocalParticipant, isLocalParticipantModerator } from '../../../base/participants/functions';
 import ContextMenu from '../../../base/ui/components/web/ContextMenu';
 import { isReactionsButtonEnabled, shouldDisplayReactionsButtons } from '../../../reactions/functions.web';
 import {
@@ -15,15 +14,14 @@ import {
     setToolbarHovered,
     showToolbox
 } from '../../actions.web';
-import { NOT_APPLICABLE, THRESHOLDS } from '../../constants';
 import {
-    getAllToolboxButtons,
     getJwtDisabledButtons,
+    getVisibleButtons,
     isButtonEnabled,
     isToolboxVisible
 } from '../../functions.web';
-import { useKeyboardShortcuts } from '../../hooks.web';
-import { IToolboxButton, NOTIFY_CLICK_MODE } from '../../types';
+import { useKeyboardShortcuts, useToolboxButtons } from '../../hooks.web';
+import { IToolboxButton } from '../../types';
 import HangupButton from '../HangupButton';
 
 import { EndConferenceButton } from './EndConferenceButton';
@@ -35,107 +33,12 @@ import Separator from './Separator';
 /**
  * The type of the React {@code Component} props of {@link Toolbox}.
  */
-interface IProps extends WithTranslation {
-
-    /**
-     * Toolbar buttons which have their click exposed through the API.
-     */
-    _buttonsWithNotifyClick: Map<string, NOTIFY_CLICK_MODE>;
-
-    /**
-     * Whether or not the chat feature is currently displayed.
-     */
-    _chatOpen: boolean;
-
-    /**
-     * The width of the client.
-     */
-    _clientWidth: number;
-
-    /**
-     * Custom Toolbar buttons.
-     */
-    _customToolbarButtons?: Array<{ backgroundColor?: string; icon: string; id: string; text: string; }>;
-
-    /**
-     * Whether or not a dialog is displayed.
-     */
-    _dialog: boolean;
-
-    /**
-     * Whether or not the toolbox is disabled. It is for recorders.
-     */
-    _disabled: boolean;
-
-    /**
-     * Whether the end conference feature is supported.
-     */
-    _endConferenceSupported: boolean;
-
-    /**
-     * Whether the hangup menu is visible.
-     */
-    _hangupMenuVisible: boolean;
-
-    /**
-     * Whether or not the app is running in mobile browser.
-     */
-    _isMobile: boolean;
-
-    /**
-     * Whether we are in narrow layout mode.
-     */
-    _isNarrowLayout: boolean;
-
-    /**
-     * The array of toolbar buttons disabled through jwt features.
-     */
-    _jwtDisabledButtons: string[];
-
-    /**
-     * Whether or not the overflow menu is displayed in a drawer drawer.
-     */
-    _overflowDrawer: boolean;
-
-    /**
-     * Whether or not the overflow menu is visible.
-     */
-    _overflowMenuVisible: boolean;
-
-    /**
-     * Whether or not to display reactions in separate button.
-     */
-    _reactionsButtonEnabled: boolean;
-
-    /**
-     * Whether the toolbox should be shifted up or not.
-     */
-    _shiftUp: boolean;
-
-    /**
-     * Whether any reactions buttons should be displayed or not.
-     */
-    _shouldDisplayReactionsButtons: boolean;
-
-    /**
-     * The enabled buttons.
-     */
-    _toolbarButtons: Array<string>;
-
-    /**
-     * Flag showing whether toolbar is visible.
-     */
-    _visible: boolean;
-
-    /**
-     * Invoked to active other features of the app.
-     */
-    dispatch: IStore['dispatch'];
+interface IProps {
 
     /**
      * Explicitly passed array with the buttons which this Toolbox should display.
      */
-    toolbarButtons: Array<string>;
+    toolbarButtons?: Array<string>;
 }
 
 const useStyles = makeStyles()(() => {
@@ -162,42 +65,58 @@ const useStyles = makeStyles()(() => {
     };
 });
 
-const Toolbox = ({
-    _buttonsWithNotifyClick,
-    _chatOpen,
-    _clientWidth,
-    _customToolbarButtons,
-    _dialog,
-    _disabled,
-    _endConferenceSupported,
-    _hangupMenuVisible,
-    _isMobile,
-    _isNarrowLayout,
-    _jwtDisabledButtons,
-    _overflowDrawer,
-    _overflowMenuVisible,
-    _reactionsButtonEnabled,
-    _shiftUp,
-    _shouldDisplayReactionsButtons,
-    _toolbarButtons,
-    _visible,
-    dispatch,
-    t,
+/**
+ * A component that renders the main toolbar.
+ *
+ * @param {IProps} props - The props of the component.
+ * @returns {ReactElement}
+ */
+export default function Toolbox({
     toolbarButtons
-}: IProps) => {
+}: IProps) {
     const { classes, cx } = useStyles();
+    const { t } = useTranslation();
+    const dispatch = useDispatch();
     const _toolboxRef = useRef<HTMLDivElement>(null);
 
-    useKeyboardShortcuts(toolbarButtons);
+    const conference = useSelector((state: IReduxState) => state['features/base/conference'].conference);
+    const isNarrowLayout = useSelector((state: IReduxState) => state['features/base/responsive-ui'].isNarrowLayout);
+    const clientWidth = useSelector((state: IReduxState) => state['features/base/responsive-ui'].clientWidth);
+    const isModerator = useSelector(isLocalParticipantModerator);
+    const customToolbarButtons = useSelector(
+        (state: IReduxState) => state['features/base/config'].customToolbarButtons);
+    const iAmRecorder = useSelector((state: IReduxState) => state['features/base/config'].iAmRecorder);
+    const iAmSipGateway = useSelector((state: IReduxState) => state['features/base/config'].iAmSipGateway);
+    const overflowDrawer = useSelector((state: IReduxState) => state['features/toolbox'].overflowDrawer);
+    const shiftUp = useSelector((state: IReduxState) => state['features/toolbox'].shiftUp);
+    const overflowMenuVisible = useSelector((state: IReduxState) => state['features/toolbox'].overflowMenuVisible);
+    const hangupMenuVisible = useSelector((state: IReduxState) => state['features/toolbox'].hangupMenuVisible);
+    const buttonsWithNotifyClick
+        = useSelector((state: IReduxState) => state['features/toolbox'].buttonsWithNotifyClick);
+    const reduxToolbarButtons = useSelector((state: IReduxState) => state['features/toolbox'].toolbarButtons);
+    const toolbarButtonsToUse = toolbarButtons || reduxToolbarButtons;
+    const chatOpen = useSelector((state: IReduxState) => state['features/chat'].isOpen);
+    const isDialogVisible = useSelector((state: IReduxState) => Boolean(state['features/base/dialog'].component));
+    const jwt = useSelector((state: IReduxState) => state['features/base/jwt'].jwt);
+    const localParticipant = useSelector(getLocalParticipant);
+    const jwtDisabledButtons = getJwtDisabledButtons(jwt, localParticipant?.features);
+    const reactionsButtonEnabled = useSelector(isReactionsButtonEnabled);
+    const _shouldDisplayReactionsButtons = useSelector(shouldDisplayReactionsButtons);
+    const toolbarVisible = useSelector(isToolboxVisible);
+    const mainToolbarButtonsThresholds
+        = useSelector((state: IReduxState) => state['features/toolbox'].mainToolbarButtonsThresholds);
+    const allButtons = useToolboxButtons(customToolbarButtons);
+
+    useKeyboardShortcuts(toolbarButtonsToUse);
 
     useEffect(() => {
-        if (!_visible) {
+        if (!toolbarVisible) {
             if (document.activeElement instanceof HTMLElement
                 && _toolboxRef.current?.contains(document.activeElement)) {
                 document.activeElement.blur();
             }
         }
-    }, [ _visible ]);
+    }, [ toolbarVisible ]);
 
     /**
      * Sets the visibility of the hangup menu.
@@ -210,7 +129,7 @@ const Toolbox = ({
     const onSetHangupVisible = useCallback((visible: boolean) => {
         dispatch(setHangupMenuVisible(visible));
         dispatch(setToolbarHovered(visible));
-    }, []);
+    }, [ dispatch ]);
 
     /**
      * Sets the visibility of the overflow menu.
@@ -223,21 +142,21 @@ const Toolbox = ({
     const onSetOverflowVisible = useCallback((visible: boolean) => {
         dispatch(setOverflowMenuVisible(visible));
         dispatch(setToolbarHovered(visible));
-    }, []);
+    }, [ dispatch ]);
 
     useEffect(() => {
-        if (_hangupMenuVisible && !_visible) {
+        if (hangupMenuVisible && !toolbarVisible) {
             onSetHangupVisible(false);
             dispatch(setToolbarHovered(false));
         }
-    }, [ _hangupMenuVisible, _visible ]);
+    }, [ dispatch, hangupMenuVisible, toolbarVisible, onSetHangupVisible ]);
 
     useEffect(() => {
-        if (_overflowMenuVisible && _dialog) {
+        if (overflowMenuVisible && isDialogVisible) {
             onSetOverflowVisible(false);
             dispatch(setToolbarHovered(false));
         }
-    }, [ _overflowMenuVisible, _dialog ]);
+    }, [ dispatch, overflowMenuVisible, isDialogVisible, onSetOverflowVisible ]);
 
     /**
      * Key handler for overflow/hangup menus.
@@ -248,69 +167,10 @@ const Toolbox = ({
     const onEscKey = useCallback((e?: React.KeyboardEvent) => {
         if (e?.key === 'Escape') {
             e?.stopPropagation();
-            _hangupMenuVisible && dispatch(setHangupMenuVisible(false));
-            _overflowMenuVisible && dispatch(setOverflowMenuVisible(false));
-        }
-    }, [ _hangupMenuVisible, _overflowMenuVisible ]);
-
-    /**
-     * Sets the notify click mode for the buttons.
-     *
-     * @param {Object} buttons - The list of toolbar buttons.
-     * @returns {void}
-     */
-    function setButtonsNotifyClickMode(buttons: Object) {
-        if (typeof APP === 'undefined' || (_buttonsWithNotifyClick?.size ?? 0) <= 0) {
-            return;
-        }
-
-        Object.values(buttons).forEach((button: any) => {
-            if (typeof button === 'object') {
-                button.notifyMode = _buttonsWithNotifyClick.get(button.key);
-            }
-        });
-    }
-
-    /**
-     * Returns all buttons that need to be rendered.
-     *
-     * @param {Object} state - The redux state.
-     * @returns {Object} The visible buttons arrays .
-     */
-    function getVisibleButtons() {
-        const buttons = getAllToolboxButtons(_customToolbarButtons);
-
-        setButtonsNotifyClickMode(buttons);
-        const isHangupVisible = isButtonEnabled('hangup', _toolbarButtons);
-        const { order } = THRESHOLDS.find(({ width }) => _clientWidth > width)
-            || THRESHOLDS[THRESHOLDS.length - 1];
-
-        const keys = Object.keys(buttons);
-
-        const filtered = [
-            ...order.map(key => buttons[key as keyof typeof buttons]),
-            ...Object.values(buttons).filter((button, index) => !order.includes(keys[index]))
-        ].filter(({ key, alias = NOT_APPLICABLE }) =>
-            !_jwtDisabledButtons.includes(key)
-            && (isButtonEnabled(key, _toolbarButtons) || isButtonEnabled(alias, _toolbarButtons))
-        );
-
-        let sliceIndex = _overflowDrawer || _reactionsButtonEnabled ? order.length + 2 : order.length + 1;
-
-        if (isHangupVisible) {
-            sliceIndex -= 1;
-        }
-
-        // This implies that the overflow button will be displayed, so save some space for it.
-        if (sliceIndex < filtered.length) {
-            sliceIndex -= 1;
+            hangupMenuVisible && dispatch(setHangupMenuVisible(false));
+            overflowMenuVisible && dispatch(setOverflowMenuVisible(false));
         }
-
-        return {
-            mainMenuButtons: filtered.slice(0, sliceIndex),
-            overflowMenuButtons: filtered.slice(sliceIndex)
-        };
-    }
+    }, [ dispatch, hangupMenuVisible, overflowMenuVisible ]);
 
     /**
      * Dispatches an action signaling the toolbar is not being hovered.
@@ -318,9 +178,9 @@ const Toolbox = ({
      * @private
      * @returns {void}
      */
-    function onMouseOut() {
-        !_overflowMenuVisible && dispatch(setToolbarHovered(false));
-    }
+    const onMouseOut = useCallback(() => {
+        !overflowMenuVisible && dispatch(setToolbarHovered(false));
+    }, [ dispatch, overflowMenuVisible ]);
 
     /**
      * Dispatches an action signaling the toolbar is being hovered.
@@ -328,9 +188,9 @@ const Toolbox = ({
      * @private
      * @returns {void}
      */
-    function onMouseOver() {
+    const onMouseOver = useCallback(() => {
         dispatch(setToolbarHovered(true));
-    }
+    }, [ dispatch ]);
 
     /**
      * Toggle the toolbar visibility when tabbing into it.
@@ -338,35 +198,48 @@ const Toolbox = ({
      * @returns {void}
      */
     const onTabIn = useCallback(() => {
-        if (!_visible) {
+        if (!toolbarVisible) {
             dispatch(showToolbox());
         }
-    }, [ _visible ]);
+    }, [ toolbarVisible, dispatch ]);
 
-    /**
-     * Renders the toolbox content.
-     *
-     * @returns {ReactElement}
-     */
-    function renderToolboxContent() {
-        const toolbarAccLabel = 'toolbar.accessibilityLabel.moreActionsMenu';
-        const containerClassName = `toolbox-content${_isMobile || _isNarrowLayout ? ' toolbox-content-mobile' : ''}`;
+    if (iAmRecorder || iAmSipGateway) {
+        return null;
+    }
 
-        const { mainMenuButtons, overflowMenuButtons } = getVisibleButtons();
-        const raiseHandInOverflowMenu = overflowMenuButtons.some(({ key }) => key === 'raisehand');
-        const showReactionsInOverflowMenu = _shouldDisplayReactionsButtons
-            && (
-                (!_reactionsButtonEnabled && (raiseHandInOverflowMenu || _isNarrowLayout || _isMobile))
-                    || overflowMenuButtons.some(({ key }) => key === 'reactions')
-            );
-        const showRaiseHandInReactionsMenu = showReactionsInOverflowMenu && raiseHandInOverflowMenu;
+    const endConferenceSupported = Boolean(conference?.isEndConferenceSupported() && isModerator);
+    const isMobile = isMobileBrowser();
+
+    const rootClassNames = `new-toolbox ${toolbarVisible ? 'visible' : ''} ${
+        toolbarButtonsToUse.length ? '' : 'no-buttons'} ${chatOpen ? 'shift-right' : ''}`;
+
+    const toolbarAccLabel = 'toolbar.accessibilityLabel.moreActionsMenu';
+    const containerClassName = `toolbox-content${isMobile || isNarrowLayout ? ' toolbox-content-mobile' : ''}`;
+
+    const { mainMenuButtons, overflowMenuButtons } = getVisibleButtons({
+        allButtons,
+        buttonsWithNotifyClick,
+        toolbarButtons: toolbarButtonsToUse,
+        clientWidth,
+        jwtDisabledButtons,
+        mainToolbarButtonsThresholds
+    });
+    const raiseHandInOverflowMenu = overflowMenuButtons.some(({ key }) => key === 'raisehand');
+    const showReactionsInOverflowMenu = _shouldDisplayReactionsButtons
+        && (
+            (!reactionsButtonEnabled && (raiseHandInOverflowMenu || isNarrowLayout || isMobile))
+            || overflowMenuButtons.some(({ key }) => key === 'reactions'));
+    const showRaiseHandInReactionsMenu = showReactionsInOverflowMenu && raiseHandInOverflowMenu;
 
-        return (
+    return (
+        <div
+            className = { cx(rootClassNames, shiftUp && 'shift-up') }
+            id = 'new-toolbox'>
             <div className = { containerClassName }>
                 <div
                     className = 'toolbox-content-wrapper'
                     onFocus = { onTabIn }
-                    { ...(_isMobile ? {} : {
+                    { ...(isMobile ? {} : {
                         onMouseOut,
                         onMouseOver
                     }) }>
@@ -407,7 +280,7 @@ const Toolbox = ({
 
                                     return acc;
                                 }, []) }
-                                isOpen = { _overflowMenuVisible }
+                                isOpen = { overflowMenuVisible }
                                 key = 'overflow-menu'
                                 onToolboxEscKey = { onEscKey }
                                 onVisibilityChange = { onSetOverflowVisible }
@@ -415,104 +288,38 @@ const Toolbox = ({
                                 showReactionsMenu = { showReactionsInOverflowMenu } />
                         )}
 
-                        {isButtonEnabled('hangup', _toolbarButtons) && (
-                            _endConferenceSupported
+                        {isButtonEnabled('hangup', toolbarButtonsToUse) && (
+                            endConferenceSupported
                                 ? <HangupMenuButton
                                     ariaControls = 'hangup-menu'
-                                    isOpen = { _hangupMenuVisible }
+                                    isOpen = { hangupMenuVisible }
                                     key = 'hangup-menu'
-                                    notifyMode = { _buttonsWithNotifyClick?.get('hangup-menu') }
+                                    notifyMode = { buttonsWithNotifyClick?.get('hangup-menu') }
                                     onVisibilityChange = { onSetHangupVisible }>
                                     <ContextMenu
                                         accessibilityLabel = { t(toolbarAccLabel) }
                                         className = { classes.hangupMenu }
                                         hidden = { false }
-                                        inDrawer = { _overflowDrawer }
+                                        inDrawer = { overflowDrawer }
                                         onKeyDown = { onEscKey }>
                                         <EndConferenceButton
                                             buttonKey = 'end-meeting'
-                                            notifyMode = { _buttonsWithNotifyClick?.get('end-meeting') } />
+                                            notifyMode = { buttonsWithNotifyClick?.get('end-meeting') } />
                                         <LeaveConferenceButton
                                             buttonKey = 'hangup'
-                                            notifyMode = { _buttonsWithNotifyClick?.get('hangup') } />
+                                            notifyMode = { buttonsWithNotifyClick?.get('hangup') } />
                                     </ContextMenu>
                                 </HangupMenuButton>
                                 : <HangupButton
                                     buttonKey = 'hangup'
                                     customClass = 'hangup-button'
                                     key = 'hangup-button'
-                                    notifyMode = { _buttonsWithNotifyClick.get('hangup') }
-                                    visible = { isButtonEnabled('hangup', _toolbarButtons) } />
+                                    notifyMode = { buttonsWithNotifyClick.get('hangup') }
+                                    visible = { isButtonEnabled('hangup', toolbarButtonsToUse) } />
                         )}
                     </div>
                 </div>
             </div>
-        );
-    }
-
-    if (_disabled) {
-        return null;
-    }
-
-    const rootClassNames = `new-toolbox ${_visible ? 'visible' : ''} ${
-        _toolbarButtons.length ? '' : 'no-buttons'} ${_chatOpen ? 'shift-right' : ''}`;
-
-    return (
-        <div
-            className = { cx(rootClassNames, _shiftUp && 'shift-up') }
-            id = 'new-toolbox'>
-            {renderToolboxContent()}
         </div>
     );
-};
-
-/**
- * Maps (parts of) the redux state to {@link Toolbox}'s React {@code Component}
- * props.
- *
- * @param {Object} state - The redux store/state.
- * @param {Object} ownProps - The props explicitly passed.
- * @private
- * @returns {{}}
- */
-function _mapStateToProps(state: IReduxState, ownProps: any) {
-    const { conference } = state['features/base/conference'];
-    const { isNarrowLayout } = state['features/base/responsive-ui'];
-    const endConferenceSupported = conference?.isEndConferenceSupported() && isLocalParticipantModerator(state);
-
-    const {
-        customToolbarButtons,
-        iAmRecorder,
-        iAmSipGateway
-    } = state['features/base/config'];
-    const {
-        hangupMenuVisible,
-        overflowMenuVisible,
-        overflowDrawer
-    } = state['features/toolbox'];
-    const { clientWidth } = state['features/base/responsive-ui'];
-    const toolbarButtons = ownProps.toolbarButtons || state['features/toolbox'].toolbarButtons;
-
-    return {
-        _buttonsWithNotifyClick: state['features/toolbox'].buttonsWithNotifyClick,
-        _chatOpen: state['features/chat'].isOpen,
-        _clientWidth: clientWidth,
-        _customToolbarButtons: customToolbarButtons,
-        _dialog: Boolean(state['features/base/dialog'].component),
-        _disabled: Boolean(iAmRecorder || iAmSipGateway),
-        _endConferenceSupported: Boolean(endConferenceSupported),
-        _isMobile: isMobileBrowser(),
-        _jwtDisabledButtons: getJwtDisabledButtons(state),
-        _hangupMenuVisible: hangupMenuVisible,
-        _isNarrowLayout: isNarrowLayout,
-        _overflowMenuVisible: overflowMenuVisible,
-        _overflowDrawer: overflowDrawer,
-        _reactionsButtonEnabled: isReactionsButtonEnabled(state),
-        _shiftUp: state['features/toolbox'].shiftUp,
-        _shouldDisplayReactionsButtons: shouldDisplayReactionsButtons(state),
-        _toolbarButtons: toolbarButtons,
-        _visible: isToolboxVisible(state)
-    };
 }
-
-export default translate(connect(_mapStateToProps)(Toolbox));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/constants.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/constants.ts
index d50bd1d..dbaada0 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/constants.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/constants.ts
@@ -6,23 +6,23 @@ import { ToolbarButton } from './types';
 export const THRESHOLDS = [
     {
         width: 565,
-        order: [ 'microphone', 'camera', 'desktop', 'chat', 'raisehand', 'reactions', 'participants', 'tileview' ]
+        order: [ 'microphone', 'camera', 'desktop', 'chat', 'raisehand', 'reactions', 'participants-pane', 'tileview' ]
     },
     {
         width: 520,
-        order: [ 'microphone', 'camera', 'desktop', 'chat', 'raisehand', 'participants', 'tileview' ]
+        order: [ 'microphone', 'camera', 'desktop', 'chat', 'raisehand', 'participants-pane', 'tileview' ]
     },
     {
         width: 470,
-        order: [ 'microphone', 'camera', 'desktop', 'chat', 'raisehand', 'participants' ]
+        order: [ 'microphone', 'camera', 'desktop', 'chat', 'raisehand', 'participants-pane' ]
     },
     {
         width: 420,
-        order: [ 'microphone', 'camera', 'desktop', 'chat', 'participants' ]
+        order: [ 'microphone', 'camera', 'desktop', 'chat', 'participants-pane' ]
     },
     {
         width: 370,
-        order: [ 'microphone', 'camera', 'chat', 'participants' ]
+        order: [ 'microphone', 'camera', 'chat', 'participants-pane' ]
     },
     {
         width: 225,
@@ -34,7 +34,43 @@ export const THRESHOLDS = [
     }
 ];
 
-export const NOT_APPLICABLE = 'N/A';
+/**
+ * Main toolbar buttons priority used to determine which button should be picked to fill empty spaces for disabled
+ * buttons.
+ */
+export const MAIN_TOOLBAR_BUTTONS_PRIORITY = [
+    'microphone',
+    'camera',
+    'desktop',
+    'chat',
+    'raisehand',
+    'reactions',
+    'participants-pane',
+    'tileview',
+    'invite',
+    'toggle-camera',
+    'videoquality',
+    'fullscreen',
+    'security',
+    'closedcaptions',
+    'recording',
+    'livestreaming',
+    'linktosalesforce',
+    'sharedvideo',
+    'shareaudio',
+    'noisesuppression',
+    'whiteboard',
+    'etherpad',
+    'select-background',
+    'stats',
+    'settings',
+    'shortcuts',
+    'profile',
+    'embedmeeting',
+    'feedback',
+    'download',
+    'help'
+];
 
 export const TOOLBAR_TIMEOUT = 4000;
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/functions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/functions.any.ts
index 4fab6ba..781958e 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/functions.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/functions.any.ts
@@ -1,7 +1,8 @@
 import { IReduxState } from '../app/types';
 import { FEATURES_TO_BUTTONS_MAPPING } from '../base/jwt/constants';
-import { isJwtFeatureEnabled } from '../base/jwt/functions';
+import { isJwtFeatureEnabledStateless } from '../base/jwt/functions';
 import { IGUMPendingState } from '../base/media/types';
+import { IParticipantFeatures } from '../base/participants/types';
 
 /**
  * Indicates if the audio mute button is disabled or not.
@@ -19,12 +20,18 @@ export function isAudioMuteButtonDisabled(state: IReduxState) {
 /**
  * Returns the buttons corresponding to features disabled through jwt.
  *
- * @param {IReduxState} state - The state from the Redux store.
+ * @param {string | undefined} jwt - The jwt token.
+ * @param {ILocalParticipant} localParticipantFeatures - The features of the local participant.
  * @returns {string[]} - The disabled by jwt buttons array.
  */
-export function getJwtDisabledButtons(state: IReduxState) {
+export function getJwtDisabledButtons(jwt: string | undefined, localParticipantFeatures?: IParticipantFeatures) {
     return Object.keys(FEATURES_TO_BUTTONS_MAPPING).reduce((acc: string[], current: string) => {
-        if (!isJwtFeatureEnabled(state, current, true)) {
+        if (!isJwtFeatureEnabledStateless({
+            jwt,
+            localParticipantFeatures,
+            feature: current,
+            ifNoToken: true
+        })) {
             acc.push(FEATURES_TO_BUTTONS_MAPPING[current as keyof typeof FEATURES_TO_BUTTONS_MAPPING]);
         }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/functions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/functions.web.ts
index acbcfbd..cb6ee90 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/functions.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/functions.web.ts
@@ -3,43 +3,11 @@ import { hasAvailableDevices } from '../base/devices/functions';
 import { MEET_FEATURES } from '../base/jwt/constants';
 import { isJwtFeatureEnabled } from '../base/jwt/functions';
 import { IGUMPendingState } from '../base/media/types';
-import ChatButton from '../chat/components/web/ChatButton';
-import EmbedMeetingButton from '../embed-meeting/components/EmbedMeetingButton';
-import SharedDocumentButton from '../etherpad/components/SharedDocumentButton.web';
-import FeedbackButton from '../feedback/components/FeedbackButton.web';
-import InviteButton from '../invite/components/add-people-dialog/web/InviteButton';
-import KeyboardShortcutsButton from '../keyboard-shortcuts/components/web/KeyboardShortcutsButton';
-import NoiseSuppressionButton from '../noise-suppression/components/NoiseSuppressionButton';
-import ParticipantsPaneButton from '../participants-pane/components/web/ParticipantsPaneButton';
-import RaiseHandContainerButton from '../reactions/components/web/RaiseHandContainerButtons';
-import ReactionsMenuButton from '../reactions/components/web/ReactionsMenuButton';
-import LiveStreamButton from '../recording/components/LiveStream/web/LiveStreamButton';
-import RecordButton from '../recording/components/Recording/web/RecordButton';
-import ShareAudioButton from '../screen-share/components/web/ShareAudioButton';
 import { isScreenMediaShared } from '../screen-share/functions';
-import SecurityDialogButton from '../security/components/security-dialog/web/SecurityDialogButton';
-import SettingsButton from '../settings/components/web/SettingsButton';
-import SharedVideoButton from '../shared-video/components/web/SharedVideoButton';
-import SpeakerStatsButton from '../speaker-stats/components/web/SpeakerStatsButton';
-import ClosedCaptionButton from '../subtitles/components/web/ClosedCaptionButton';
-import TileViewButton from '../video-layout/components/TileViewButton';
-import VideoQualityButton from '../video-quality/components/VideoQualityButton.web';
-import VideoBackgroundButton from '../virtual-background/components/VideoBackgroundButton';
-import WhiteboardButton from '../whiteboard/components/web/WhiteboardButton';
 import { isWhiteboardVisible } from '../whiteboard/functions';
 
-import DownloadButton from './components/DownloadButton';
-import HelpButton from './components/HelpButton';
-import AudioSettingsButton from './components/web/AudioSettingsButton';
-import CustomOptionButton from './components/web/CustomOptionButton';
-import FullscreenButton from './components/web/FullscreenButton';
-import LinkToSalesforceButton from './components/web/LinkToSalesforceButton';
-import ProfileButton from './components/web/ProfileButton';
-import ShareDesktopButton from './components/web/ShareDesktopButton';
-import ToggleCameraButton from './components/web/ToggleCameraButton';
-import VideoSettingsButton from './components/web/VideoSettingsButton';
-import { TOOLBAR_TIMEOUT } from './constants';
-import { IToolboxButton, NOTIFY_CLICK_MODE } from './types';
+import { MAIN_TOOLBAR_BUTTONS_PRIORITY, TOOLBAR_TIMEOUT } from './constants';
+import { IMainToolbarButtonThresholds, IToolboxButton, NOTIFY_CLICK_MODE } from './types';
 
 export * from './functions.any';
 
@@ -190,256 +158,85 @@ export function getToolbarTimeout(state: IReduxState) {
 }
 
 /**
-    * Returns all buttons that could be rendered.
-    *
-    * @param {Object} _customToolbarButtons - An array containing custom buttons objects.
-    * @returns {Object} The button maps mainMenuButtons and overflowMenuButtons.
-    */
-export function getAllToolboxButtons(_customToolbarButtons?: {
-    backgroundColor?: string;
-    icon: string;
-    id: string;
-    text: string;
-    }[]): { [key: string]: IToolboxButton; } {
-
-    const microphone = {
-        key: 'microphone',
-        Content: AudioSettingsButton,
-        group: 0
-    };
-
-    const camera = {
-        key: 'camera',
-        Content: VideoSettingsButton,
-        group: 0
-    };
-
-    const profile = {
-        key: 'profile',
-        Content: ProfileButton,
-        group: 1
-    };
-
-    const chat = {
-        key: 'chat',
-        Content: ChatButton,
-        group: 2
-    };
-
-    const desktop = {
-        key: 'desktop',
-        Content: ShareDesktopButton,
-        group: 2
-    };
-
-    // In Narrow layout and mobile web we are using drawer for popups and that is why it is better to include
-    // all forms of reactions in the overflow menu. Otherwise the toolbox will be hidden and the reactions popup
-    // misaligned.
-    const raisehand = {
-        key: 'raisehand',
-        Content: RaiseHandContainerButton,
-        group: 2
-    };
-
-    const reactions = {
-        key: 'reactions',
-        Content: ReactionsMenuButton,
-        group: 2
-    };
-
-    const participants = {
-        key: 'participants-pane',
-        Content: ParticipantsPaneButton,
-        group: 2
-    };
-
-    const invite = {
-        key: 'invite',
-        Content: InviteButton,
-        group: 2
-    };
-
-    const tileview = {
-        key: 'tileview',
-        Content: TileViewButton,
-        group: 2
-    };
-
-    const toggleCamera = {
-        key: 'toggle-camera',
-        Content: ToggleCameraButton,
-        group: 2
-    };
-
-    const videoQuality = {
-        key: 'videoquality',
-        Content: VideoQualityButton,
-        group: 2
-    };
-
-    const fullscreen = {
-        key: 'fullscreen',
-        Content: FullscreenButton,
-        group: 2
-    };
-
-    const security = {
-        key: 'security',
-        alias: 'info',
-        Content: SecurityDialogButton,
-        group: 2
-    };
-
-    const cc = {
-        key: 'closedcaptions',
-        Content: ClosedCaptionButton,
-        group: 2
-    };
-
-    const recording = {
-        key: 'recording',
-        Content: RecordButton,
-        group: 2
-    };
-
-    const livestreaming = {
-        key: 'livestreaming',
-        Content: LiveStreamButton,
-        group: 2
-    };
-
-    const linkToSalesforce = {
-        key: 'linktosalesforce',
-        Content: LinkToSalesforceButton,
-        group: 2
-    };
-
-    const shareVideo = {
-        key: 'sharedvideo',
-        Content: SharedVideoButton,
-        group: 3
-    };
-
-    const shareAudio = {
-        key: 'shareaudio',
-        Content: ShareAudioButton,
-        group: 3
-    };
-
-    const noiseSuppression = {
-        key: 'noisesuppression',
-        Content: NoiseSuppressionButton,
-        group: 3
-    };
-
-
-    const whiteboard = {
-        key: 'whiteboard',
-        Content: WhiteboardButton,
-        group: 3
-    };
-
-    const etherpad = {
-        key: 'etherpad',
-        Content: SharedDocumentButton,
-        group: 3
-    };
-
-    const virtualBackground = {
-        key: 'select-background',
-        Content: VideoBackgroundButton,
-        group: 3
-    };
-
-    const speakerStats = {
-        key: 'stats',
-        Content: SpeakerStatsButton,
-        group: 3
-    };
-
-    const settings = {
-        key: 'settings',
-        Content: SettingsButton,
-        group: 4
-    };
-
-    const shortcuts = {
-        key: 'shortcuts',
-        Content: KeyboardShortcutsButton,
-        group: 4
-    };
-
-    const embed = {
-        key: 'embedmeeting',
-        Content: EmbedMeetingButton,
-        group: 4
-    };
-
-    const feedback = {
-        key: 'feedback',
-        Content: FeedbackButton,
-        group: 4
-    };
-
-    const download = {
-        key: 'download',
-        Content: DownloadButton,
-        group: 4
-    };
+ * Sets the notify click mode for the buttons.
+ *
+ * @param {Object} buttons - The list of toolbar buttons.
+ * @param {Map} buttonsWithNotifyClick - The buttons notify click configuration.
+ * @returns {void}
+ */
+function setButtonsNotifyClickMode(buttons: Object, buttonsWithNotifyClick: Map<string, NOTIFY_CLICK_MODE>) {
+    if (typeof APP === 'undefined' || (buttonsWithNotifyClick?.size ?? 0) <= 0) {
+        return;
+    }
+
+    Object.values(buttons).forEach((button: any) => {
+        if (typeof button === 'object') {
+            button.notifyMode = buttonsWithNotifyClick.get(button.key);
+        }
+    });
+}
 
-    const help = {
-        key: 'help',
-        Content: HelpButton,
-        group: 4
-    };
+interface IGetVisibleButtonsParams {
+    allButtons: { [key: string]: IToolboxButton; };
+    buttonsWithNotifyClick: Map<string, NOTIFY_CLICK_MODE>;
+    clientWidth: number;
+    jwtDisabledButtons: string[];
+    mainToolbarButtonsThresholds: IMainToolbarButtonThresholds;
+    toolbarButtons: string[];
+}
 
-    const customButtons = _customToolbarButtons?.reduce((prev, { backgroundColor, icon, id, text }) => {
-        return {
-            ...prev,
-            [id]: {
-                backgroundColor,
-                key: id,
-                Content: CustomOptionButton,
-                group: 4,
-                icon,
-                text
-            }
-        };
-    }, {});
+/**
+ * Returns all buttons that need to be rendered.
+ *
+ * @param {IGetVisibleButtonsParams} params - The parameters needed to extract the visible buttons.
+ * @returns {Object} - The visible buttons arrays .
+ */
+export function getVisibleButtons({
+    allButtons,
+    buttonsWithNotifyClick,
+    toolbarButtons,
+    clientWidth,
+    jwtDisabledButtons,
+    mainToolbarButtonsThresholds
+}: IGetVisibleButtonsParams) {
+    setButtonsNotifyClickMode(allButtons, buttonsWithNotifyClick);
+
+    const filteredButtons = Object.keys(allButtons).filter(key =>
+        typeof key !== 'undefined' // filter invalid buttons that may be comming from config.mainToolbarButtons
+        // override
+        && !jwtDisabledButtons.includes(key)
+        && isButtonEnabled(key, toolbarButtons));
+
+
+    const { order } = mainToolbarButtonsThresholds.find(({ width }) => clientWidth > width)
+        || mainToolbarButtonsThresholds[mainToolbarButtonsThresholds.length - 1];
+
+    const mainToolbarButtonKeysOrder = [
+        ...order.filter(key => filteredButtons.includes(key)),
+        ...MAIN_TOOLBAR_BUTTONS_PRIORITY.filter(key => !order.includes(key) && filteredButtons.includes(key)),
+        ...filteredButtons.filter(key => !order.includes(key) && !MAIN_TOOLBAR_BUTTONS_PRIORITY.includes(key))
+    ];
+
+    const mainButtonsKeys = mainToolbarButtonKeysOrder.slice(0, order.length);
+    const overflowMenuButtons = filteredButtons.reduce((acc, key) => {
+        if (!mainButtonsKeys.includes(key)) {
+            acc.push(allButtons[key]);
+        }
+
+        return acc;
+    }, [] as IToolboxButton[]);
+
+    // if we have 1 button in the overflow menu it is better to directly display it in the main toolbar by replacing
+    // the "More" menu button with it.
+    if (overflowMenuButtons.length === 1) {
+        const button = overflowMenuButtons.shift()?.key;
+
+        button && mainButtonsKeys.push(button);
+    }
 
     return {
-        microphone,
-        camera,
-        profile,
-        desktop,
-        chat,
-        raisehand,
-        reactions,
-        participants,
-        invite,
-        tileview,
-        toggleCamera,
-        videoQuality,
-        fullscreen,
-        security,
-        cc,
-        recording,
-        livestreaming,
-        linkToSalesforce,
-        shareVideo,
-        shareAudio,
-        noiseSuppression,
-        whiteboard,
-        etherpad,
-        virtualBackground,
-        speakerStats,
-        settings,
-        shortcuts,
-        embed,
-        feedback,
-        download,
-        help,
-        ...customButtons
+        mainMenuButtons: mainButtonsKeys.map(key => allButtons[key]),
+        overflowMenuButtons
     };
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/hooks.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/hooks.web.ts
index dad2022..b7bc5d1 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/hooks.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/hooks.web.ts
@@ -5,13 +5,24 @@ import { ACTION_SHORTCUT_TRIGGERED, createShortcutEvent } from '../analytics/Ana
 import { sendAnalytics } from '../analytics/functions';
 import { IReduxState } from '../app/types';
 import { toggleDialog } from '../base/dialog/actions';
+import { isIosMobileBrowser, isIpadMobileBrowser } from '../base/environment/utils';
+import { HELP_BUTTON_ENABLED } from '../base/flags/constants';
+import { getFeatureFlag } from '../base/flags/functions';
 import JitsiMeetJS from '../base/lib-jitsi-meet';
 import { raiseHand } from '../base/participants/actions';
 import { getLocalParticipant, hasRaisedHand } from '../base/participants/functions';
+import { isToggleCameraEnabled } from '../base/tracks/functions.web';
 import { toggleChat } from '../chat/actions.web';
+import ChatButton from '../chat/components/web/ChatButton';
+import { useEmbedButton } from '../embed-meeting/hooks';
+import { useEtherpadButton } from '../etherpad/hooks';
+import { useFeedbackButton } from '../feedback/hooks.web';
 import { setGifMenuVisibility } from '../gifs/actions';
 import { isGifEnabled } from '../gifs/function.any';
+import InviteButton from '../invite/components/add-people-dialog/web/InviteButton';
 import { registerShortcut, unregisterShortcut } from '../keyboard-shortcuts/actions.any';
+import { useKeyboardShortcutsButton } from '../keyboard-shortcuts/hooks.web';
+import NoiseSuppressionButton from '../noise-suppression/components/NoiseSuppressionButton';
 import {
     close as closeParticipantsPane,
     open as openParticipantsPane
@@ -20,20 +31,331 @@ import {
     getParticipantsPaneOpen,
     isParticipantsPaneEnabled
 } from '../participants-pane/functions';
+import { useParticipantPaneButton } from '../participants-pane/hooks.web';
 import { addReactionToBuffer } from '../reactions/actions.any';
 import { toggleReactionsMenuVisibility } from '../reactions/actions.web';
+import RaiseHandContainerButton from '../reactions/components/web/RaiseHandContainerButtons';
 import { REACTIONS } from '../reactions/constants';
 import { shouldDisplayReactionsButtons } from '../reactions/functions.any';
+import { useReactionsButton } from '../reactions/hooks';
+import { useLiveStreamingButton, useRecordingButton } from '../recording/hooks.web';
+import { isSalesforceEnabled } from '../salesforce/functions';
 import { startScreenShareFlow } from '../screen-share/actions.web';
-import { isScreenVideoShared } from '../screen-share/functions';
+import ShareAudioButton from '../screen-share/components/web/ShareAudioButton';
+import { isScreenAudioSupported, isScreenVideoShared } from '../screen-share/functions';
+import { useSecurityDialogButton } from '../security/hooks';
+import SettingsButton from '../settings/components/web/SettingsButton';
+import SharedVideoButton from '../shared-video/components/web/SharedVideoButton';
 import SpeakerStats from '../speaker-stats/components/web/SpeakerStats';
 import { isSpeakerStatsDisabled } from '../speaker-stats/functions';
+import { useSpeakerStatsButton } from '../speaker-stats/hooks.web';
+import { useClosedCaptionButton } from '../subtitles/hooks.web';
 import { toggleTileView } from '../video-layout/actions.any';
 import { shouldDisplayTileView } from '../video-layout/functions.any';
+import { useTileViewButton } from '../video-layout/hooks';
+import VideoQualityButton from '../video-quality/components/VideoQualityButton.web';
 import VideoQualityDialog from '../video-quality/components/VideoQualityDialog.web';
+import { useVirtualBackgroundButton } from '../virtual-background/hooks';
+import { useWhiteboardButton } from '../whiteboard/hooks';
 
 import { setFullScreen } from './actions.web';
+import DownloadButton from './components/DownloadButton';
+import HelpButton from './components/HelpButton';
+import AudioSettingsButton from './components/web/AudioSettingsButton';
+import CustomOptionButton from './components/web/CustomOptionButton';
+import FullscreenButton from './components/web/FullscreenButton';
+import LinkToSalesforceButton from './components/web/LinkToSalesforceButton';
+import ProfileButton from './components/web/ProfileButton';
+import ShareDesktopButton from './components/web/ShareDesktopButton';
+import ToggleCameraButton from './components/web/ToggleCameraButton';
+import VideoSettingsButton from './components/web/VideoSettingsButton';
 import { isButtonEnabled, isDesktopShareButtonDisabled } from './functions.web';
+import { ICustomToolbarButton, IToolboxButton, ToolbarButton } from './types';
+
+
+const microphone = {
+    key: 'microphone',
+    Content: AudioSettingsButton,
+    group: 0
+};
+
+const camera = {
+    key: 'camera',
+    Content: VideoSettingsButton,
+    group: 0
+};
+
+const profile = {
+    key: 'profile',
+    Content: ProfileButton,
+    group: 1
+};
+
+const chat = {
+    key: 'chat',
+    Content: ChatButton,
+    group: 2
+};
+
+const desktop = {
+    key: 'desktop',
+    Content: ShareDesktopButton,
+    group: 2
+};
+
+// In Narrow layout and mobile web we are using drawer for popups and that is why it is better to include
+// all forms of reactions in the overflow menu. Otherwise the toolbox will be hidden and the reactions popup
+// misaligned.
+const raisehand = {
+    key: 'raisehand',
+    Content: RaiseHandContainerButton,
+    group: 2
+};
+
+const invite = {
+    key: 'invite',
+    Content: InviteButton,
+    group: 2
+};
+
+const toggleCamera = {
+    key: 'toggle-camera',
+    Content: ToggleCameraButton,
+    group: 2
+};
+
+const videoQuality = {
+    key: 'videoquality',
+    Content: VideoQualityButton,
+    group: 2
+};
+
+const fullscreen = {
+    key: 'fullscreen',
+    Content: FullscreenButton,
+    group: 2
+};
+
+const linkToSalesforce = {
+    key: 'linktosalesforce',
+    Content: LinkToSalesforceButton,
+    group: 2
+};
+
+const shareVideo = {
+    key: 'sharedvideo',
+    Content: SharedVideoButton,
+    group: 3
+};
+
+const shareAudio = {
+    key: 'shareaudio',
+    Content: ShareAudioButton,
+    group: 3
+};
+
+const noiseSuppression = {
+    key: 'noisesuppression',
+    Content: NoiseSuppressionButton,
+    group: 3
+};
+
+const settings = {
+    key: 'settings',
+    Content: SettingsButton,
+    group: 4
+};
+
+const download = {
+    key: 'download',
+    Content: DownloadButton,
+    group: 4
+};
+
+const help = {
+    key: 'help',
+    Content: HelpButton,
+    group: 4
+};
+
+/**
+ * A hook that returns the toggle camera button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+function useToggleCameraButton() {
+    const toggleCameraEnabled = useSelector(isToggleCameraEnabled);
+
+    if (toggleCameraEnabled) {
+        return toggleCamera;
+    }
+}
+
+/**
+ * A hook that returns the desktop sharing button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+function getDesktopSharingButton() {
+    if (JitsiMeetJS.isDesktopSharingEnabled()) {
+        return desktop;
+    }
+}
+
+/**
+ * A hook that returns the fullscreen button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+function getFullscreenButton() {
+    if (!isIosMobileBrowser() || isIpadMobileBrowser()) {
+        return fullscreen;
+    }
+}
+
+/**
+ * A hook that returns the "link to salesforce" button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+function useLinkToSalesforceButton() {
+    const _isSalesforceEnabled = useSelector(isSalesforceEnabled);
+
+    if (_isSalesforceEnabled) {
+        return linkToSalesforce;
+    }
+}
+
+
+/**
+ * A hook that returns the share audio button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+function getShareAudioButton() {
+    if (JitsiMeetJS.isDesktopSharingEnabled() && isScreenAudioSupported()) {
+        return shareAudio;
+    }
+}
+
+/**
+ * A hook that returns the download button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+function useDownloadButton() {
+    const visible = useSelector(
+        (state: IReduxState) => typeof state['features/base/config'].deploymentUrls?.downloadAppsUrl === 'string');
+
+    if (visible) {
+        return download;
+    }
+}
+
+/**
+ * A hook that returns the help button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+function useHelpButton() {
+    const visible = useSelector(
+        (state: IReduxState) =>
+            typeof state['features/base/config'].deploymentUrls?.userDocumentationURL === 'string'
+                && getFeatureFlag(state, HELP_BUTTON_ENABLED, true));
+
+    if (visible) {
+        return help;
+    }
+}
+
+/**
+* Returns all buttons that could be rendered.
+*
+* @param {Object} _customToolbarButtons - An array containing custom buttons objects.
+* @returns {Object} The button maps mainMenuButtons and overflowMenuButtons.
+*/
+export function useToolboxButtons(
+        _customToolbarButtons?: ICustomToolbarButton[]): { [key: string]: IToolboxButton; } {
+    const dekstopSharing = getDesktopSharingButton();
+    const toggleCameraButton = useToggleCameraButton();
+    const _fullscreen = getFullscreenButton();
+    const security = useSecurityDialogButton();
+    const reactions = useReactionsButton();
+    const participants = useParticipantPaneButton();
+    const tileview = useTileViewButton();
+    const cc = useClosedCaptionButton();
+    const recording = useRecordingButton();
+    const liveStreaming = useLiveStreamingButton();
+    const linktosalesforce = useLinkToSalesforceButton();
+    const shareaudio = getShareAudioButton();
+    const whiteboard = useWhiteboardButton();
+    const etherpad = useEtherpadButton();
+    const virtualBackground = useVirtualBackgroundButton();
+    const speakerStats = useSpeakerStatsButton();
+    const shortcuts = useKeyboardShortcutsButton();
+    const embed = useEmbedButton();
+    const feedback = useFeedbackButton();
+    const _download = useDownloadButton();
+    const _help = useHelpButton();
+
+    const buttons: { [key in ToolbarButton]?: IToolboxButton; } = {
+        microphone,
+        camera,
+        profile,
+        desktop: dekstopSharing,
+        chat,
+        raisehand,
+        reactions,
+        'participants-pane': participants,
+        invite,
+        tileview,
+        'toggle-camera': toggleCameraButton,
+        videoquality: videoQuality,
+        fullscreen: _fullscreen,
+        security,
+        closedcaptions: cc,
+        recording,
+        livestreaming: liveStreaming,
+        linktosalesforce,
+        sharedvideo: shareVideo,
+        shareaudio,
+        noisesuppression: noiseSuppression,
+        whiteboard,
+        etherpad,
+        'select-background': virtualBackground,
+        stats: speakerStats,
+        settings,
+        shortcuts,
+        embedmeeting: embed,
+        feedback,
+        download: _download,
+        help: _help
+    };
+    const buttonKeys = Object.keys(buttons) as ToolbarButton[];
+
+    buttonKeys.forEach(
+            key => typeof buttons[key] === 'undefined' && delete buttons[key]);
+
+    const customButtons = _customToolbarButtons?.reduce((prev, { backgroundColor, icon, id, text }) => {
+        prev[id] = {
+            backgroundColor,
+            key: id,
+            id,
+            Content: CustomOptionButton,
+            group: 4,
+            icon,
+            text
+        };
+
+        return prev;
+    }, {} as { [key: string]: ICustomToolbarButton; });
+
+    return {
+        ...buttons,
+        ...customButtons
+    };
+}
+
 
 export const useKeyboardShortcuts = (toolbarButtons: Array<string>) => {
     const dispatch = useDispatch();
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/middleware.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/middleware.web.ts
index 1f2d94b..afe90c7 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/middleware.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/middleware.web.ts
@@ -16,6 +16,7 @@ import {
     SET_TOOLBAR_BUTTONS,
     SET_TOOLBOX_TIMEOUT
 } from './actionTypes';
+import { setMainToolbarThresholds } from './actions.web';
 import { TOOLBAR_BUTTONS, VISITORS_MODE_BUTTONS } from './constants';
 import { NOTIFY_CLICK_MODE } from './types';
 
@@ -53,6 +54,9 @@ MiddlewareRegistry.register(store => next => action => {
             } = state['features/base/config'];
 
             batch(() => {
+                if (action.type !== I_AM_VISITOR_MODE) {
+                    dispatch(setMainToolbarThresholds());
+                }
                 dispatch({
                     type: SET_BUTTONS_WITH_NOTIFY_CLICK,
                     buttonsWithNotifyClick: _buildButtonsArray(buttonsWithNotifyClick, customToolbarButtons)
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/reducer.ts
index eac258d..23dd002 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/reducer.ts
@@ -6,6 +6,7 @@ import {
     FULL_SCREEN_CHANGED,
     SET_BUTTONS_WITH_NOTIFY_CLICK,
     SET_HANGUP_MENU_VISIBLE,
+    SET_MAIN_TOOLBAR_BUTTONS_THRESHOLDS,
     SET_OVERFLOW_DRAWER,
     SET_OVERFLOW_MENU_VISIBLE,
     SET_PARTICIPANT_MENU_BUTTONS_WITH_NOTIFY_CLICK,
@@ -17,7 +18,8 @@ import {
     SET_TOOLBOX_VISIBLE,
     TOGGLE_TOOLBOX_VISIBLE
 } from './actionTypes';
-import { NOTIFY_CLICK_MODE } from './types';
+import { THRESHOLDS } from './constants';
+import { IMainToolbarButtonThresholds, NOTIFY_CLICK_MODE } from './types';
 
 /**
  * Initial state of toolbox's part of Redux store.
@@ -47,6 +49,11 @@ const INITIAL_STATE = {
      */
     hovered: false,
 
+    /**
+     * The thresholds for screen size and visible main toolbar buttons.
+     */
+    mainToolbarButtonsThresholds: THRESHOLDS,
+
     participantMenuButtonsWithNotifyClick: new Map(),
 
     /**
@@ -98,6 +105,7 @@ export interface IToolboxState {
     fullScreen?: boolean;
     hangupMenuVisible: boolean;
     hovered: boolean;
+    mainToolbarButtonsThresholds: IMainToolbarButtonThresholds;
     overflowDrawer: boolean;
     overflowMenuVisible: boolean;
     participantMenuButtonsWithNotifyClick: Map<string, NOTIFY_CLICK_MODE>;
@@ -151,6 +159,12 @@ ReducerRegistry.register<IToolboxState>(
                 ...state,
                 buttonsWithNotifyClick: action.buttonsWithNotifyClick
             };
+
+        case SET_MAIN_TOOLBAR_BUTTONS_THRESHOLDS:
+            return {
+                ...state,
+                mainToolbarButtonsThresholds: action.mainToolbarButtonsThresholds
+            };
         case SET_TOOLBAR_HOVERED:
             return {
                 ...state,
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/types.ts b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/types.ts
index 9be8155..33063c9 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/toolbox/types.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/toolbox/types.ts
@@ -1,8 +1,9 @@
 import { ComponentType } from 'react';
 
+import { CustomOptionButton } from './components';
+
 export interface IToolboxButton {
     Content: ComponentType<any>;
-    alias?: string;
     group: number;
     key: string;
 }
@@ -49,3 +50,18 @@ export enum NOTIFY_CLICK_MODE {
     ONLY_NOTIFY = 'ONLY_NOTIFY',
     PREVENT_AND_NOTIFY = 'PREVENT_AND_NOTIFY'
 }
+
+export type IMainToolbarButtonThresholds = Array<{
+    order: Array<ToolbarButton | string>;
+    width: number;
+}>;
+
+export interface ICustomToolbarButton {
+    Content?: typeof CustomOptionButton;
+    backgroundColor?: string;
+    group?: number;
+    icon: string;
+    id: string;
+    key?: string;
+    text: string;
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/transcribing/jitsi-bcp47-map.json b/node_modules/@jitsi/react-native-sdk/react/features/transcribing/jitsi-bcp47-map.json
index 80e025b..e3265c6 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/transcribing/jitsi-bcp47-map.json
+++ b/node_modules/@jitsi/react-native-sdk/react/features/transcribing/jitsi-bcp47-map.json
@@ -20,6 +20,7 @@
     "hi": "hi-IN",
     "mr": "mr-IN",
     "hr": "hr-HR",
+    "hsb": "hsb-DE",
     "hu": "hu-HU",
     "hy": "hy-AM",
     "id": "id-ID",
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/transcribing/subscriber.ts b/node_modules/@jitsi/react-native-sdk/react/features/transcribing/subscriber.ts
index 807ee5a..dceddfa 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/transcribing/subscriber.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/transcribing/subscriber.ts
@@ -7,6 +7,7 @@ import { playSound } from '../base/sounds/actions';
 import { showNotification } from '../notifications/actions';
 import { NOTIFICATION_TIMEOUT_TYPE } from '../notifications/constants';
 import { RECORDING_OFF_SOUND_ID, RECORDING_ON_SOUND_ID } from '../recording/constants';
+import { isLiveStreamingRunning, isRecordingRunning } from '../recording/functions';
 
 import { isRecorderTranscriptionsRunning } from './functions';
 
@@ -17,10 +18,10 @@ StateListenerRegistry.register(
     /* selector */ isRecorderTranscriptionsRunning,
     /* listener */ (isRecorderTranscriptionsRunningValue, { getState, dispatch }) => {
         if (isRecorderTranscriptionsRunningValue) {
-            notifyTranscribingStatusChanged(true);
+            notifyTranscribingStatusChanged(getState, true);
             maybeEmitRecordingNotification(dispatch, getState, true);
         } else {
-            notifyTranscribingStatusChanged(false);
+            notifyTranscribingStatusChanged(getState, false);
             maybeEmitRecordingNotification(dispatch, getState, false);
         }
     }
@@ -58,11 +59,18 @@ function maybeEmitRecordingNotification(dispatch: IStore['dispatch'], getState:
 /**
  * Notify external application (if API is enabled) that transcribing has started or stopped.
  *
+ * @param {Function} getState - The Redux state.
  * @param {boolean} on - True if transcribing is on, false otherwise.
  * @returns {void}
  */
-function notifyTranscribingStatusChanged(on: boolean) {
+function notifyTranscribingStatusChanged(getState: IStore['getState'], on: boolean) {
     if (typeof APP !== 'undefined') {
+        const state = getState();
+        const isRecording = isRecordingRunning(state);
+        const isStreaming = isLiveStreamingRunning(state);
+        const mode = isRecording ? JitsiRecordingConstants.mode.FILE : JitsiRecordingConstants.mode.STREAM;
+
+        APP.API.notifyRecordingStatusChanged(isRecording || isStreaming, mode, undefined, on);
         APP.API.notifyTranscribingStatusChanged(on);
     }
 }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/transcribing/transcriber-langs.json b/node_modules/@jitsi/react-native-sdk/react/features/transcribing/transcriber-langs.json
index f277b53..406fc51 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/transcribing/transcriber-langs.json
+++ b/node_modules/@jitsi/react-native-sdk/react/features/transcribing/transcriber-langs.json
@@ -45,6 +45,7 @@
     "is-IS": "Icelandic (Iceland)",
     "it-IT": "Italian (Italy)",
     "lt-LT": "Lithuanian (Lithuania)",
+    "hsb-DE": "Upper Sorbian (Germany)",
     "hu-HU": "Hungarian (Hungary)",
     "nl-NL": "Dutch (Netherlands)",
     "no-NO": "Norwegian Bokmål (Norway)",
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-layout/hooks.ts b/node_modules/@jitsi/react-native-sdk/react/features/video-layout/hooks.ts
new file mode 100644
index 0000000..fc5f6c6
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-layout/hooks.ts
@@ -0,0 +1,26 @@
+import { useSelector } from 'react-redux';
+
+import { IReduxState } from '../app/types';
+import { TILE_VIEW_ENABLED } from '../base/flags/constants';
+import { getFeatureFlag } from '../base/flags/functions';
+
+import TileViewButton from './components/TileViewButton';
+
+const tileview = {
+    key: 'tileview',
+    Content: TileViewButton,
+    group: 2
+};
+
+/**
+ * A hook that returns the tile view button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useTileViewButton() {
+    const tileViewEnabled = useSelector((state: IReduxState) => getFeatureFlag(state, TILE_VIEW_ENABLED, true));
+
+    if (tileViewEnabled) {
+        return tileview;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/actions.any.ts b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/actions.any.ts
index 76d5566..645e7b2 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/actions.any.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/actions.any.ts
@@ -1,5 +1,3 @@
-// @ts-expect-error
-import UIEvents from '../../../service/UI/UIEvents';
 import {
     AUDIO_MUTE,
     VIDEO_MUTE,
@@ -55,8 +53,9 @@ export function muteLocal(enable: boolean, mediaType: MediaType, stopScreenShari
             : setVideoMuted(enable, VIDEO_MUTISM_AUTHORITY.USER, /* ensureTrack */ true));
 
         // FIXME: The old conference logic still relies on this event being emitted.
-        typeof APP === 'undefined'
-            || APP.UI.emitEvent(isAudio ? UIEvents.AUDIO_MUTED : UIEvents.VIDEO_MUTED, enable);
+        if (typeof APP !== 'undefined') {
+            isAudio ? APP.conference.muteAudio(enable) : APP.conference.muteVideo(enable, false);
+        }
     };
 }
 
@@ -109,4 +108,3 @@ export function muteAllParticipants(exclude: Array<string>, mediaType: MediaType
         });
     };
 }
-
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/ConnectionStatusButton.ts b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/ConnectionStatusButton.ts
index fbc797f..6f2ae06 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/ConnectionStatusButton.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/ConnectionStatusButton.ts
@@ -1,11 +1,9 @@
 import { connect } from 'react-redux';
 
-import { openSheet } from '../../../base/dialog/actions';
 import { translate } from '../../../base/i18n/functions';
 import { IconInfoCircle } from '../../../base/icons/svg';
 import AbstractButton, { IProps as AbstractButtonProps } from '../../../base/toolbox/components/AbstractButton';
-
-import ConnectionStatusComponent from './ConnectionStatusComponent';
+import { showConnectionStatus } from '../../../participants-pane/actions.native';
 
 export interface IProps extends AbstractButtonProps {
 
@@ -31,9 +29,7 @@ class ConnectionStatusButton extends AbstractButton<IProps> {
     _handleClick() {
         const { dispatch, participantID } = this.props;
 
-        dispatch(openSheet(ConnectionStatusComponent, {
-            participantID
-        }));
+        dispatch(showConnectionStatus(participantID));
     }
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/LocalVideoMenu.tsx b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/LocalVideoMenu.tsx
index 020c4da..15309bb 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/LocalVideoMenu.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/LocalVideoMenu.tsx
@@ -83,13 +83,18 @@ class LocalVideoMenu extends PureComponent<IProps> {
             styles: bottomSheetStyles.buttons
         };
 
+        const connectionStatusButtonProps = {
+            ...buttonProps,
+            afterClick: undefined
+        };
+
         return (
             <BottomSheet
                 renderHeader = { this._renderMenuHeader }
                 showSlidingView = { true }>
                 <ToggleSelfViewButton { ...buttonProps } />
                 { _showDemote && <DemoteToVisitorButton { ...buttonProps } /> }
-                <ConnectionStatusButton { ...buttonProps } />
+                <ConnectionStatusButton { ...connectionStatusButtonProps } />
             </BottomSheet>
         );
     }
@@ -136,12 +141,13 @@ class LocalVideoMenu extends PureComponent<IProps> {
  * @returns {IProps}
  */
 function _mapStateToProps(state: IReduxState) {
+    const { disableSelfDemote } = state['features/base/config'];
     const participant = getLocalParticipant(state);
 
     return {
         _participant: participant,
         _participantDisplayName: getParticipantDisplayName(state, participant?.id ?? ''),
-        _showDemote: getParticipantCount(state) > 1
+        _showDemote: !disableSelfDemote && getParticipantCount(state) > 1
     };
 }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/LowerHandButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/LowerHandButton.tsx
new file mode 100644
index 0000000..dbcaceb
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/LowerHandButton.tsx
@@ -0,0 +1,71 @@
+import { connect } from 'react-redux';
+
+import { IReduxState } from '../../../app/types';
+import { getCurrentConference } from '../../../base/conference/functions';
+import { IJitsiConference } from '../../../base/conference/reducer';
+import { translate } from '../../../base/i18n/functions';
+import { IconRaiseHand } from '../../../base/icons/svg';
+import AbstractButton, { IProps as AbstractButtonProps } from '../../../base/toolbox/components/AbstractButton';
+import { LOWER_HAND_MESSAGE } from '../../../base/tracks/constants';
+
+interface IProps extends AbstractButtonProps {
+
+    /**
+     * The current conference.
+     */
+    _conference: IJitsiConference | undefined;
+
+    /**
+     * The ID of the participant object that this button is supposed to
+     * ask to lower the hand.
+     */
+    participantId: String | undefined;
+}
+
+/**
+ * Implements a React {@link Component} which displays a button for lowering certain
+ * participant raised hands.
+ *
+ * @returns {JSX.Element}
+ */
+class LowerHandButton extends AbstractButton<IProps> {
+    icon = IconRaiseHand;
+    accessibilityLabel = 'participantsPane.actions.lowerHand';
+    label = 'participantsPane.actions.lowerHand';
+
+    /**
+     * Handles clicking / pressing the button, and asks the participant to lower hand.
+     *
+     * @private
+     * @returns {void}
+     */
+    _handleClick() {
+        const { participantId, _conference } = this.props;
+
+        _conference?.sendEndpointMessage(
+            participantId,
+            {
+                name: LOWER_HAND_MESSAGE
+            }
+        );
+    }
+}
+
+/**
+ * Maps part of the Redux state to the props of this component.
+ *
+ * @param {Object} state - The Redux state.
+ * @param {Object} ownProps - Properties of component.
+ * @returns {IProps}
+ */
+function mapStateToProps(state: IReduxState, ownProps: any) {
+    const { participantID } = ownProps;
+    const currentConference = getCurrentConference(state);
+
+    return {
+        _conference: currentConference,
+        participantId: participantID
+    };
+}
+
+export default translate(connect(mapStateToProps)(LowerHandButton));
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/RemoteVideoMenu.tsx b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/RemoteVideoMenu.tsx
index 89d09ca..677efe2 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/RemoteVideoMenu.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/native/RemoteVideoMenu.tsx
@@ -16,6 +16,7 @@ import { translate } from '../../../base/i18n/functions';
 import {
     getParticipantById,
     getParticipantDisplayName,
+    hasRaisedHand,
     isLocalParticipantModerator
 } from '../../../base/participants/functions';
 import { getBreakoutRooms, getCurrentRoomId, isInBreakoutRoom } from '../../../breakout-rooms/functions';
@@ -27,6 +28,7 @@ import ConnectionStatusButton from './ConnectionStatusButton';
 import DemoteToVisitorButton from './DemoteToVisitorButton';
 import GrantModeratorButton from './GrantModeratorButton';
 import KickButton from './KickButton';
+import LowerHandButton from './LowerHandButton';
 import MuteButton from './MuteButton';
 import MuteEveryoneElseButton from './MuteEveryoneElseButton';
 import MuteVideoButton from './MuteVideoButton';
@@ -78,6 +80,11 @@ interface IProps {
      */
     _isParticipantAvailable?: boolean;
 
+    /**
+     * Whether or not the targeted participant joined without audio.
+     */
+    _isParticipantSilent: boolean;
+
     /**
      * Whether the local participant is moderator or not.
      */
@@ -88,6 +95,11 @@ interface IProps {
      */
     _participantDisplayName: string;
 
+    /**
+     * Whether the targeted participant raised hand or not.
+     */
+    _raisedHand: boolean;
+
     /**
      * Array containing the breakout rooms.
      */
@@ -143,7 +155,9 @@ class RemoteVideoMenu extends PureComponent<IProps> {
             _disableGrantModerator,
             _isBreakoutRoom,
             _isParticipantAvailable,
+            _isParticipantSilent,
             _moderator,
+            _raisedHand,
             _rooms,
             _showDemote,
             _currentRoomId,
@@ -166,10 +180,11 @@ class RemoteVideoMenu extends PureComponent<IProps> {
             <BottomSheet
                 renderHeader = { this._renderMenuHeader }
                 showSlidingView = { _isParticipantAvailable }>
-                <AskUnmuteButton { ...buttonProps } />
+                {!_isParticipantSilent && <AskUnmuteButton { ...buttonProps } />}
                 { !_disableRemoteMute && <MuteButton { ...buttonProps } /> }
                 <MuteEveryoneElseButton { ...buttonProps } />
-                { !_disableRemoteMute && <MuteVideoButton { ...buttonProps } /> }
+                { _moderator && _raisedHand && <LowerHandButton { ...buttonProps } /> }
+                { !_disableRemoteMute && !_isParticipantSilent && <MuteVideoButton { ...buttonProps } /> }
                 {/* @ts-ignore */}
                 <Divider style = { styles.divider as ViewStyle } />
                 { !_disableKick && <KickButton { ...buttonProps } /> }
@@ -242,7 +257,7 @@ function _mapStateToProps(state: IReduxState, ownProps: any) {
     const kickOutEnabled = getFeatureFlag(state, KICK_OUT_ENABLED, true);
     const { participantId } = ownProps;
     const { remoteVideoMenu = {}, disableRemoteMute } = state['features/base/config'];
-    const isParticipantAvailable = getParticipantById(state, participantId);
+    const participant = getParticipantById(state, participantId);
     const { disableKick, disablePrivateChat } = remoteVideoMenu;
     const _rooms = Object.values(getBreakoutRooms(state));
     const _currentRoomId = getCurrentRoomId(state);
@@ -250,6 +265,7 @@ function _mapStateToProps(state: IReduxState, ownProps: any) {
     const moderator = isLocalParticipantModerator(state);
     const _iAmVisitor = state['features/visitors'].iAmVisitor;
     const _isBreakoutRoom = isInBreakoutRoom(state);
+    const raisedHand = hasRaisedHand(participant);
 
     return {
         _currentRoomId,
@@ -257,9 +273,11 @@ function _mapStateToProps(state: IReduxState, ownProps: any) {
         _disableRemoteMute: Boolean(disableRemoteMute),
         _disablePrivateChat: Boolean(disablePrivateChat) || _iAmVisitor,
         _isBreakoutRoom,
-        _isParticipantAvailable: Boolean(isParticipantAvailable),
+        _isParticipantAvailable: Boolean(participant),
+        _isParticipantSilent: Boolean(participant?.isSilent),
         _moderator: moderator,
         _participantDisplayName: getParticipantDisplayName(state, participantId),
+        _raisedHand: raisedHand,
         _rooms,
         _showDemote: moderator
     };
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/LocalVideoMenuTriggerButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/LocalVideoMenuTriggerButton.tsx
index e0e366e..84eb6b0 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/LocalVideoMenuTriggerButton.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/LocalVideoMenuTriggerButton.tsx
@@ -268,7 +268,7 @@ const LocalVideoMenuTriggerButton = ({
 function _mapStateToProps(state: IReduxState, ownProps: Partial<IProps>) {
     const { thumbnailType } = ownProps;
     const localParticipant = getLocalParticipant(state);
-    const { disableLocalVideoFlip, disableSelfViewSettings } = state['features/base/config'];
+    const { disableLocalVideoFlip, disableSelfDemote, disableSelfViewSettings } = state['features/base/config'];
     const videoTrack = getLocalVideoTrack(state['features/base/tracks']);
     const { overflowDrawer } = state['features/toolbox'];
     const { showConnectionInfo } = state['features/base/connection'];
@@ -292,7 +292,7 @@ function _mapStateToProps(state: IReduxState, ownProps: Partial<IProps>) {
 
     return {
         _menuPosition,
-        _showDemote: getParticipantCount(state) > 1,
+        _showDemote: !disableSelfDemote && getParticipantCount(state) > 1,
         _showLocalVideoFlipButton: !disableLocalVideoFlip && videoTrack?.videoType !== 'desktop',
         _showHideSelfViewButton: showHideSelfViewButton,
         _overflowDrawer: overflowDrawer,
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/LowerHandButton.tsx b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/LowerHandButton.tsx
new file mode 100644
index 0000000..fd1ea91
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/LowerHandButton.tsx
@@ -0,0 +1,56 @@
+import React, { useCallback } from 'react';
+import { useTranslation } from 'react-i18next';
+import { useDispatch, useSelector } from 'react-redux';
+
+import { getCurrentConference } from '../../../base/conference/functions';
+import { IconRaiseHand } from '../../../base/icons/svg';
+import { raiseHand } from '../../../base/participants/actions';
+import { LOWER_HAND_MESSAGE } from '../../../base/tracks/constants';
+import ContextMenuItem from '../../../base/ui/components/web/ContextMenuItem';
+
+interface IProps {
+
+    /**
+     * The ID of the participant that's linked to the button.
+     */
+    participantID?: String;
+}
+
+/**
+ * Implements a React {@link Component} which displays a button for notifying certain
+ * participant who raised hand to lower hand.
+ *
+ * @returns {JSX.Element}
+ */
+const LowerHandButton = ({
+    participantID = ''
+}: IProps): JSX.Element => {
+    const { t } = useTranslation();
+    const dispatch = useDispatch();
+    const currentConference = useSelector(getCurrentConference);
+    const accessibilityText = participantID
+        ? t('participantsPane.actions.lowerHand')
+        : t('participantsPane.actions.lowerAllHands');
+
+    const handleClick = useCallback(() => {
+        if (!participantID) {
+            dispatch(raiseHand(false));
+        }
+        currentConference?.sendEndpointMessage(
+            participantID,
+            {
+                name: LOWER_HAND_MESSAGE
+            }
+        );
+    }, [ participantID ]);
+
+    return (
+        <ContextMenuItem
+            accessibilityLabel = { accessibilityText }
+            icon = { IconRaiseHand }
+            onClick = { handleClick }
+            text = { accessibilityText } />
+    );
+};
+
+export default LowerHandButton;
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/ParticipantContextMenu.tsx b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/ParticipantContextMenu.tsx
index 1e55ffb..3eabde6 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/ParticipantContextMenu.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/components/web/ParticipantContextMenu.tsx
@@ -9,7 +9,7 @@ import Avatar from '../../../base/avatar/components/Avatar';
 import { isIosMobileBrowser, isMobileBrowser } from '../../../base/environment/utils';
 import { MEDIA_TYPE } from '../../../base/media/constants';
 import { PARTICIPANT_ROLE } from '../../../base/participants/constants';
-import { getLocalParticipant } from '../../../base/participants/functions';
+import { getLocalParticipant, hasRaisedHand } from '../../../base/participants/functions';
 import { IParticipant } from '../../../base/participants/types';
 import { isParticipantAudioMuted, isParticipantVideoMuted } from '../../../base/tracks/functions.any';
 import ContextMenu from '../../../base/ui/components/web/ContextMenu';
@@ -33,6 +33,7 @@ import CustomOptionButton from './CustomOptionButton';
 import DemoteToVisitorButton from './DemoteToVisitorButton';
 import GrantModeratorButton from './GrantModeratorButton';
 import KickButton from './KickButton';
+import LowerHandButton from './LowerHandButton';
 import MuteButton from './MuteButton';
 import MuteEveryoneElseButton from './MuteEveryoneElseButton';
 import MuteEveryoneElsesVideoButton from './MuteEveryoneElsesVideoButton';
@@ -148,6 +149,7 @@ const ParticipantContextMenu = ({
         : participant?.id ? participantsVolume[participant?.id] : undefined) ?? 1;
     const isBreakoutRoom = useSelector(isInBreakoutRoom);
     const isModerationSupported = useSelector((state: IReduxState) => isAvModerationSupported()(state));
+    const raisedHands = hasRaisedHand(participant);
     const stageFilmstrip = useSelector(isStageFilmstripAvailable);
     const shouldDisplayVerification = useSelector((state: IReduxState) => displayVerification(state, participant?.id));
     const buttonsWithNotifyClick = useSelector(getParticipantMenuButtonsWithNotifyClick);
@@ -214,7 +216,7 @@ const ParticipantContextMenu = ({
 
     if (_isModerator) {
         if (isModerationSupported) {
-            if (_isAudioMuted
+            if (_isAudioMuted && !participant.isSilent
                 && !(isClickedFromParticipantPane && quickActionButtonType === QUICK_ACTION_BUTTON.ASK_TO_UNMUTE)) {
                 buttons.push(<AskToUnmuteButton
                     { ...getButtonProps(BUTTONS.ASK_UNMUTE) }
@@ -230,7 +232,7 @@ const ParticipantContextMenu = ({
             }
         }
 
-        if (!disableRemoteMute) {
+        if (!disableRemoteMute && !participant.isSilent) {
             if (!(isClickedFromParticipantPane && quickActionButtonType === QUICK_ACTION_BUTTON.MUTE)) {
                 buttons.push(<MuteButton { ...getButtonProps(BUTTONS.MUTE) } />);
             }
@@ -241,6 +243,10 @@ const ParticipantContextMenu = ({
             buttons.push(<MuteEveryoneElsesVideoButton { ...getButtonProps(BUTTONS.MUTE_OTHERS_VIDEO) } />);
         }
 
+        if (raisedHands) {
+            buttons2.push(<LowerHandButton { ...getButtonProps(BUTTONS.LOWER_PARTICIPANT_HAND) } />);
+        }
+
         if (!disableGrantModerator && !isBreakoutRoom) {
             buttons2.push(<GrantModeratorButton { ...getButtonProps(BUTTONS.GRANT_MODERATOR) } />);
         }
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/constants.ts b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/constants.ts
index acf90fb..a4c8a1a 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/video-menu/constants.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-menu/constants.ts
@@ -25,6 +25,7 @@ export const PARTICIPANT_MENU_BUTTONS = {
     GRANT_MODERATOR: 'grant-moderator',
     HIDE_SELF_VIEW: 'hide-self-view',
     KICK: 'kick',
+    LOWER_PARTICIPANT_HAND: 'lower-participant-hand',
     MUTE: 'mute',
     MUTE_OTHERS: 'mute-others',
     MUTE_OTHERS_VIDEO: 'mute-others-video',
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-quality/constants.ts b/node_modules/@jitsi/react-native-sdk/react/features/video-quality/constants.ts
index c07388b..eb51505 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/video-quality/constants.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-quality/constants.ts
@@ -5,6 +5,18 @@
  */
 export const DEFAULT_LAST_N = 20;
 
+/**
+ * The supported video codecs.
+ *
+ * @type {enum}
+ */
+export enum VIDEO_CODEC {
+    AV1 = 'av1',
+    H264 = 'h264',
+    VP8 = 'vp8',
+    VP9 = 'vp9'
+}
+
 /**
  * The supported remote video resolutions. The values are currently based on
  * available simulcast layers.
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/video-quality/subscriber.ts b/node_modules/@jitsi/react-native-sdk/react/features/video-quality/subscriber.ts
index 4ccdcca..b08c67d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/video-quality/subscriber.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/video-quality/subscriber.ts
@@ -3,10 +3,11 @@ import debounce from 'lodash/debounce';
 import { IReduxState, IStore } from '../app/types';
 import { _handleParticipantError } from '../base/conference/functions';
 import { getSsrcRewritingFeatureFlag } from '../base/config/functions.any';
-import { MEDIA_TYPE } from '../base/media/constants';
+import { MEDIA_TYPE, VIDEO_TYPE } from '../base/media/constants';
 import {
     getLocalParticipant,
-    getSourceNamesByMediaType
+    getSourceNamesByMediaTypeAndParticipant,
+    getSourceNamesByVideoTypeAndParticipant
 } from '../base/participants/functions';
 import StateListenerRegistry from '../base/redux/StateListenerRegistry';
 import { getTrackSourceNameByMediaTypeAndParticipant } from '../base/tracks/functions';
@@ -321,10 +322,10 @@ function _getSourceNames(participantList: Array<string>, state: IReduxState): Ar
 
     participantList.forEach(participantId => {
         if (getSsrcRewritingFeatureFlag(state)) {
-            const sourceNames: string[] | undefined
-                = getSourceNamesByMediaType(state, participantId, MEDIA_TYPE.VIDEO);
+            const sourceNames: string[]
+                = getSourceNamesByMediaTypeAndParticipant(state, participantId, MEDIA_TYPE.VIDEO);
 
-            sourceNames?.length && sourceNamesList.push(...sourceNames);
+            sourceNames.length && sourceNamesList.push(...sourceNames);
         } else {
             let sourceName: string;
 
@@ -428,8 +429,9 @@ function _updateReceiverVideoConstraints({ getState }: IStore) {
         if (remoteScreenShares.includes(largeVideoParticipantId)) {
             largeVideoSourceName = largeVideoParticipantId;
         } else {
-            largeVideoSourceName = getTrackSourceNameByMediaTypeAndParticipant(
-                    tracks, MEDIA_TYPE.VIDEO, largeVideoParticipantId);
+            largeVideoSourceName = getSsrcRewritingFeatureFlag(state)
+                ? getSourceNamesByVideoTypeAndParticipant(state, largeVideoParticipantId, VIDEO_TYPE.CAMERA)[0]
+                : getTrackSourceNameByMediaTypeAndParticipant(tracks, MEDIA_TYPE.VIDEO, largeVideoParticipantId);
         }
     }
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/virtual-background/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/virtual-background/actions.ts
index 18d2ac8..1a671a2 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/virtual-background/actions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/virtual-background/actions.ts
@@ -14,8 +14,8 @@ import { IVirtualBackground } from './reducer';
  */
 export function toggleBackgroundEffect(options: IVirtualBackground, jitsiTrack: any) {
     return async function(dispatch: IStore['dispatch'], getState: IStore['getState']) {
-        await dispatch(backgroundEnabled(options.backgroundEffectEnabled));
-        await dispatch(setVirtualBackground(options));
+        dispatch(backgroundEnabled(options.backgroundEffectEnabled));
+        dispatch(setVirtualBackground(options));
         const state = getState();
         const virtualBackground = state['features/virtual-background'];
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/virtual-background/hooks.ts b/node_modules/@jitsi/react-native-sdk/react/features/virtual-background/hooks.ts
new file mode 100644
index 0000000..85342b9
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/virtual-background/hooks.ts
@@ -0,0 +1,27 @@
+import { useSelector } from 'react-redux';
+
+import { isScreenVideoShared } from '../screen-share/functions';
+
+import VideoBackgroundButton from './components/VideoBackgroundButton';
+import { checkBlurSupport, checkVirtualBackgroundEnabled } from './functions';
+
+const virtualBackground = {
+    key: 'select-background',
+    Content: VideoBackgroundButton,
+    group: 3
+};
+
+/**
+ * A hook that returns the virtual background button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useVirtualBackgroundButton() {
+    const _checkBlurSupport = checkBlurSupport();
+    const _isScreenVideoShared = useSelector(isScreenVideoShared);
+    const _checkVirtualBackgroundEnabled = useSelector(checkVirtualBackgroundEnabled);
+
+    if (_checkBlurSupport && !_isScreenVideoShared && _checkVirtualBackgroundEnabled) {
+        return virtualBackground;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/actionTypes.ts b/node_modules/@jitsi/react-native-sdk/react/features/visitors/actionTypes.ts
index 4dfdbc6..bdfe11f 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/visitors/actionTypes.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/actionTypes.ts
@@ -8,6 +8,16 @@
  */
 export const UPDATE_VISITORS_COUNT = 'UPDATE_VISITORS_COUNT';
 
+/**
+ * The type of (redux) action to update visitors in queue count.
+ *
+ * {
+ *     type: UPDATE_VISITORS_IN_QUEUE_COUNT,
+ *     count: number
+ * }
+ */
+export const UPDATE_VISITORS_IN_QUEUE_COUNT = 'UPDATE_VISITORS_IN_QUEUE_COUNT';
+
 /**
  * The type of (redux) action which enables/disables visitors UI mode.
  *
@@ -39,6 +49,16 @@ export const VISITOR_PROMOTION_REQUEST = 'VISITOR_PROMOTION_REQUEST';
  */
 export const CLEAR_VISITOR_PROMOTION_REQUEST = 'CLEAR_VISITOR_PROMOTION_REQUEST';
 
+/**
+ * The type of (redux) action which sets in visitor's queue.
+ *
+ * {
+ *     type: SET_IN_VISITORS_QUEUE,
+ *     value: boolean
+ * }
+ */
+export const SET_IN_VISITORS_QUEUE = 'SET_IN_VISITORS_QUEUE';
+
 /**
  * The type of (redux) action which sets visitor demote actor.
  *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/actions.ts b/node_modules/@jitsi/react-native-sdk/react/features/visitors/actions.ts
index 9dcdeea..f374874 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/visitors/actions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/actions.ts
@@ -8,9 +8,11 @@ import { getLocalParticipant } from '../base/participants/functions';
 import {
     CLEAR_VISITOR_PROMOTION_REQUEST,
     I_AM_VISITOR_MODE,
+    SET_IN_VISITORS_QUEUE,
     SET_VISITORS_SUPPORTED,
     SET_VISITOR_DEMOTE_ACTOR,
     UPDATE_VISITORS_COUNT,
+    UPDATE_VISITORS_IN_QUEUE_COUNT,
     VISITOR_PROMOTION_REQUEST
 } from './actionTypes';
 import { IPromotionRequest } from './types';
@@ -91,8 +93,11 @@ export function demoteRequest(id: string) {
 
         if (id === localParticipant?.id) {
             dispatch(disconnect(true))
-                .then(() => dispatch(setPreferVisitor(true)))
-                .then(() => dispatch(connect()));
+                .then(() => {
+                    dispatch(setPreferVisitor(true));
+
+                    return dispatch(connect());
+                });
         } else {
             conference?.sendMessage({
                 type: 'visitors',
@@ -150,6 +155,21 @@ export function setIAmVisitor(enabled: boolean) {
     };
 }
 
+/**
+ * Sets in visitor's queue.
+ *
+ * @param {boolean} value - The new value.
+ * @returns {{
+ *     type: SET_IN_VISITORS_QUEUE,
+ * }}
+ */
+export function setInVisitorsQueue(value: boolean) {
+    return {
+        type: SET_IN_VISITORS_QUEUE,
+        value
+    };
+}
+
 /**
  * Sets visitor demote actor.
  *
@@ -194,3 +214,34 @@ export function updateVisitorsCount(count: number) {
         count
     };
 }
+
+/**
+ * Visitors in queue count has been updated.
+ *
+ * @param {number} count - The new visitors in queue count.
+ * @returns {{
+ *     type: UPDATE_VISITORS_IN_QUEUE_COUNT,
+ * }}
+ */
+export function updateVisitorsInQueueCount(count: number) {
+    return {
+        type: UPDATE_VISITORS_IN_QUEUE_COUNT,
+        count
+    };
+}
+
+/**
+ * Closes the overflow menu if opened.
+ *
+ * @private
+ * @returns {void}
+ */
+export function goLive() {
+    return (_: IStore['dispatch'], getState: IStore['getState']) => {
+        const { conference } = getState()['features/base/conference'];
+
+        conference?.getMetadataHandler().setMetadata('visitors', {
+            live: true
+        });
+    };
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/index.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/index.native.ts
new file mode 100644
index 0000000..477cbb9
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/index.native.ts
@@ -0,0 +1 @@
+export { default as JoinMeetingDialog } from './native/JoinMeetingDialog';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/index.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/index.web.ts
new file mode 100644
index 0000000..fff10e4
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/index.web.ts
@@ -0,0 +1 @@
+export { default as JoinMeetingDialog } from './web/JoinMeetingDialog';
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/JoinMeetingDialog.tsx b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/JoinMeetingDialog.tsx
new file mode 100644
index 0000000..363b1e1
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/JoinMeetingDialog.tsx
@@ -0,0 +1,40 @@
+import React, { useCallback, useState } from 'react';
+import { useTranslation } from 'react-i18next';
+import { View, ViewStyle } from 'react-native';
+import Dialog from 'react-native-dialog';
+
+import { StandaloneRaiseHandButton as RaiseHandButton } from '../../../reactions/components/native/RaiseHandButton';
+import styles from '../../components/native/styles';
+
+/**
+ * Component that renders the join meeting dialog for visitors.
+ *
+ * @returns {JSX.Element}
+ */
+export default function JoinMeetingDialog() {
+    const { t } = useTranslation();
+    const [ visible, setVisible ] = useState(true);
+
+    const closeDialog = useCallback(() => {
+        setVisible(false);
+    }, []);
+
+    return (
+        <Dialog.Container
+            coverScreen = { false }
+            visible = { visible }>
+            <Dialog.Title>{ t('visitors.joinMeeting.title') }</Dialog.Title>
+            <Dialog.Description>
+                { t('visitors.joinMeeting.description') }
+                <View style = { styles.raiseHandButton as ViewStyle }>
+                    {/* @ts-ignore */}
+                    <RaiseHandButton disableClick = { true } />
+                </View>
+            </Dialog.Description>
+            <Dialog.Description>{t('visitors.joinMeeting.wishToSpeak')}</Dialog.Description>
+            <Dialog.Button
+                label = { t('dialog.Ok') }
+                onPress = { closeDialog } />
+        </Dialog.Container>
+    );
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/VisitorsCountLabel.tsx b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/VisitorsCountLabel.tsx
index 9477522..cdacd51 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/VisitorsCountLabel.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/VisitorsCountLabel.tsx
@@ -5,7 +5,7 @@ import { IReduxState } from '../../../app/types';
 import { IconUsers } from '../../../base/icons/svg';
 import Label from '../../../base/label/components/native/Label';
 import BaseTheme from '../../../base/ui/components/BaseTheme.native';
-import { getVisitorsShortText, iAmVisitor } from '../../functions';
+import { getVisitorsCount, getVisitorsShortText, iAmVisitor } from '../../functions';
 
 const styles = {
     raisedHandsCountLabel: {
@@ -25,8 +25,7 @@ const styles = {
 
 const VisitorsCountLabel = () => {
     const visitorsMode = useSelector((state: IReduxState) => iAmVisitor(state));
-    const visitorsCount = useSelector((state: IReduxState) =>
-        state['features/visitors'].count || 0);
+    const visitorsCount = useSelector(getVisitorsCount);
 
     return !visitorsMode && visitorsCount > 0 ? (
         <Label
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/VisitorsQueue.tsx b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/VisitorsQueue.tsx
new file mode 100644
index 0000000..78f40f0
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/VisitorsQueue.tsx
@@ -0,0 +1,27 @@
+import React from 'react';
+import { useTranslation } from 'react-i18next';
+import { Text, View } from 'react-native';
+
+import LoadingIndicator from '../../../base/react/components/native/LoadingIndicator';
+import BaseTheme from '../../../base/ui/components/BaseTheme.native';
+import styles from '../../../lobby/components/native/styles';
+
+/**
+ * The component that renders visitors queue UI.
+ *
+ * @returns {ReactElement}
+ */
+export default function VisitorsQueue() {
+    const { t } = useTranslation();
+
+    return (
+        <View style = { styles.lobbyWaitingFragmentContainer }>
+            <Text style = { styles.lobbyTitle }>
+                { t('visitors.waitingMessage') }
+            </Text>
+            <LoadingIndicator
+                color = { BaseTheme.palette.icon01 }
+                style = { styles.loadingIndicator } />
+        </View>
+    );
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/styles.ts b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/styles.ts
new file mode 100644
index 0000000..2189819
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/native/styles.ts
@@ -0,0 +1,12 @@
+/**
+ * The styles of the feature visitors.
+ */
+export default {
+
+    raiseHandButton: {
+        display: 'flex',
+        alignItems: 'center',
+        justifyContent: 'center',
+        width: '100%'
+    }
+};
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/JoinMeetingDialog.tsx b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/JoinMeetingDialog.tsx
new file mode 100644
index 0000000..3017e82
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/JoinMeetingDialog.tsx
@@ -0,0 +1,75 @@
+import { noop } from 'lodash';
+import React from 'react';
+import { useTranslation } from 'react-i18next';
+import { makeStyles } from 'tss-react/mui';
+
+import { IconArrowUp } from '../../../base/icons/svg';
+import ToolboxButtonWithPopup from '../../../base/toolbox/components/web/ToolboxButtonWithPopup';
+import Dialog from '../../../base/ui/components/web/Dialog';
+import { RaiseHandButton } from '../../../reactions/components/web/RaiseHandButton';
+
+const useStyles = makeStyles()(theme => {
+    return {
+        raiseHand: {
+            alignItems: 'center',
+            display: 'flex',
+            flexDirection: 'column',
+            marginTop: theme.spacing(3),
+            marginBottom: theme.spacing(3),
+            pointerEvents: 'none'
+        },
+        raiseHandTooltip: {
+            border: '1px solid #444',
+            borderRadius: theme.shape.borderRadius,
+            paddingBottom: theme.spacing(1),
+            paddingTop: theme.spacing(1),
+            paddingLeft: theme.spacing(2),
+            paddingRight: theme.spacing(2)
+        },
+        raiseHandButton: {
+            display: 'inline-block',
+            marginTop: theme.spacing(2),
+            marginBottom: theme.spacing(2),
+            position: 'relative'
+        }
+    };
+});
+
+/**
+ * Component that renders the join meeting dialog for visitors.
+ *
+ * @returns {JSX.Element}
+ */
+export default function JoinMeetingDialog() {
+    const { t } = useTranslation();
+    const { classes } = useStyles();
+
+    return (
+        <Dialog
+            cancel = {{ hidden: true }}
+            ok = {{ translationKey: 'dialog.Ok' }}
+            titleKey = 'visitors.joinMeeting.title'>
+            <div className = 'join-meeting-dialog'>
+                <p>{t('visitors.joinMeeting.description')}</p>
+                <div className = { classes.raiseHand }>
+                    <p className = { classes.raiseHandTooltip }>{t('visitors.joinMeeting.raiseHand')}</p>
+                    <div className = { classes.raiseHandButton }>
+                        <ToolboxButtonWithPopup
+                            icon = { IconArrowUp }
+                            iconDisabled = { false }
+                            onPopoverClose = { noop }
+                            onPopoverOpen = { noop }
+                            popoverContent = { null }
+                            visible = { false }>
+                            {/* @ts-ignore */}
+                            <RaiseHandButton
+                                disableClick = { true }
+                                raisedHand = { true } />
+                        </ToolboxButtonWithPopup>
+                    </div>
+                </div>
+                <p>{t('visitors.joinMeeting.wishToSpeak')}</p>
+            </div>
+        </Dialog>
+    );
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/VisitorsCountLabel.tsx b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/VisitorsCountLabel.tsx
index f78876f..e1d852d 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/VisitorsCountLabel.tsx
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/VisitorsCountLabel.tsx
@@ -7,7 +7,7 @@ import { IReduxState } from '../../../app/types';
 import { IconUsers } from '../../../base/icons/svg';
 import Label from '../../../base/label/components/web/Label';
 import Tooltip from '../../../base/tooltip/components/Tooltip';
-import { getVisitorsShortText, iAmVisitor } from '../../functions';
+import { getVisitorsCount, getVisitorsShortText, iAmVisitor } from '../../functions';
 
 const useStyles = makeStyles()(theme => {
     return {
@@ -21,8 +21,7 @@ const useStyles = makeStyles()(theme => {
 const VisitorsCountLabel = () => {
     const { classes: styles, theme } = useStyles();
     const visitorsMode = useSelector((state: IReduxState) => iAmVisitor(state));
-    const visitorsCount = useSelector((state: IReduxState) =>
-        state['features/visitors'].count || 0);
+    const visitorsCount = useSelector(getVisitorsCount);
     const { t } = useTranslation();
 
     return !visitorsMode && visitorsCount > 0 ? (<Tooltip
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/VisitorsQueue.tsx b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/VisitorsQueue.tsx
new file mode 100644
index 0000000..57dcfde
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/components/web/VisitorsQueue.tsx
@@ -0,0 +1,93 @@
+import React from 'react';
+import { useTranslation } from 'react-i18next';
+import { makeStyles } from 'tss-react/mui';
+
+import { withPixelLineHeight } from '../../../base/styles/functions';
+import LoadingIndicator from '../../../base/ui/components/web/Spinner';
+
+const useStyles = makeStyles()(theme => {
+    return {
+        container: {
+            height: '100%',
+            position: 'absolute',
+            inset: '0 0 0 0',
+            display: 'flex',
+            backgroundColor: theme.palette.ui01,
+            zIndex: 252,
+
+            '@media (max-width: 720px)': {
+                flexDirection: 'column-reverse'
+            }
+        },
+        content: {
+            display: 'flex',
+            flexDirection: 'column',
+            alignItems: 'center',
+            flexShrink: 0,
+            boxSizing: 'border-box',
+            position: 'relative',
+
+            width: '100%',
+            height: '100%',
+            zIndex: 252,
+
+            '@media (max-width: 720px)': {
+                height: 'auto',
+                margin: '0 auto'
+            },
+
+            // mobile phone landscape
+            '@media (max-width: 420px)': {
+                padding: '16px 16px 0 16px',
+                width: '100%'
+            },
+
+            '@media (max-width: 400px)': {
+                padding: '16px'
+            }
+        },
+        contentControls: {
+            display: 'flex',
+            flexDirection: 'column',
+            alignItems: 'center',
+            margin: 'auto',
+            width: '100%'
+        },
+        roomName: {
+            ...withPixelLineHeight(theme.typography.heading5),
+            color: theme.palette.text01,
+            marginBottom: theme.spacing(4),
+            overflow: 'hidden',
+            textAlign: 'center',
+            textOverflow: 'ellipsis',
+            whiteSpace: 'nowrap',
+            width: '100%'
+        },
+        spinner: {
+            margin: '8px'
+        }
+    };
+});
+
+/**
+ * The component that renders visitors queue UI.
+ *
+ * @returns {ReactElement}
+ */
+export default function VisitorsQueue() {
+    const { classes } = useStyles();
+    const { t } = useTranslation();
+
+    return (<div className = { classes.container }>
+        <div className = { classes.content }>
+            <div className = { classes.contentControls }>
+                <span className = { classes.roomName }>
+                    { t('visitors.waitingMessage') }
+                </span>
+                <div className = { classes.spinner }>
+                    <LoadingIndicator size = 'large' />
+                </div>
+            </div>
+        </div>
+    </div>);
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/functions.ts b/node_modules/@jitsi/react-native-sdk/react/features/visitors/functions.ts
index 74fb578..1116d4e 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/visitors/functions.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/functions.ts
@@ -45,3 +45,47 @@ export function iAmVisitor(stateful: IStateful) {
 export function getVisitorsCount(stateful: IStateful) {
     return toState(stateful)['features/visitors'].count ?? 0;
 }
+
+/**
+ * Returns the number of visitors that are waiting in queue.
+ *
+ * @param {Function|Object} stateful - The redux store or {@code getState}
+ * function.
+ * @returns {number} - The number of visitors in queue.
+ */
+export function getVisitorsInQueueCount(stateful: IStateful) {
+    return toState(stateful)['features/visitors'].inQueueCount ?? 0;
+}
+
+/**
+ * Whether visitor mode is supported.
+ *
+ * @param {Function|Object} stateful - The redux store or {@code getState}
+ * function.
+ * @returns {boolean} Whether visitor moder is supported.
+ */
+export function isVisitorsSupported(stateful: IStateful) {
+    return toState(stateful)['features/visitors'].supported;
+}
+
+/**
+ * Whether visitor mode is live.
+ *
+ * @param {Function|Object} stateful - The redux store or {@code getState}
+ * function.
+ * @returns {boolean} Whether visitor moder is live.
+ */
+export function isVisitorsLive(stateful: IStateful) {
+    return toState(stateful)['features/base/conference'].metadata?.visitors?.live;
+}
+
+/**
+ * Whether to show visitor queue screen.
+ *
+ * @param {Function|Object} stateful - The redux store or {@code getState}
+ * function.
+ * @returns {boolean} Whether current participant is visitor and is in queue.
+ */
+export function showVisitorsQueue(stateful: IStateful) {
+    return toState(stateful)['features/visitors'].inQueue;
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/visitors/middleware.ts
index 309f58b..89d5c3b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/visitors/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/middleware.ts
@@ -2,38 +2,57 @@ import i18n from 'i18next';
 import { batch } from 'react-redux';
 
 import { IStore } from '../app/types';
+import { IStateful } from '../base/app/types';
 import {
     CONFERENCE_JOINED,
     CONFERENCE_JOIN_IN_PROGRESS,
-    ENDPOINT_MESSAGE_RECEIVED
+    ENDPOINT_MESSAGE_RECEIVED,
+    UPDATE_CONFERENCE_METADATA
 } from '../base/conference/actionTypes';
+import { SET_CONFIG } from '../base/config/actionTypes';
+import { CONNECTION_FAILED } from '../base/connection/actionTypes';
 import { connect, setPreferVisitor } from '../base/connection/actions';
 import { disconnect } from '../base/connection/actions.any';
-import { JitsiConferenceEvents } from '../base/lib-jitsi-meet';
+import { openDialog } from '../base/dialog/actions';
+import { JitsiConferenceEvents, JitsiConnectionErrors } from '../base/lib-jitsi-meet';
+import { PARTICIPANT_UPDATED } from '../base/participants/actionTypes';
 import { raiseHand } from '../base/participants/actions';
-import { getLocalParticipant, getParticipantById } from '../base/participants/functions';
+import {
+    getLocalParticipant,
+    getParticipantById,
+    isLocalParticipantModerator
+} from '../base/participants/functions';
 import MiddlewareRegistry from '../base/redux/MiddlewareRegistry';
+import { toState } from '../base/redux/functions';
 import { BUTTON_TYPES } from '../base/ui/constants.any';
 import { hideNotification, showNotification } from '../notifications/actions';
 import {
     NOTIFICATION_ICON,
     NOTIFICATION_TIMEOUT_TYPE,
+    VISITORS_NOT_LIVE_NOTIFICATION_ID,
     VISITORS_PROMOTION_NOTIFICATION_ID
 } from '../notifications/constants';
 import { INotificationProps } from '../notifications/types';
 import { open as openParticipantsPane } from '../participants-pane/actions';
+import { joinConference } from '../prejoin/actions';
 
+import { UPDATE_VISITORS_IN_QUEUE_COUNT } from './actionTypes';
 import {
     approveRequest,
     clearPromotionRequest,
     denyRequest,
+    goLive,
     promotionRequestReceived,
+    setInVisitorsQueue,
     setVisitorDemoteActor,
     setVisitorsSupported,
-    updateVisitorsCount
+    updateVisitorsCount,
+    updateVisitorsInQueueCount
 } from './actions';
-import { getPromotionRequests } from './functions';
+import { JoinMeetingDialog } from './components';
+import { getPromotionRequests, getVisitorsCount, getVisitorsInQueueCount } from './functions';
 import logger from './logger';
+import { WebsocketClient } from './websocket-client';
 
 MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
     switch (action.type) {
@@ -43,7 +62,7 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
         conference.on(JitsiConferenceEvents.PROPERTIES_CHANGED, (properties: { 'visitor-count': number; }) => {
             const visitorCount = Number(properties?.['visitor-count']);
 
-            if (!isNaN(visitorCount) && getState()['features/visitors'].count !== visitorCount) {
+            if (!isNaN(visitorCount) && getVisitorsCount(getState) !== visitorCount) {
                 dispatch(updateVisitorsCount(visitorCount));
             }
         });
@@ -53,24 +72,26 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
         const { conference } = action;
 
         if (getState()['features/visitors'].iAmVisitor) {
-            const { demoteActorDisplayName } = getState()['features/visitors'];
-
-            dispatch(setVisitorDemoteActor(undefined));
 
-            const notificationParams: INotificationProps = {
-                titleKey: 'visitors.notification.title',
-                descriptionKey: 'visitors.notification.description'
-            };
+            const { demoteActorDisplayName } = getState()['features/visitors'];
 
             if (demoteActorDisplayName) {
-                notificationParams.descriptionKey = 'visitors.notification.demoteDescription';
-                notificationParams.descriptionArguments = {
-                    actor: demoteActorDisplayName
+                const notificationParams: INotificationProps = {
+                    titleKey: 'visitors.notification.title',
+                    descriptionKey: 'visitors.notification.demoteDescription',
+                    descriptionArguments: {
+                        actor: demoteActorDisplayName
+                    }
                 };
+
+                batch(() => {
+                    dispatch(showNotification(notificationParams, NOTIFICATION_TIMEOUT_TYPE.STICKY));
+                    dispatch(setVisitorDemoteActor(undefined));
+                });
+            } else {
+                dispatch(openDialog(JoinMeetingDialog));
             }
 
-            // check for demote actor and update notification
-            dispatch(showNotification(notificationParams, NOTIFICATION_TIMEOUT_TYPE.STICKY));
         } else {
             dispatch(setVisitorsSupported(conference.isVisitorsSupported()));
             conference.on(JitsiConferenceEvents.VISITORS_SUPPORTED_CHANGED, (value: boolean) => {
@@ -89,8 +110,9 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
                 if (localParticipant && localParticipant.id === msg.id) {
                     // handle demote
                     dispatch(disconnect(true))
-                        .then(() => dispatch(setPreferVisitor(true)))
                         .then(() => {
+                            dispatch(setPreferVisitor(true));
+
                             // we need to set the name, so we can use it later in the notification
                             if (participantById) {
                                 dispatch(setVisitorDemoteActor(participantById.name));
@@ -130,17 +152,179 @@ MiddlewareRegistry.register(({ dispatch, getState }) => next => action => {
 
         if (data?.action === 'promotion-response' && data.approved) {
             const request = getPromotionRequests(getState())
-                .find(r => r.from === data.id);
+                .find((r: any) => r.from === data.id);
 
             request && dispatch(clearPromotionRequest(request));
         }
         break;
     }
+    case CONNECTION_FAILED: {
+        const { error } = action;
+
+        if (error?.name !== JitsiConnectionErrors.NOT_LIVE_ERROR) {
+            break;
+        }
+
+        const { hosts, visitors: visitorsConfig } = getState()['features/base/config'];
+        const { locationURL, preferVisitor } = getState()['features/base/connection'];
+
+        if (!visitorsConfig?.queueService || !locationURL || !preferVisitor) {
+            break;
+        }
+
+        // let's subscribe for visitor waiting queue
+        const { room } = getState()['features/base/conference'];
+        const conferenceJid = `${room}@${hosts?.muc}`;
+
+        WebsocketClient.getInstance()
+            .connect(`wss://${visitorsConfig?.queueService}/visitor/websocket`,
+                `/secured/conference/visitor/topic.${conferenceJid}`,
+                msg => {
+                    if ('status' in msg && msg.status === 'live') {
+                        logger.info('The conference is now live!');
+
+                        WebsocketClient.getInstance().disconnect()
+                            .then(() => {
+                                let delay = 0;
+
+                                // now let's connect to meeting
+                                if ('randomDelayMs' in msg) {
+                                    delay = msg.randomDelayMs;
+                                }
+
+                                if (WebsocketClient.getInstance().connectCount > 1) {
+                                    // if we keep connecting/disconnecting, let's slow it down
+                                    delay = 30 * 1000;
+                                }
+
+                                setTimeout(() => {
+                                    dispatch(joinConference());
+                                    dispatch(setInVisitorsQueue(false));
+                                }, Math.random() * delay);
+                            });
+                    }
+                },
+
+                getState()['features/base/jwt'].jwt,
+                () => {
+                    dispatch(setInVisitorsQueue(true));
+                });
+
+        break;
+    }
+    case PARTICIPANT_UPDATED: {
+        const { visitors: visitorsConfig } = toState(getState)['features/base/config'];
+
+        if (visitorsConfig?.queueService && isLocalParticipantModerator(getState)) {
+            const { metadata } = getState()['features/base/conference'];
+
+            if (metadata?.visitors?.live === false && !WebsocketClient.getInstance().isActive()) {
+                // when go live is available and false, we should subscribe
+                // to the service if available to listen for waiting visitors
+                _subscribeQueueStats(getState(), dispatch);
+            }
+        }
+
+        break;
+    }
+    case SET_CONFIG: {
+        const result = next(action);
+        const { preferVisitor } = action.config;
+
+        if (preferVisitor !== undefined) {
+            setPreferVisitor(preferVisitor);
+        }
+
+        return result;
+    }
+    case UPDATE_CONFERENCE_METADATA: {
+        const { metadata } = action;
+        const { visitors: visitorsConfig } = toState(getState)['features/base/config'];
+
+        if (!visitorsConfig?.queueService) {
+            break;
+        }
+
+        if (isLocalParticipantModerator(getState)) {
+            if (metadata?.visitors?.live === false) {
+                if (!WebsocketClient.getInstance().isActive()) {
+                    // if metadata go live changes to goLive false and local is moderator
+                    // we should subscribe to the service if available to listen for waiting visitors
+                    _subscribeQueueStats(getState(), dispatch);
+                }
+
+                _showNotLiveNotification(dispatch, getVisitorsInQueueCount(getState));
+            } else if (metadata?.visitors?.live) {
+                dispatch(hideNotification(VISITORS_NOT_LIVE_NOTIFICATION_ID));
+                WebsocketClient.getInstance().disconnect();
+            }
+        }
+
+        break;
+    }
+    case UPDATE_VISITORS_IN_QUEUE_COUNT: {
+        _showNotLiveNotification(dispatch, action.count);
+
+        break;
+    }
     }
 
     return next(action);
 });
 
+/**
+ * Shows a notification that the meeting is not live.
+ *
+ * @param {Dispatch} dispatch - The Redux dispatch function.
+ * @param {number} count - The count of visitors waiting.
+ * @returns {void}
+ */
+function _showNotLiveNotification(dispatch: IStore['dispatch'], count: number): void {
+    // let's show notification
+    dispatch(showNotification({
+        titleKey: 'notify.waitingVisitorsTitle',
+        descriptionKey: 'notify.waitingVisitors',
+        descriptionArguments: {
+            waitingVisitors: count
+        },
+        disableClosing: true,
+        uid: VISITORS_NOT_LIVE_NOTIFICATION_ID,
+        customActionNameKey: [ 'participantsPane.actions.goLive' ],
+        customActionType: [ BUTTON_TYPES.PRIMARY ],
+        customActionHandler: [ () => batch(() => {
+            dispatch(hideNotification(VISITORS_NOT_LIVE_NOTIFICATION_ID));
+            dispatch(goLive());
+        }) ],
+        icon: NOTIFICATION_ICON.PARTICIPANTS
+    }, NOTIFICATION_TIMEOUT_TYPE.STICKY));
+}
+
+/**
+ * Subscribe for moderator stats.
+ *
+ * @param {Function|Object} stateful - The redux store or {@code getState}
+ * function.
+ * @param {Dispatch} dispatch - The Redux dispatch function.
+ * @returns {void}
+ */
+function _subscribeQueueStats(stateful: IStateful, dispatch: IStore['dispatch']) {
+    const { hosts } = toState(stateful)['features/base/config'];
+    const { room } = toState(stateful)['features/base/conference'];
+    const conferenceJid = `${room}@${hosts?.muc}`;
+
+    const { visitors: visitorsConfig } = toState(stateful)['features/base/config'];
+
+    WebsocketClient.getInstance()
+        .connect(`wss://${visitorsConfig?.queueService}/visitor/websocket`,
+            `/secured/conference/state/topic.${conferenceJid}`,
+            msg => {
+                if ('visitorsWaiting' in msg) {
+                    dispatch(updateVisitorsInQueueCount(msg.visitorsWaiting));
+                }
+            },
+            toState(stateful)['features/base/jwt'].jwt);
+}
+
 /**
  * Function to handle the promotion notification.
  *
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/reducer.ts b/node_modules/@jitsi/react-native-sdk/react/features/visitors/reducer.ts
index 58fbf9e..a5bf62b 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/visitors/reducer.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/reducer.ts
@@ -4,16 +4,20 @@ import ReducerRegistry from '../base/redux/ReducerRegistry';
 import {
     CLEAR_VISITOR_PROMOTION_REQUEST,
     I_AM_VISITOR_MODE,
+    SET_IN_VISITORS_QUEUE,
     SET_VISITORS_SUPPORTED,
     SET_VISITOR_DEMOTE_ACTOR,
     UPDATE_VISITORS_COUNT,
+    UPDATE_VISITORS_IN_QUEUE_COUNT,
     VISITOR_PROMOTION_REQUEST
 } from './actionTypes';
 import { IPromotionRequest } from './types';
 
 const DEFAULT_STATE = {
-    count: -1,
+    count: 0,
     iAmVisitor: false,
+    inQueue: false,
+    inQueueCount: 0,
     showNotification: false,
     supported: false,
     promotionRequests: []
@@ -23,6 +27,8 @@ export interface IVisitorsState {
     count?: number;
     demoteActorDisplayName?: string;
     iAmVisitor: boolean;
+    inQueue: boolean;
+    inQueueCount?: number;
     promotionRequests: IPromotionRequest[];
     supported: boolean;
 }
@@ -49,12 +55,28 @@ ReducerRegistry.register<IVisitorsState>('features/visitors', (state = DEFAULT_S
             count: action.count
         };
     }
+    case UPDATE_VISITORS_IN_QUEUE_COUNT: {
+        if (state.count === action.count) {
+            return state;
+        }
+
+        return {
+            ...state,
+            inQueueCount: action.count
+        };
+    }
     case I_AM_VISITOR_MODE: {
         return {
             ...state,
             iAmVisitor: action.enabled
         };
     }
+    case SET_IN_VISITORS_QUEUE: {
+        return {
+            ...state,
+            inQueue: action.value
+        };
+    }
     case SET_VISITOR_DEMOTE_ACTOR: {
         return {
             ...state,
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/visitors/websocket-client.ts b/node_modules/@jitsi/react-native-sdk/react/features/visitors/websocket-client.ts
new file mode 100644
index 0000000..6f08c8d
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/visitors/websocket-client.ts
@@ -0,0 +1,150 @@
+/* eslint-disable @typescript-eslint/naming-convention */
+import { Client } from '@stomp/stompjs';
+
+import logger from './logger';
+
+interface QueueServiceResponse {
+    conference: string;
+}
+export interface StateResponse extends QueueServiceResponse {
+    randomDelayMs: number;
+    status: string;
+}
+
+export interface VisitorResponse extends QueueServiceResponse {
+    visitorsWaiting: number;
+}
+
+/**
+ * Websocket client impl, used for visitors queue.
+ * Uses STOMP for authenticating (https://stomp.github.io/).
+ */
+export class WebsocketClient {
+    private stompClient: Client | undefined;
+
+    private static instance: WebsocketClient;
+
+    private retriesCount = 0;
+
+    private _connectCount = 0;
+
+    /**
+     *  WebsocketClient getInstance.
+     *
+     * @static
+     * @returns {WebsocketClient}  - WebsocketClient instance.
+     */
+    static getInstance(): WebsocketClient {
+        if (!this.instance) {
+            this.instance = new WebsocketClient();
+        }
+
+        return this.instance;
+    }
+
+    /**
+     * Connect to endpoint.
+     *
+     * @param {string} queueServiceURL - The service URL to use.
+     * @param {string} endpoint - The endpoint to subscribe to.
+     * @param {Function} callback - The callback to execute when we receive a message from the endpoint.
+     * @param {string} token - The token, if any, to be used for authorization.
+     * @param {Function?} connectCallback - The callback to execute when successfully connected.
+     *
+     * @returns {void}
+     */
+    connect(queueServiceURL: string, // eslint-disable-line max-params
+            endpoint: string,
+            callback: (response: StateResponse | VisitorResponse) => void,
+            token: string | undefined,
+            connectCallback?: () => void): void {
+        this.stompClient = new Client({
+            brokerURL: queueServiceURL,
+            forceBinaryWSFrames: true,
+            appendMissingNULLonIncoming: true
+        });
+
+        const errorConnecting = (error: any) => {
+            if (this.retriesCount > 3) {
+                this.stompClient?.deactivate();
+                this.stompClient = undefined;
+
+                return;
+            }
+
+            this.retriesCount++;
+
+            logger.error(`Error connecting to ${queueServiceURL} ${JSON.stringify(error)}`);
+        };
+
+        this.stompClient.onWebSocketError = errorConnecting;
+
+        this.stompClient.onStompError = frame => {
+            errorConnecting(frame.headers.message);
+        };
+
+        if (token) {
+            this.stompClient.connectHeaders = {
+                Authorization: `Bearer ${token}`
+            };
+        }
+
+        this.stompClient.onConnect = () => {
+            if (!this.stompClient) {
+                return;
+            }
+
+            this.retriesCount = 0;
+
+            logger.info(`Connected to:${endpoint}`);
+            this._connectCount++;
+            connectCallback?.();
+
+            this.stompClient.subscribe(endpoint, message => {
+                try {
+                    callback(JSON.parse(message.body));
+                } catch (e) {
+                    logger.error(`Error parsing response: ${message}`, e);
+                }
+            });
+        };
+
+        this.stompClient.activate();
+    }
+
+    /**
+     * Disconnects the current stomp  client instance and clears it.
+     *
+     * @returns {Promise}
+     */
+    disconnect(): Promise<any> {
+        if (!this.stompClient) {
+            return Promise.resolve();
+        }
+
+        const url = this.stompClient.brokerURL;
+
+        return this.stompClient.deactivate().then(() => {
+            logger.info(`disconnected from: ${url}`);
+            this.stompClient = undefined;
+        });
+    }
+
+    /**
+     * Checks whether the instance is created and connected or in connecting state.
+     *
+     * @returns {boolean} Whether the connect method was executed.
+     */
+    isActive() {
+        return this.stompClient !== undefined;
+    }
+
+    /**
+     * Returns the number of connections.
+     *
+     * @returns {number} The number of connections for the life of the app.
+     */
+    get connectCount(): number {
+        return this._connectCount;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/web-hid/middleware.ts b/node_modules/@jitsi/react-native-sdk/react/features/web-hid/middleware.ts
index 123a9dc..6e3f761 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/web-hid/middleware.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/web-hid/middleware.ts
@@ -33,7 +33,7 @@ let updateDeviceListener: (e: any) => void;
  * @param {Store} store - The redux store.
  * @returns {Function}
  */
-MiddlewareRegistry.register((store: IStore) => next => async action => {
+MiddlewareRegistry.register((store: IStore) => next => action => {
     const { dispatch, getState } = store;
 
     if (!getWebHIDFeatureConfig(getState())) {
@@ -88,33 +88,7 @@ MiddlewareRegistry.register((store: IStore) => next => async action => {
         break;
     }
     case REQUEST_HID_DEVICE: {
-        const hidManager = getWebHidInstance();
-
-        const availableDevices = await hidManager.requestHidDevices();
-
-        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
-        if (!availableDevices || !availableDevices.length) {
-            logger.info('HID device not available');
-            break;
-        }
-
-        const _initDeviceListener = (e: CustomEvent<{ deviceInfo: IDeviceInfo; }>) =>
-            dispatch(initDeviceInfo(e.detail.deviceInfo));
-        const _updateDeviceListener
-            = (e: CustomEvent<{ actionResult: { eventName: string; }; deviceInfo: IDeviceInfo; }>) => {
-                handleUpdateHidDevice(dispatch, e);
-            };
-
-        initDeviceListener = _initDeviceListener;
-        updateDeviceListener = _updateDeviceListener;
-
-        attachHidEventListeners(initDeviceListener, updateDeviceListener);
-        await hidManager.listenToConnectedHid();
-
-        // sync headset to mute if participant is already muted.
-        if (isAudioMuted(store.getState())) {
-            hidManager.sendDeviceReport({ command: COMMANDS.MUTE_ON });
-        }
+        _onRequestHIDDevice(store);
 
         break;
     }
@@ -132,3 +106,40 @@ MiddlewareRegistry.register((store: IStore) => next => async action => {
 
     return next(action);
 });
+
+/**
+ * Handles HID device requests.
+ *
+ * @param {IStore} store - The redux store.
+ * @returns {Promise}
+ */
+async function _onRequestHIDDevice(store: IStore) {
+    const { dispatch } = store;
+    const hidManager = getWebHidInstance();
+    const availableDevices = await hidManager.requestHidDevices();
+
+    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
+    if (!availableDevices || !availableDevices.length) {
+        logger.info('HID device not available');
+
+        return;
+    }
+
+    const _initDeviceListener = (e: CustomEvent<{ deviceInfo: IDeviceInfo; }>) =>
+        dispatch(initDeviceInfo(e.detail.deviceInfo));
+    const _updateDeviceListener
+        = (e: CustomEvent<{ actionResult: { eventName: string; }; deviceInfo: IDeviceInfo; }>) => {
+            handleUpdateHidDevice(dispatch, e);
+        };
+
+    initDeviceListener = _initDeviceListener;
+    updateDeviceListener = _updateDeviceListener;
+
+    attachHidEventListeners(initDeviceListener, updateDeviceListener);
+    await hidManager.listenToConnectedHid();
+
+    // sync headset to mute if participant is already muted.
+    if (isAudioMuted(store.getState())) {
+        hidManager.sendDeviceReport({ command: COMMANDS.MUTE_ON });
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/actions.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/actions.web.ts
index 8e67edd..f1e8c32 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/actions.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/actions.web.ts
@@ -14,7 +14,7 @@ export * from './actions.any';
  * @returns {Function}
  */
 export function toggleWhiteboard() {
-    return async (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
+    return (dispatch: IStore['dispatch'], getState: IStore['getState']) => {
         const state = getState();
         const isAllowed = isWhiteboardAllowed(state);
         const isOpen = isWhiteboardOpen(state);
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/hooks.ts b/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/hooks.ts
new file mode 100644
index 0000000..76ebc3e
--- /dev/null
+++ b/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/hooks.ts
@@ -0,0 +1,23 @@
+import { useSelector } from 'react-redux';
+
+import WhiteboardButton from './components/web/WhiteboardButton';
+import { isWhiteboardButtonVisible } from './functions';
+
+const whiteboard = {
+    key: 'whiteboard',
+    Content: WhiteboardButton,
+    group: 3
+};
+
+/**
+ * A hook that returns the whiteboard button if it is enabled and undefined otherwise.
+ *
+ *  @returns {Object | undefined}
+ */
+export function useWhiteboardButton() {
+    const _isWhiteboardButtonVisible = useSelector(isWhiteboardButtonVisible);
+
+    if (_isWhiteboardButtonVisible) {
+        return whiteboard;
+    }
+}
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/middleware.native.ts b/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/middleware.native.ts
index ec5a743..97a7a04 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/middleware.native.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/middleware.native.ts
@@ -30,7 +30,7 @@ import './middleware.any';
  * @param {Store} store - The redux store.
  * @returns {Function}
  */
-MiddlewareRegistry.register((store: IStore) => (next: Function) => async (action: AnyAction) => {
+MiddlewareRegistry.register((store: IStore) => (next: Function) => (action: AnyAction) => {
     const { dispatch, getState } = store;
     const state = getState();
 
diff --git a/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/middleware.web.ts b/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/middleware.web.ts
index ba5e85c..bb1aa36 100644
--- a/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/middleware.web.ts
+++ b/node_modules/@jitsi/react-native-sdk/react/features/whiteboard/middleware.web.ts
@@ -59,7 +59,7 @@ const focusWhiteboard = (store: IStore) => {
  * @param {Store} store - The redux store.
  * @returns {Function}
  */
-MiddlewareRegistry.register((store: IStore) => (next: Function) => async (action: AnyAction) => {
+MiddlewareRegistry.register((store: IStore) => (next: Function) => (action: AnyAction) => {
     const { dispatch, getState } = store;
     const state = getState();
     const conference = getCurrentConference(state);
@@ -69,30 +69,18 @@ MiddlewareRegistry.register((store: IStore) => (next: Function) => async (action
         const existingCollabDetails = getCollabDetails(state);
         const enforceUserLimit = shouldEnforceUserLimit(state);
         const notifyUserLimit = shouldNotifyUserLimit(state);
+        const iAmRecorder = Boolean(state['features/base/config'].iAmRecorder);
 
         if (enforceUserLimit) {
             dispatch(restrictWhiteboard(false));
             dispatch(openDialog(WhiteboardLimitDialog));
+            iAmRecorder && setTimeout(() => dispatch(hideDialog(WhiteboardLimitDialog)), 3000);
 
             return next(action);
         }
 
         if (!existingCollabDetails) {
-            const collabLinkData = await generateCollaborationLinkData();
-            const collabServerUrl = generateCollabServerUrl(state);
-            const roomId = getCurrentRoomId(state);
-            const collabData = {
-                collabDetails: {
-                    roomId,
-                    roomKey: collabLinkData.roomKey
-                },
-                collabServerUrl
-            };
-
-            focusWhiteboard(store);
-            dispatch(setupWhiteboard(collabData));
-            conference?.getMetadataHandler().setMetadata(WHITEBOARD_ID, collabData);
-            raiseWhiteboardNotification(WhiteboardStatus.INSTANTIATED);
+            setNewWhiteboardOpen(store);
 
             return next(action);
         }
@@ -146,3 +134,29 @@ function raiseWhiteboardNotification(status: WhiteboardStatus) {
     }
 }
 
+/**
+ * Sets a new whiteboard open.
+ *
+ * @param {IStore} store - The redux store.
+ * @returns {Promise}
+ */
+async function setNewWhiteboardOpen(store: IStore) {
+    const { dispatch, getState } = store;
+    const collabLinkData = await generateCollaborationLinkData();
+    const state = getState();
+    const conference = getCurrentConference(state);
+    const collabServerUrl = generateCollabServerUrl(state);
+    const roomId = getCurrentRoomId(state);
+    const collabData = {
+        collabDetails: {
+            roomId,
+            roomKey: collabLinkData.roomKey
+        },
+        collabServerUrl
+    };
+
+    focusWhiteboard(store);
+    dispatch(setupWhiteboard(collabData));
+    conference?.getMetadataHandler().setMetadata(WHITEBOARD_ID, collabData);
+    raiseWhiteboardNotification(WhiteboardStatus.INSTANTIATED);
+}
